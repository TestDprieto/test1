/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global class LWCDatasource implements vlocity_cmt.VlocityOpenInterface2 {
    global LWCDatasource() {

    }
    @AuraEnabled
    global static Boolean checkPermission(String permissions) {
        return null;
    }
    global static Object doAsyncInvoke(String sClassName, String sMethodName, String input, String options, String stagingObjectId) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static String doEncryptedDatasourceWithKey(String globalKey, String scope, String objType) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static String doEncryptedDatasourceWithKeyUncached(String globalKey, String scope, String objType) {
        return null;
    }
    global static Object doGenericInvoke(String sClassName, String sMethodName, String input, String options) {
        return null;
    }
    global static Object doWebRest(String methodType, String url, Map<String,Object> headers, String data) {
        return null;
    }
    @AuraEnabled
    global static String getActionDetails(String sObjType, String sFilterContextId, String displayOn, String linkType) {
        return null;
    }
    @AuraEnabled
    global static List<vlocity_cmt__VlocityAction__c> getActionsInfo() {
        return null;
    }
    @AuraEnabled
    global static String getAppliedAttributes(String clientId, String categoryCode) {
        return null;
    }
    @AuraEnabled
    global static String getAttributeCategories(String accountId) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static Object getCustomLabels(List<String> customLabels, String lang) {
        return null;
    }
    @AuraEnabled
    global static Object getCustomPermissionsForUser() {
        return null;
    }
    @AuraEnabled
    global static Object getCustomSettings(String customSettingName) {
        return null;
    }
    global static Object getDataViaDataRaptor(Map<String,Object> inputMap, String bundleName) {
        return null;
    }
    @AuraEnabled
    global static String getDatasourceQuery(String soqlStmt) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static String getInteractionObject(Id interactionId) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static String getLiveTrackingEntries(Id interactionId) {
        return null;
    }
    @AuraEnabled
    global static String getNameSpacePrefix() {
        return null;
    }
    @AuraEnabled
    global static String getObjectType(Id recordId) {
        return null;
    }
    @AuraEnabled
    global static String getSearchQuery(String soslStmt) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static String getTrackingEntries(Id interactionId) {
        return null;
    }
    @AuraEnabled
    global static String getUrlForAction(String actionId, String contextId, String objType) {
        return null;
    }
    @AuraEnabled
    global static Object getUserProfile() {
        return null;
    }
    @AuraEnabled
    global static Object handleData(String dataSourceMap) {
        return null;
    }
    @AuraEnabled
    global static Boolean isCommunity() {
        return null;
    }
    @AuraEnabled
    global static Object trackVlocityInteraction(String trackingData) {
        return null;
    }
    @AuraEnabled
    @RemoteAction
    global static void updateTask(Map<String,Object> interactionJson, Id interactionId) {

    }
}

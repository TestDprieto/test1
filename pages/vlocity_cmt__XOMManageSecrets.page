<apex:page showHeader="true" sidebar="true" standardStylesheets="false" docType="html-5.0" controller="vlocity_cmt.XOMThorSecretsController" extensions="vlocity_cmt.XOMOffPlatformAccessConfigController">
  <apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/javascripts/vlocity.js')}"/>
  <script type="text/javascript" src="{!URLFOR($Resource.XomThorIntegration)}"></script>
  <apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}"/>
  <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.slds, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
  <style>
      .table-wrapper {
          width: 90%;
          margin: auto;
      }
      
      .via-slds #heading {
          font-weight: 100;
        font-size: 22px;
        padding: 10px;
      }
      .message-notify {
          color: #0070d2;
      }
      
      .error-notify {
          color: rgba(178,34,34,1);
      }
      i {
          cursor : pointer;
      }
      
      .slds-form-element .slds-form-element__control .errorBox {
          border-color: rgba(178,34,34,1);
          background: rgba(178,34,34,0.1);
      }
      
      .via-slds .slds-box {
        padding: 1rem;
        border-radius: 0.25rem;
        border: 1px solid #dddbda;
        box-shadow: 1px 1px 1px 0px #80808042;
    }
    .via-slds .slds-button_neutral, .via-slds .slds-button--neutral, .via-slds .slds-input {
        box-shadow: 1px 1px 1px 0px #80808042;
    }

    .table-project-specific-secrets, .table-system-secrets {
        max-height: 370px;
        overflow: auto;
    }



  </style>
  <script>
      var app = angular.module ('manageSecretsApp', ["vlocity", 'thorIntegration']);
      
      var remoteActions = {
                              deleteThorSecret: "{!$RemoteAction.XOMThorSecretsController.deleteThorSecret}",
                              getThorSecrets: "{!$RemoteAction.XOMThorSecretsController.getThorSecrets}",
                              putThorSecrets: "{!$RemoteAction.XOMThorSecretsController.putThorSecrets}",
                          };
      
      app.config(function (remoteActionsProvider) {
        remoteActionsProvider.setRemoteActions(remoteActions);
    });

      app.controller ('manageSecretsController', ['$scope', 'remoteActions', function ($scope, remoteActions) {
          $scope.secrets = [];
          $scope.notificationMessage = '';
          $scope.isValidSecrets = true;
          $scope.showSpinner = false;
          $scope.isError = false;
          $scope.isSuccess = false;
          
          $scope.onAddMoreButtonPress = onAddMoreButtonPress;
          $scope.onRemoveButtonPress = onRemoveButtonPress;
          $scope.onEditButtonPress = onEditButtonPress;
          $scope.onCancelButtonPress = onCancelButtonPress;
          $scope.onSaveButtonPress = onSaveButtonPress;

          let prefixForKey = '/custom/';
          const HIDDEN_CONTENT = '******';
          let regex = new RegExp ('^/custom/');
          let key = 0;

          function getThorSecrets () {
              $scope.showSpinner = true;
              remoteActions.getThorSecrets ().then((response) => {
                  let secrets = JSON.parse(replaceHTMLMetaCharsInExpr (response))['secrets'];
                  $scope.secrets = [];
                  console.log (secrets);
                  secrets = secrets.map((secret) =>  {
                      secret.index = ++key;
                      secret.value = HIDDEN_CONTENT;
                      secret.isEditModeKey = false;
                      secret.isEditModeValue = false;
                      secret.isRemovable = true;
                      secret.isValidKey = true;
                      secret.isValidValue = true;
                      secret.message = null;
                      if (secret.name.indexOf ('/custom/') < 0) {
                          secret.isRemovable = false;
                      } else {
                          secret.name = secret.name.replace (regex, '')
                      }
                      return secret;
                  });
                  secrets = secrets.filter ((secret) => secret.isRemovable);                               
                  $scope.secrets.push (...secrets);
                  $scope.secrets.sort (sortOnTheBasisModificationMade);
                  $scope.isValidSecrets = true;
                  $scope.showSpinner = false;
              }, (errorResponse) => {
                  console.log (errorResponse);
                  $scope.showSpinner = false;
                  $scope.notification = errorResponse.message;
                   $scope.isSuccess = false;
                   $scope.isError = true;
              })
          }

          function sortOnTheBasisModificationMade (a, b) {
              let dateA = new Date(a['lastModifiedDate']);
              let dateB = new Date(b['lastModifiedDate']);
              
              if(dateA < dateB) {
                  return 1;
              } else if (dateB < dateA) {
                  return -1;
              } else {
                  return 0;
              }
          }

          function replaceHTMLMetaCharsInExpr (paramVal){
              var paramVal=paramVal ;
              if (paramVal!=null && paramVal!=''){
                  paramVal = paramVal.replace(/\&\quot\;/g, '"');
                  paramVal = paramVal.replace(/&#39;/g, "'");
                  paramVal = paramVal.replace(/\&\lt\=;/g,  "<=");
                  paramVal = paramVal.replace(/\&\gt\=;/g,  ">=");
                  paramVal = paramVal.replace(/\&\lt\;/g,   "<");
                  paramVal = paramVal.replace(/\&\gt\;/g,   ">");
                  paramVal = paramVal.replace(/\&\amp\;/g, "&");
              }
              return paramVal;
          };

          function onAddMoreButtonPress () {
              let newSecret = {index: ++key, name : '', value: '', isEditModeKey: true, isEditModeValue: true, isRemovable: true, isValidKey: true, isValidValue: true, message: null};
              let elements = [];
              $scope.secrets.unshift(newSecret);
              $scope.notification = null;
              $scope.isError = false;
              $scope.isSuccess = false;
              elements = document.getElementsByClassName('table-wrapper');
              elements[0].scrollTo(0,0);
          }

          function onRemoveButtonPress (secret) {
              $scope.showSpinner = true;
              let secretToBeRemoved = secret;
              let preparedRequestData = JSON.stringify ({'name': prefixForKey + secretToBeRemoved['name']});
              if (['isRemovable'] && confirm("Please confirm if you want to remove this secret")) {
                  remoteActions.deleteThorSecret (preparedRequestData).then (
                      (successResponse) => {
                          let responseJSON = JSON.parse(replaceHTMLMetaCharsInExpr (successResponse));
                           console.log (responseJSON);
                           $scope.notification = 'Removed successfully!';
                           $scope.isSuccess = true;
                           $scope.isError = false;
                           setTimeout(function(){ getThorSecrets(); }, 3000);
                      },
                      (errorResponse) => {
                          $scope.showSpinner = false;
                          console.log (errorResponse);
                          $scope.notification = errorResponse.message;
                           $scope.isSuccess = false;
                           $scope.isError = true;
                      }
                  )
              }
          }

          function onEditButtonPress (secret) {
              let secretToEdit = secret;
              secretToEdit['isEditModeValue'] = true;
              secretToEdit['value'] = '';
              $scope.notification = null;
              $scope.isError = false;
              $scope.isSuccess = false;
          }
          
          function onCancelButtonPress (secret) {
              let secretToEdit = secret;
              if (secretToEdit['isEditModeKey'] && secretToEdit['isEditModeValue']) {
                  $scope.secrets = $scope.secrets.filter ((s) => s.index !== secretToEdit.index);
                  $scope.notification = null;
                  $scope.isError = false;
                  $scope.isSuccess = false;
                  return;
              }
              secretToEdit['isEditModeValue'] = false;
              secretToEdit['value'] = HIDDEN_CONTENT;
              secretToEdit['isValidValue'] = true;
              $scope.notification = null;
              $scope.isError = false;
              $scope.isSuccess = false;
          }
          
          function onSaveButtonPress () {
              $scope.showSpinner = true;
              let secretsEdited = getEditedSecrets ();
              let secretsEditedStringified = JSON.stringify ({'secrets': secretsEdited});
              removePrefix ();
              if ($scope.isValidSecrets) {
                  remoteActions.putThorSecrets (secretsEditedStringified).then (
                      (response) => {
                          let responseJSON = JSON.parse(replaceHTMLMetaCharsInExpr (response));
                           console.log (responseJSON);
                           if (responseJSON['errors'] && responseJSON['errors'].length !== 0)
                           {
                               $scope.notification = 'Error occured while saving';
                               $scope.isError = true;
                               $scope.isSuccess = false;
                               $scope.secrets.forEach(secret => {
                                   responseJSON['errors'].forEach(errorResponse => {
                                       if (secret['name'] === errorResponse['name'].replace (regex, '')){ 
                                           secret['message'] = errorResponse['errorMessage']; 
                                           secret['isValidValue'] = false;
                                           secret['isValidKey'] = false;
                                       }
                                   })
                               })
                               $scope.showSpinner = false;
                           } else {
                               $scope.notification = 'Saved successfully!';
                               $scope.isSuccess = true;
                               $scope.isError = false;
                               document.getElementsByClassName ('save-button')[0].blur();
                               setTimeout(function(){ getThorSecrets(); }, 3000);
                           }
                      },
                      (errorResponse) => {
                          $scope.showSpinner = false;
                          console.log (errorResponse);
                          $scope.notification = errorResponse.message;
                           $scope.isSuccess = false;
                           $scope.isError = true;
                      }
                  )
              }
          }

          function removePrefix () {
            $scope.secrets.map ((secret) => {
                secret.name = secret.name.replace (regex, '');
            })
          }
          
          function getEditedSecrets () {
              $scope.isValidSecrets = true;
              let secretsToBeSaved = $scope.secrets.map ((secret) => {
                  let newSecret = null;
                  secret['isValidKey'] = true;
                  secret['isValidValue'] = true;
                  if (secret['isEditModeKey'] || secret['isRemovable']) {
                      secret['name'] = prefixForKey + secret['name'].trim();
                  }

                  if (secret['isEditModeValue'] && !secret['value'].trim()) {
                      secret['isValidValue'] = false;
                      $scope.isValidSecrets = false;
                      $scope.notification = 'The key or value should not be empty and key should start with "/custom/"';
                      $scope.isError = true;
                  }
                  if (secret['isValidKey'] && secret['isValidValue']) {
                      newSecret = {'name': secret['name'], 'value': secret['value']};
                  }
                  return newSecret;
              }).filter((secret) => secret && secret['value'] !== HIDDEN_CONTENT);
              return secretsToBeSaved;
          }
          
          getThorSecrets();
      }]);
      
  </script>
  <html ng-app = 'manageSecretsApp' ng-controller = 'manageSecretsController'>
      <div class="via-slds slds-scope">
          <h2 id = 'heading'>Manage Secrets</h2>
          <div class = 'slds-m-left_small message-notify' ng-if = "secrets.length === 0">Please press Add More button to add new secret</div>
          <div ng-class = "{'slds-m-left_small':true, 'error-notify': isError, 'message-notify': isSuccess}" ng-if = "notification.length !== 0">{{notification}}</div>
          <div class="via-slds slds-scope slds-box table-wrapper slds-m-top_medium slds-p-right_none">
              <div class = "table-project-specific-secrets">
                  <span ng-if = "secrets.length !== 0" >Project-specific secrets: </span>
                    <table class="backreference slds-table--cell-buffer slds-m-top_medium " ng-if = "secrets.length !== 0">
                        <tbody>
                            <tr ng-repeat = 'secret in secrets' >
                                <td>
                                    <div class="slds-m-left_medium slds-m-bottom_medium">
                                        <span class="fieldLabel">Key</span>
                                        <span>
                                            <div class="slds-form-element">
                                                <div class="slds-form-element__control">
                                                    <input type="text" ng-class="{'slds-input': true, errorBox: !secret['isValidKey']}" ng-model="secret['name']" ng-disabled = "!secret['isEditModeKey']"/>
                                                </div>
                                            </div>
                                            <div class="error-notify" ng-if = "secret['message']">{{secret['message']}}</div>
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    <div class="slds-m-left_medium slds-m-bottom_medium">
                                        <span class="fieldLabel">Value</span>
                                        <span >
                                            <div class="slds-form-element">
                                                <div class="slds-form-element__control">
                                                    <input type="text" ng-class="{'slds-input': true, errorBox: !secret['isValidValue']}" ng-model="secret['value']" ng-disabled = "!secret['isEditModeValue']"/>
                                                </div>
                                            </div>
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    <div class="slds-box--small slds-text-align--left slds-m-top_medium btnSearch">
                                            <i class="icon-v-edit-line slds-m-left_medium" ng-click = "onEditButtonPress(secret)" ng-if = '!secret.isEditModeKey && !secret.isEditModeValue'></i>
                                            <i class="icon-v-close slds-m-left_medium" ng-click = "onCancelButtonPress(secret)" ng-if = 'secret.isEditModeKey || secret.isEditModeValue'></i>
                                            <i class="icon-v-trash slds-m-left_medium" ng-click="onRemoveButtonPress(secret)" ng-if = 'secret.isRemovable && !secret.isEditModeKey'></i>                                    
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            <div ng-if = "showSpinner">
                <div class="demo-only">
                    <div class="slds-spinner_container">
                        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                            <span class="slds-assistive-text">Loading</span>
                            <div class="slds-spinner__dot-a"></div>
                            <div class="slds-spinner__dot-b"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
          <div class="slds-box--small slds-text-align--left slds-p-top--none btnSearch slds-m-left_xx-large slds-m-top_large">
             <button class="slds-button slds-button--neutral" ng-click="onAddMoreButtonPress()">
                 Add More
             </button>
             <button class="slds-button slds-button--neutral slds-m-left_medium save-button" ng-click="onSaveButtonPress()" ng-disabled = "secrets.length === 0">
                 Save
             </button>
        </div>
      </div>
  </html>
</apex:page>
<apex:page controller="vlocity_cmt.AdminConsoleController" showHeader="true" sidebar="true" applyBodyTag="false" applyHtmlTag="true">
	<html xmlns:ng="http://angularjs.org" ng-app="ConsoleAdminApp" class="ng-cloak" style="height:100%" >
		<head>
			<apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__vlocity_core_assets, '/latest/vlocity_core_assets.js')}"/>
			<apex:includeScript value="{!URLFOR($Resource.vlocity_cmt__Jquery, '/ui/jquery-ui-1.9.1.custom.min.js')}"/>
		   	<apex:includeScript value="/soap/ajax/31.0/connection.js" />
			<apex:includeScript value="{!$Resource.vlocity_cmt__ANGULARBOOT}"/>
		   	<apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}"/>
			<apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__IcoMoonIconPack, 'style.css')}"/>
			<style>
				div[id^="overlay"]{
		   			position: absolute;
				    background: white;
				    width: 47px;
				    height: 30px;
				    opacity: 0.7;
				}

				#loading {
				    position: absolute;
				    width: 20px;
					top: 5px;
					left: 15px;
				}


			</style>
		   	<script>
		   		sforce.connection.sessionId = '{!$Api.Session_ID}';
		   		j$ = jQuery.noConflict();

		   		function startRootAccountJob(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'startRootAccountJob';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function startAttributesBindingJob(objectNames, callback){
		   			var parameters = {};
                	parameters['methodName'] =  'startAttributesBindingJob';
                	parameters['objectNames'] =  objectNames;

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function startRootProductChildItemJob(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'startRootProductChildItemJob';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function startXLIBatchValidationJob(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'startXLIBatchValidationJob';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function resetXLIBatchValidationData(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'resetXLIBatchValidtionData';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);
					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function refreshBatchJobLists(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'refreshBatchJobLists';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}
		   		function refreshXLIBatchJobLists(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'refreshXLIBatchJobLists';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}

		   		function resetInterfaceImplementations(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'resetInterfaceImplementations';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}

		   		function mergeInterfaceImplementations(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'mergeInterfaceImplementations';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}

		   		function resetFieldMaps(callback){
		   			var parameters = {};
                	parameters['methodName'] =  'resetFieldMaps';

                    var remoteOptions ={};
                    remoteOptions['apexType'] =  '{!classType}';
                	remoteOptions['parameters'] =  JSON.stringify(parameters);

					Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.AdminConsoleController.invokeMethod}',
                                    remoteOptions,
                                   	callback,
                                    {buffer: false, escape: false});
		   		}



		   		var ConsoleAdminApp = angular.module('ConsoleAdminApp', ['ui.bootstrap']);
				ConsoleAdminApp.factory('ConsoleAdminService',function($q,$rootScope){
		        	var factory = {};
		        	factory.startRootAccountJob = function() {
                            var deferred = new j$.Deferred();
                            startRootAccountJob(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.startAttributesBindingJob = function(attributesBindingObjects) {
                            var deferred = new j$.Deferred();
                            startAttributesBindingJob(attributesBindingObjects, function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.startRootProductChildItemJob = function() {
                            var deferred = new j$.Deferred();
                            startRootProductChildItemJob(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.refreshBatchJobLists = function() {
                            var deferred = new j$.Deferred();
                            refreshBatchJobLists(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };

                    factory.startXLIBatchValidationJob = function() {
                            var deferred = new j$.Deferred();
                            startXLIBatchValidationJob(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.resetXLIBatchValidationData = function() {
                            var deferred = new j$.Deferred();
                            resetXLIBatchValidationData(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.refreshXLIBatchJobValidationLists = function() {
                            var deferred = new j$.Deferred();
                            refreshXLIBatchJobValidationLists(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.resetInterfaceImplementations = function() {
                            var deferred = new j$.Deferred();
                            resetInterfaceImplementations(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.mergeInterfaceImplementations = function() {
                            var deferred = new j$.Deferred();
                            mergeInterfaceImplementations(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };
                    factory.resetFieldMaps = function() {
                            var deferred = new j$.Deferred();
                            resetFieldMaps(function(result){
                                $rootScope.$apply(function(){
                                    var sresult =[];
                                    if ( result){
                                        sresult = angular.fromJson(result);
                                    }
                                    deferred.resolve(sresult);

                                });
                            });
                            return deferred.promise();
                    };


                    return factory;
		        });

				ConsoleAdminApp.controller('ConsoleAdminAppController', function ($scope, $timeout, ConsoleAdminService) {
					$scope.rootAccountJobsList = [];
					$scope.XLIBatchJobValidationList = [];
					$scope.isRootAccountJobsCollapsed = true;
					$scope.isAttributesBindingJobCollapsed = true;
					$scope.isRootProductChildItemJobCollapsed = true;
					$scope.upgradeTab = {};
					$scope.upgradeTab.attributesBindingObjects = null;
					$scope.isXLIRoot = true;


					$scope.startRootAccountJob = function(){
						ConsoleAdminService.startRootAccountJob().then(function(result){
							$scope.rootAccountJobsList = result.resolveRootAccountsJobs;

						})
					}
					
					$scope.startAttributesBindingJob = function(){
						ConsoleAdminService.startAttributesBindingJob($scope.upgradeTab.attributesBindingObjects).then(function(result){
							$scope.attributesBindingJobsList = result.attributesBindingJobs;

						})
					}
					
					$scope.startRootProductChildItemJob = function(){
						ConsoleAdminService.startRootProductChildItemJob().then(function(result){
							$scope.rootProductChildItemJobsList = result.rootProductChildItemJobs;

						})
					}
					
					$scope.startXLIBatchValidationJob = function(){
						ConsoleAdminService.startXLIBatchValidationJob().then(function(result){
							$scope.XLIBatchJobValidationList = result.xliBatchValidationJobs;

						})

					}
					$scope.resetXLIBatchValidationData = function(){
						ConsoleAdminService.resetXLIBatchValidationData().then(function(result){
							$scope.removeWaitDialog('idResetXLIValidationDataButton');
							//TODO check errors from result.hasErrors
							if(result.hasErrors){
								$scope.errorMessage = result.errorMessage;
								$scope.hasErrors = true;
							} else {
								$scope.hasErrors = false;
								$scope.showSuccessStatus('idResetXLIValidationDataButton');
							}
						})
					}

					$scope.resetInterfaceImplementations = function(){
						$scope.displayWaitDialog('idInImpStartButton');
						ConsoleAdminService.resetInterfaceImplementations().then(function(result){
							$scope.removeWaitDialog('idInImpStartButton');
							//TODO check errors from result.hasErrors
							if(result.hasErrors){
								$scope.errorMessage = result.errorMessage;
								$scope.hasErrors = true;
							} else {
								$scope.hasErrors = false;
								$scope.showSuccessStatus('idInImpStartButton');

							}

						})
					}

					$scope.mergeInterfaceImplementations = function(){
						$scope.displayWaitDialog('idMergeInImpStartButton');
						ConsoleAdminService.mergeInterfaceImplementations().then(function(result){
							$scope.removeWaitDialog('idMergeInImpStartButton');
							//TODO check errors from result.hasErrors
							if(result.hasErrors){
								$scope.errorMessage = result.errorMessage;
								$scope.hasErrors = true;
							} else {
								$scope.hasErrors = false;
								$scope.showSuccessStatus('idMergeInImpStartButton');

							}

						})
					}


					$scope.resetFieldMaps = function(){
						$scope.displayWaitDialog('idfldMapStartButton');
						ConsoleAdminService.resetFieldMaps().then(function(result){
							$scope.removeWaitDialog('idfldMapStartButton');
							//TODO check errors from result.hasErrors;
							if(result.hasErrors){
								$scope.errorMessage = result.errorMessage;
								$scope.hasErrors = true;
							} else {
								$scope.hasErrors = false;
								$scope.showSuccessStatus('idfldMapStartButton');

							}

						})

					}

					$scope.refreshBatchJobLists = function(){
						ConsoleAdminService.refreshBatchJobLists().then(function(result){
							$scope.rootAccountJobsList = result.resolveRootAccountsJobs;
							$scope.XLIBatchJobValidationList = result.xliBatchJobs;
							$scope.attributesBindingJobsList = result.attributesBindingJobs;
							$scope.rootProductChildItemJobsList = result.rootProductChildItemJobs;
							//debugger;
							console.log($scope.XLIBatchJobValidationList);
							$timeout($scope.refreshBatchJobLists, 3000);

						})
					}
					$scope.refreshXLIBatchJobValidationLists = function(){
						ConsoleAdminService.refreshXLIBatchJobLists().then(function(result){
							$scope.XLIBatchJobValidationList = result.xliBatchJobValidationList;
							//debugger;
							console.log($scope.XLIBatchJobValidationList);
							$timeout($scope.refreshXLIBatchJobValidationLists, 3000);

						})
					}

					$scope.displayWaitDialog = function(parentId){
						var over = j$('<div id="overlay-'+parentId+'">' +
								            '<img id="loading" src="'+'{!$Resource.WAITGIF}'+'">' +
								            '</div>');
						var div = j$('#'+parentId);
						over.css('top', div.position().top);
						over.css('left', div.position().left);
				        j$(over).appendTo(div);

					}

					$scope.removeWaitDialog = function(parentId){
						j$('#overlay-'+parentId).remove();

					}

					$scope.showSuccessStatus = function(parentId){
						var over = j$('<div id="overlay-'+parentId+'">' +
                  							'<span style="font-size: 2em; color:green" aria-hidden="true" data-icon="&#xea10;" class="icon-checkmark" />' +
                  						'</div>');
					    var div = j$('#'+parentId);
					    over.css('top', div.position().top);
					    over.css('left', div.position().left);

						j$(over).appendTo(div);
						j$(over).fadeOut(2000).promise().then(function(){
							j$(over).remove();

						})

					}

					$scope.refreshBatchJobLists();

				});



			</script>
		</head>
		<body ng-controller="ConsoleAdminAppController">
			<div class="vlocity">
				<div class="container-fluid">
					<tabset>
						<div class="page-header">
							<h2 style="color: rgb(1, 138, 180);">{!$Label.AdminConsole}</h2>
						</div>
						<tab heading="{!$Label.MaintenanceJobs}" id="idMaintenanceJobs">
							<div style="margin: 5px;" class="panel panel-default">
								<div class="list-group">
									<a href="#" class="list-group-item" >
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12" ng-click="isRootAccountJobsCollapsed = !isRootAccountJobsCollapsed">
												<h4 class="list-group-item-heading">{!$Label.AccountHierarchyMaintenance}</h4>
												<p class="list-group-item-text">{!$Label.JobRestoreAccountHierarchy}</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idAcctHierStartButton" type="button" ng-click="isRootAccountJobsCollapsed = false; startRootAccountJob();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div ng-if="rootAccountJobsList.length != 0" collapse="isRootAccountJobsCollapsed">
											<table style="margin-bottom:5px" class="table table-condensed">
												<tr>
													<th>{!$Label.JobName}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.Status.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.TotalJobItems.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.JobItemsProcessed.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CreatedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CompletedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.ExtendedStatus.Label}</th>
												</tr>
												<tr ng-class="{	active: job.Status == 'Queued',
																active: job.Status == 'Holding',
																active: job.Status == 'Preparing',
																success: job.Status == 'Completed',
																info: job.Status == 'Aborted',
																warning: job.Status == 'Processing',
																danger: job.Status == 'Failed'}"
													ng-repeat="job in rootAccountJobsList track by $index">
												  	<td style=" width: 25%;">
													  	<p>{!$Label.ResolveRootAccounts}</p>
												  	</td>
													<td style="width: 5%;">
														<p>{{job.Status}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.TotalJobItems}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.JobItemsProcessed}}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CreatedDate | date : 'short' }}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CompletedDate | date : 'short' }}</p>
													</td>
													<td style="width: 40%;">
														<p>{{job.ExtendedStatus}}</p>
													</td>
												</tr>
											</table>
										</div>
									</a>
									<!-- <a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">Party Model Maintenance</h4>
												<p class="list-group-item-text">This job will create missing party records.</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button type="button" ng-click="addItem();" class="btn btn-primary btn-sm">Start</button>
											</div>
										</div>
									</a> -->
									<a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">{!$Label.InterfaceImplementationMaintenance}</h4>
												<p class="list-group-item-text">{!$Label.JobRestoreImplementations}</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idInImpStartButton" type="button" ng-click="resetInterfaceImplementations();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div class="row">
											<div id="idInImpStatus" class="col-md-12 col-sm-12 col-xs-12">
												<div ng-if="hasErrors" class="alert alert-danger" role="alert">{{errorMessage}}</div>
											</div>
										</div>
									</a>
									<a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">{!$Label.InterfaceImplementationMaintenance}</h4>
												<p class="list-group-item-text">{!$Label.MergeInterfaceImplementations}</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idMergeInImpStartButton" type="button" ng-click="mergeInterfaceImplementations();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div class="row">
											<div id="idInImpStatus" class="col-md-12 col-sm-12 col-xs-12">
												<div ng-if="hasErrors" class="alert alert-danger" role="alert">{{errorMessage}}</div>
											</div>
										</div>
									</a>
									<a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">{!$Label.FieldMapsMaintenance}</h4>
												<p class="list-group-item-text">{!$Label.JobRestoreFieldMaps}</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idfldMapStartButton" type="button" ng-click="resetFieldMaps();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div class="row">
											<div id="idfldMapStatus" class="col-md-12 col-sm-12 col-xs-12">
												<div ng-if="hasErrors" class="alert alert-danger" role="alert">{{errorMessage}}</div>
											</div>
										</div>
									</a>
									<a href="#" class="list-group-item" >
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12" ng-click="isXLIRoot = !isXLIRoot">
												<h4 class="list-group-item-heading">Batch Validation</h4>
												<p class="list-group-item-text">Start Batch Validation Job</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="id1" type="button" ng-click="isXLIRoot = false; startXLIBatchValidationJob();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div  collapse="isXLIRoot">
											<table style="margin-bottom:5px" class="table table-condensed">
												<tr>
													<th>{!$Label.JobName}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.Status.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.TotalJobItems.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.JobItemsProcessed.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CreatedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CompletedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.ExtendedStatus.Label}</th>
												</tr>
												<tr ng-class="{	active: job.Status == 'Queued',
																active: job.Status == 'Holding',
																active: job.Status == 'Preparing',
																success: job.Status == 'Completed',
																info: job.Status == 'Aborted',
																warning: job.Status == 'Processing',
																danger: job.Status == 'Failed'}"
													ng-repeat="job in XLIBatchJobValidationList track by $index">
												  	<td style=" width: 25%;">
													  	<p>Batch Validation</p>
												  	</td>
													<td style="width: 5%;">
														<p>{{job.Status}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.TotalJobItems}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.JobItemsProcessed}}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CreatedDate | date : 'short' }}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CompletedDate | date : 'short' }}</p>
													</td>
													<td style="width: 40%;">
														<p>{{job.ExtendedStatus}}</p>
													</td>
												</tr>
											</table>
										</div>
									</a>
									<a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">Reset XLI validation Data</h4>
												<p class="list-group-item-text">Validated Orders will be reset</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idResetXLIValidationDataButton" type="button" ng-click="resetXLIBatchValidationData();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div class="row">
											<div id="idResetXLIValidationDataStatus" class="col-md-12 col-sm-12 col-xs-12">
												<div ng-if="hasErrors" class="alert alert-danger" role="alert">{{errorMessage}}</div>
											</div>
										</div>
									</a>
									<!-- <a href="#" class="list-group-item">
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12">
												<h4 class="list-group-item-heading">Interface Implementation Maintenance</h4>
												<p class="list-group-item-text">This job will restore default interface implementations.</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button type="button" ng-click="addItem();" class="btn btn-primary btn-sm">Start</button>
											</div>
										</div>
									</a> -->
								</div>
							</div>

						</tab>
						<tab heading="Upgrade Jobs" id="idUpgradeJobs">
							<div ng-if="hasErrors" class="alert alert-danger" role="alert">{{errorMessage}}</div>
							<div style="margin: 5px;" class="panel panel-default">
								<div class="list-group">
									<a href="#" class="list-group-item" >
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12" ng-click="isAttributesBindingJobCollapsed = !isAttributesBindingJobCollapsed">
												<h4 class="list-group-item-heading">Attributes Binding Upgrade</h4>
												<p class="list-group-item-text">This job will populate the bound attribute fields from the JSON to the specified object fields based on the entity class definition</p>
											</div>
											<div class="col-md-2 col-sm-12 col-xs-12  text-right ">
												<label for="idAttributesBindingObjects">Object Name</label>
												<input id="idAttributesBindingObjects" ng-model="upgradeTab.attributesBindingObjects" type="text"/>
											</div>
											<div class="col-md-2 col-sm-12 col-xs-12  text-right ">
												<button id="idAttributesBindingButton" type="button" ng-click="isAttributesBindingJobCollapsed = false; startAttributesBindingJob();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div ng-if="attributesBindingJobsList.length != 0" collapse="isAttributesBindingJobCollapsed">
											<table style="margin-bottom:5px" class="table table-condensed">
												<tr>
													<th>{!$Label.JobName}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.Status.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.TotalJobItems.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.JobItemsProcessed.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CreatedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CompletedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.ExtendedStatus.Label}</th>
												</tr>
												<tr ng-class="{	active: job.Status == 'Queued',
																active: job.Status == 'Holding',
																active: job.Status == 'Preparing',
																success: job.Status == 'Completed',
																info: job.Status == 'Aborted',
																warning: job.Status == 'Processing',
																danger: job.Status == 'Failed'}"
													ng-repeat="job in attributesBindingJobsList track by $index">
												  	<td style=" width: 25%;">
													  	<p>Attributes Binding Upgrade</p>
												  	</td>
													<td style="width: 5%;">
														<p>{{job.Status}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.TotalJobItems}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.JobItemsProcessed}}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CreatedDate | date : 'short' }}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CompletedDate | date : 'short' }}</p>
													</td>
													<td style="width: 40%;">
														<p>{{job.ExtendedStatus}}</p>
													</td>
												</tr>
											</table>
										</div>
									</a>
									<a href="#" class="list-group-item" >
										<div class="row">
											<div class="col-md-8 col-sm-12 col-xs-12" ng-click="isRootProductChildItemJobCollapsed = !isRootProductChildItemJobCollapsed">
												<h4 class="list-group-item-heading">Root Product Child Item Upgrade</h4>
												<p class="list-group-item-text">This job will create a product child item record for each product with the "Is Root Product Child Item" Flag Set.</p>
											</div>
											<div class="col-md-4 col-sm-12 col-xs-12  text-right ">
												<button id="idRootProductChildItemButton" type="button" ng-click="isRootProductChildItemJobCollapsed = false; startRootProductChildItemJob();" class="btn btn-primary btn-sm">{!$Label.StartDT}</button>
											</div>
										</div>
										<div ng-if="rootProductChildItemJobsList.length != 0" collapse="isRootProductChildItemJobCollapsed">
											<table style="margin-bottom:5px" class="table table-condensed">
												<tr>
													<th>{!$Label.JobName}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.Status.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.TotalJobItems.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.JobItemsProcessed.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CreatedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.CompletedDate.Label}</th>
													<th>{!$ObjectType.AsyncApexJob.Fields.ExtendedStatus.Label}</th>
												</tr>
												<tr ng-class="{	active: job.Status == 'Queued',
																active: job.Status == 'Holding',
																active: job.Status == 'Preparing',
																success: job.Status == 'Completed',
																info: job.Status == 'Aborted',
																warning: job.Status == 'Processing',
																danger: job.Status == 'Failed'}"
													ng-repeat="job in rootProductChildItemJobsList track by $index">
												  	<td style=" width: 25%;">
													  	<p>Root Product Child Item Upgrade</p>
												  	</td>
													<td style="width: 5%;">
														<p>{{job.Status}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.TotalJobItems}}</p>
													</td>
													<td style="width: 5%;">
														<p>{{job.JobItemsProcessed}}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CreatedDate | date : 'short' }}</p>
													</td>
													<td style="width: 15%;">
														<p>{{ job.CompletedDate | date : 'short' }}</p>
													</td>
													<td style="width: 40%;">
														<p>{{job.ExtendedStatus}}</p>
													</td>
												</tr>
											</table>
										</div>
									</a>
								</div>
							</div>
						</tab>
						<!-- <tab heading="Links" id="idLinks">
							<div style="margin: 5px;" class="panel panel-default">

							</div>


						</tab> -->
					</tabset>
				</div>
			</div>
		</body>
	</html>
</apex:page>
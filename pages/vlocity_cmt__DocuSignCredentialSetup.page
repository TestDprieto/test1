<apex:page controller="vlocity_cmt.DocuSignCredentialController" standardStylesheets="false" showHeader="true" sidebar="false" docType="html-5.0">
    <html xmlns:ng="http://angularjs.org" ng-app="docuSignCredential" lang="en">
        <head>
            <meta charset="utf-8"/>
            <apex:includeScript value="{!$Resource.vlocity_cmt__JQUERYJS}"/>
            <apex:stylesheet value="{!URLFOR($Resource.vlocity_cmt__vlocity_assets, '/css/vlocity.css')}"/>           
            <apex:includeScript value="{!$Resource.vlocity_cmt__AngularJS}"/>
            <apex:includeScript value="{!$Resource.vlocity_cmt__ANGULARBOOT}"/>         
        </head>
        
        <style>
        	.DocuSignLoginError{
        		margin-top:10px;
        	}

            .vlc-docusign-template-block h2,
            .vlc-docusign-branding-block h2 {
                display:inline-block;
            }

            .vlc-docusign-template-block .vlc-docusign-template-btn,
            .vlc-docusign-branding-block .vlc-docusign-branding-btn{
                float: right;
                top: 13px;
                position: relative;
            }

            .vlc-docusign-template-block .mask,
            .vlc-docusign-branding-block .mask{
                top:-100px;
                left:50%;
                height: 0px;
                position: relative;
            }


        </style>
        
        <script type="text/javascript">
            function getRegisteredDSAccount(callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.getRegisteredDSAccount}', callback,
                                {buffer: false, escape: false}); 
            }
            
            function getDSAccounts(email, password,env, callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.getDSAccounts}', email, password, env, callback,
                                {buffer: false, escape: false}); 
            }
            
            function saveUserCredential(userCredential, env, callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.saveUserCredential}', userCredential, env, callback,
                                {buffer: false, escape: false});
            }

            function fetchDocusignTemplates(callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.fetchDocusignTemplates}', callback,
                                {buffer: false, escape: false}); 
            }

            function getDSAccountTemplates(callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.getDSAccountTemplates}', callback,
                                {buffer: false, escape: false}); 
            }

            function getDocuSignAccountBranding(callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.getDocuSignAccountBranding}', callback,
                                {buffer: false, escape: false}); 
            }

            function displayBranding(callback)
            {
                'use strict';
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.DocuSignCredentialController.displayBranding}', callback,
                                {buffer: false, escape: false}); 
            }


            var docuSignCredential = angular.module("docuSignCredential", []);
            
            docuSignCredential.factory('docuSignCredentialService', function($q, $rootScope)
            {
                'use strict';
                var factory = {};
                
                factory.getRegisteredDSAccount = function(){
                    var deferred = $q.defer();
                    getRegisteredDSAccount(function(result){
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };
                
                factory.getDSAccounts = function(email, password, env){
                    var deferred = $q.defer();
                    getDSAccounts(email, password, env, function(result) {
                        $rootScope.$apply( function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };
                
                factory.saveUserCredential = function(userCredential, env){
                    var deferred = $q.defer();
                    saveUserCredential(userCredential,env, function(result) {
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };

                factory.fetchDocusignTemplates = function(){
                    var deferred = $q.defer();
                    fetchDocusignTemplates(function(result){
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };

                factory.getDSAccountTemplates = function(){
                    var deferred = $q.defer();
                    getDSAccountTemplates(function(result){
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };

                factory.getDocuSignAccountBranding = function(){
                    var deferred = $q.defer();
                    getDocuSignAccountBranding(function(result){
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };


                factory.displayBranding = function(){
                    var deferred = $q.defer();
                    displayBranding(function(result){
                        $rootScope.$apply(function() {
                            deferred.resolve(result);
                        });
                    });
                    return deferred.promise;
                };

                return factory;         
            });
            
            
            
            docuSignCredential.controller('docuSignCredentialController', function($scope, docuSignCredentialService)
            {
                'use strict';
                $scope.namespaceprefix = '{!namespacePrefix}';
                $scope.namespacedAccountName = $scope.namespaceprefix + 'AccountName__c';
                $scope.namespacedAccountIdGuid = $scope.namespaceprefix + 'AccountIdGuid__c';
                $scope.namespacedEnv = $scope.namespaceprefix + 'Environment__c';
                
                $scope.registeredDSAccnt = {};
                $scope.dsAccntRegistered = true;
                
                $scope.userEmail='';
                $scope.userPwd='';
                $scope.environment = '';
        
                $scope.userAPIPwd = '';
                $scope.userDSAccounts = [];
                $scope.numAccounts = 0;
                $scope.accountSelected = false; //in case customer who has more than one DocuSign Account
                $scope.selectedAccount = {};
                
                $scope.errorInfo = {};
                $scope.brandings = [];
                $scope.brandLoading = false;
                
                
                docuSignCredentialService.getRegisteredDSAccount().then(function(result, event)
                {
                    $scope.registeredDSAccnt = angular.fromJson(result);
                    if(!$scope.registeredDSAccnt[$scope.namespacedAccountName])
                    {
                        $scope.dsAccntRegistered = false;
                    }
                    
                });
                
                $scope.modifyAccountConfigure = function()
                {
                    $scope.dsAccntRegistered = false;
                };
                
                
                $scope.getUserInfo = function(email, pwd, env)
                {   
                    docuSignCredentialService.getDSAccounts(email, pwd, env).then(function(result, event)
                    {
                        var userDSInfo = angular.fromJson(result);
                        if(userDSInfo)
                        {
                        	if( !userDSInfo.hasOwnProperty('errorCode'))
                        	{
                        		$scope.errorInfo = {};
	                            $scope.userAPIPwd = userDSInfo.apiPassword; 
	                            $scope.numAccounts = userDSInfo.loginAccounts.length;
	                    
	                            for(var i=0; i<$scope.numAccounts && $scope.numAccounts > 1;i++)
	                            {
	                                var dsAccnt = userDSInfo.loginAccounts[i];
	                                dsAccnt.apiPassword = userDSInfo.apiPassword; 
	                                dsAccnt.isSelected = false;
	                                dsAccnt.disabled = ''; 
	                                $scope.userDSAccounts.push(dsAccnt);
	                            }
	                            
	                            if($scope.numAccounts == 1) 
	                            {
	                                //save the only account
	                                userDSInfo.loginAccounts[0].apiPassword = userDSInfo.apiPassword;
	                                $scope.saveSelectedAccount(userDSInfo.loginAccounts[0],env);
	                            }
	                        }
	                        else
	                        {
	                        	$scope.errorInfo.errorCode = userDSInfo.errorCode;
	                        	$scope.errorInfo.errorMessage = userDSInfo.errorCode + ' : ' + userDSInfo.message;
	                        }
                        }       
                    });
                };
                
                $scope.onChangeAccount = function(accnt)
                {
                    if(accnt.isSelected === true)
                    {
                        $scope.accountSelected = true;
                        $scope.selectedAccount = accnt;
                        for(var i=0; i<$scope.numAccounts; i++)
                        {
                            if ($scope.userDSAccounts[i].accountId !== accnt.accountId && $scope.userDSAccounts[i].isSelected === true)
                            {
                                $scope.userDSAccounts[i].isSelected = false;
                            }
                        }
                    }
                    else
                    {
                        $scope.accountSelected = false;
                        $scope.selectedAccount ={};
                        
                    }                   
                };
                
                $scope.saveSelectedAccount = function(accnt, env)
                {
                    $scope.registeredDSAccnt[$scope.namespacedAccountName] = accnt.name;
                    $scope.registeredDSAccnt[$scope.namespacedAccountIdGuid] = accnt.accountIdGuid;
                    $scope.registeredDSAccnt[$scope.namespacedEnv] = env;
                    $scope.dsAccntRegistered = true;
                    $scope.brandings = [];
                    docuSignCredentialService.saveUserCredential(angular.toJson(accnt), env).then(function(result, event)
                    {
                        $scope.getDocuSignAccountBranding();
                        $scope.getDSAccountTemplates();
                    });                 
                };

                $scope.cancelAccountChange = function()
                {
                	window.location.reload();
                };

                $scope.fetchDocusignTemplates = function()
                {
                    var resp = null;
                    $scope.loading = true;
                    docuSignCredentialService.fetchDocusignTemplates().then(function(result, event)
                    {
                       $scope.loading = false;
                       resp = angular.fromJson(result);
                       if(resp.Error)
                           window.alert(resp.Error);
                       else
                           $scope.templates = resp;
                    });
                };

                $scope.getDSAccountTemplates = function()
                {
                    docuSignCredentialService.getDSAccountTemplates().then(function(result, event)
                    {
                       $scope.templates = angular.fromJson(result);
                    });
                };

                $scope.displayBranding = function()
                {
                    docuSignCredentialService.displayBranding().then(function(result, event){
                        $scope.brandings = angular.fromJson(result);
                    });
                };

                $scope.getDocuSignAccountBranding = function()
                {
                    $scope.brandLoading = true;
                    docuSignCredentialService.getDocuSignAccountBranding().then(function(result,event){                     
                        $scope.brandLoading = false;
                        var resp = angular.fromJson(result);
                        if(resp.Error === 'OK'){
                            $scope.brandings = resp.brands;
                        }
                        else {
                            window.alert(resp.Error);
                        }
                    });
                };               

            });
        </script>
        <body>
            <div class="vlocity" ng-controller="docuSignCredentialController" ng-init="getDSAccountTemplates();displayBranding()">
                <div class="title">
                    <h1>{!$Label.VlocityDocuSignAdmin}</h1>
                </div>
                <div class='registeredDSAccount' ng-if="dsAccntRegistered">
                    <h2>{!$Label.VlocityDocuSignAccountInfo}</h2>
                    <form>
                      <div class="form-group">
                        <label for="registeredDSAccntName">{!$Label.VlocityDocuSignAccountName}</label>
                        <input type="text" class="form-control" id="registeredDSAccntName" ng-model="registeredDSAccnt[namespacedAccountName]" readonly="true"/>
                      </div>
                      <div class="form-group">
                        <label for="registeredDSAccntId">{!$Label.VlocityDocuSignAccountId}</label>
                        <input type="text" class="form-control" id="registeredDSAccntId" ng-model="registeredDSAccnt[namespacedAccountIdGuid]" readonly="true"/>
                      </div>
                      <div class="form-group">
                        <label for="registeredDSEnv">{!$Label.VlocityDocuSignEnvironment}</label>
                        <input type="text" class="form-control" id="registeredDSEnv" ng-model="registeredDSAccnt[namespacedEnv]" readonly="true"/>                      
                      </div>
                      <button type="submit" class="btn btn-default" ng-click="modifyAccountConfigure()">{!$Label.VlocityDocuSignModifyConfig}</button>
                    </form>
                </div>
                <div class="Login" ng-if="!dsAccntRegistered">
                    <h2>{!$Label.VlocityDocuSignLogin}</h2>
                    <form>
                      <div class="form-group">
                        <label for="inputEmail">{!$Label.VlocityDocuSignUserEmail}</label>
                        <input type="email" class="form-control" id="inputEmail" ng-model="userEmail" placeholder="{!$Label.VlocityDocuSignEnterEmail}" />
                      </div>
                      <div class="form-group">
                        <label for="inputPassword">{!$Label.VlocityDocuSignUserPassword}</label>
                        <input type="password" class="form-control" id="inputPassword" ng-model="userPwd" placeholder="{!$Label.VlocityDocuSignUserPassword}" />
                      </div>
                      <div class="form-group">
                        <label for="inputEnv">{!$Label.VlocityDocuSignEnvironment}</label>
                        <select class="form-control" id="inputEnv" ng-model="environment" >
                          <option value="Demo">{!$Label.VlocityDocuSignDemo}</option>
                          <option value="Production">{!$Label.VlocityDocuSignProduction}</option>
                        </select>
                      </div>
                      <button type="submit" class="btn btn-default" ng-click="getUserInfo(userEmail, userPwd, environment)">{!$Label.VlocityDocuSignLoginButton}</button>
                      <button type="submit" class="btn btn-default" ng-click="cancelAccountChange()" ng-if="numAccounts === 0">{!$Label.Cancel}</button>
                      <div class='DocuSignLoginError' ng-show="errorInfo.hasOwnProperty('errorCode')">
                      	<p class="text-danger" >{{errorInfo.errorMessage}}</p>
                      </div>
                    </form>                   
                    <div class='DocuSignAccounts' ng-if="numAccounts > 1" >
                        <h2>{!$Label.VlocityDocuSignChooseAccount}</h2>
                        <form class="form-inline" ng-repeat="userDSAcc in userDSAccounts">
                          <div class="form-group">
                            <label  for="docuSignAccntName">{!$Label.VlocityDocuSignAccountName}</label>
                            <input type="text" class="form-control" id="docuSignAccntName" ng-model="userDSAcc.name" readonly="true"/>
                          </div>
                          <div class="form-group">
                            <label  for="docuSignAccntId">{!$Label.VlocityDocuSignAccountId}</label>
                            <input type="text" class="form-control" id="docuSignAccntId" ng-model="userDSAcc.accountIdGuid" readonly="true"/>
                          </div>
                          <div  class="checkbox">
                            <label>
                              <input type="checkbox" ng-model="userDSAcc.isSelected" ng-change="onChangeAccount(userDSAcc)"/> {!$Label.VlocityDocuSignUseThisAccount}
                            </label>
                          </div>                          
                        </form>
                        <button type="submit" class="btn btn-default" ng-click="saveSelectedAccount(selectedAccount, environment)" ng-if="accountSelected">{!$Label.VlocityDocuSignSubmit}</button>
                        <button type="submit" class="btn btn-default" ng-click="cancelAccountChange()" ng-if="!accountSelected">{!$Label.Cancel}</button>
                    </div>
                </div>
                <div class='vlc-docusign-template-block' ng-if='dsAccntRegistered'>
                    <div class="mask" ng-show="loading">
                        <div class="center-block spinner"></div>
                    </div>
                    <h2>{!$Label.DocuSignTemplateList}</h2>
                    <button class="btn btn-default vlc-docusign-template-btn" ng-click = "fetchDocusignTemplates()">{!$Label.DocuSignTemplateFetch}</button>
                    <form>
                      <div class="form-group">
                        <table class='table'>
                          <thead>
                            <tr>
                              <th>{!$Label.DocuSignTemplateName}</th>
                              <th>{!$Label.DocuSignLastModifiedDate}</th>
                              <th>{!$Label.DocuSignTemplateDesc}</th>
                            </tr>
                          </thead>
                          <tbody class="upgrade-tbody-omni" >
                            <tr ng-repeat = "template in templates">
                              <td><input class='form-control' type='text' ng-model="template.Name" readonly="true"/></td>
                              <td><input type='text' class='form-control' value="{{template.LastModifiedDate | date:'MM-dd-yyyy h:mm:ss a'}}" readonly="true"/></td>
                              <td><textarea class='form-control' ng-model="template[namespaceprefix + 'Description__c']" type='text' readonly="true"/></td>
                            </tr>
                         </tbody>
                       </table>
                     </div>
                   </form>
                </div>
                <div class='vlc-docusign-branding-block' ng-if='dsAccntRegistered'>
                    <div class="mask" ng-show="brandLoading">
                        <div class="center-block spinner"></div>
                    </div>
                    <h2>{!$Label.VlocityDocuSignBrandings}</h2>
                    <button class="btn btn-default vlc-docusign-branding-btn" ng-click = "getDocuSignAccountBranding()">{!$Label.VlocityDocusignFetchBranding}</button>
                    <form>
                      <div class="form-group">
                        <table class='table'>
                          <thead>
                            <tr>
                              <th>{!$ObjectType.VlocityDocuSignBranding__c.fields.Name.Label}</th>
                              <th>{!$ObjectType.VlocityDocuSignBranding__c.fields.BrandCompany__c.Label}</th>
                            </tr>
                          </thead>
                          <tbody class="upgrade-tbody-omni" >
                            <tr ng-repeat = "brand in brandings">
                              <td><input class='form-control' type='text' ng-model="brand.Name" readonly="true"/></td>
                              <td><input class='form-control' type='text' ng-model="brand[namespaceprefix+'BrandCompany__c']" readonly="true"/></td>
                            </tr>
                         </tbody>
                       </table>
                     </div>
                   </form>
                </div>
            </div>
        </body>
     </html>
</apex:page>
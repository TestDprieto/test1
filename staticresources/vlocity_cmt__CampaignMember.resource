/***************************
****************************
DO NOT EDIT THIS FILE DIRECTLY - IT IS AUTO-GENERATED!
Instead edit the JS files in the javascript directory:

****************************
****************************/

(function(){
  var fileNsPrefix = (function() {
    'use strict';
    var scripts = document.getElementsByTagName('script');
    var lastScript = scripts[scripts.length - 1];
    var scriptName = lastScript.src;
    var parts = scriptName.split('/');
    var thisScript = parts[parts.length - 1];
    if (thisScript === "") {
      thisScript = parts[parts.length - 2];
    }
    var lowerCasePrefix = thisScript.indexOf('__') == -1 ? '' : thisScript.substring(0, thisScript.indexOf('__') + 2);
    //check for the cached namespace first
    lowerCasePrefix = lowerCasePrefix === '' && localStorage.getItem('nsPrefix') ? localStorage.getItem('nsPrefix'): lowerCasePrefix;
    
    if(lowerCasePrefix !== ''){
        lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
    }
    if (lowerCasePrefix.length === 0) {
      return function() {
        //then check if the app has put a namespace and take that one as it is newer
        lowerCasePrefix = window.nsPrefix ? window.nsPrefix: lowerCasePrefix;
        //add the underscore if it doesn't have them    
        if(lowerCasePrefix !== ""){
            lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
        }  
        return lowerCasePrefix;
      };
    } else {
      var resolvedNs = null;
      return function() {
        if (resolvedNs) {
          return resolvedNs;
        }
        // hack to make scan SF objects for the correct case
        try {
          var tofind = lowerCasePrefix.replace('__', '');
          var name;
          var scanObjectForNs = function(object, alreadySeen) {
            if (object && object !== window && alreadySeen.indexOf(object) == -1) {
                alreadySeen.push(object);
                Object.keys(object).forEach(function(key) {
                  if (key === 'ns') {
                    // do ns test
                    if (typeof object[key] === 'string' && object[key].toLowerCase() === tofind) {
                      name = object[key] + '__';
                      return false;
                    }
                  }
                  if (Object.prototype.toString.call(object[key]) === '[object Array]') {
                    object[key].forEach(function(value) {
                      var result = scanObjectForNs(value, alreadySeen);
                      if (result) {
                          name = result;
                          return false;
                      }
                    });
                  } else if (typeof object[key] == 'object') {
                    var result = scanObjectForNs(object[key], alreadySeen);
                    if (result) {
                        name = result;
                        return false;
                    }
                  }
                  if (name) {
                    return false;
                  }
                });
                if (name) {
                  return name;
                }
            };
          }
          if(typeof Visualforce !== 'undefined') { //inside VF
            scanObjectForNs(Visualforce.remoting.Manager.providers, []);  
          } else {
            return lowerCasePrefix;
          }
          if (name) {
            return resolvedNs = name;
          } else {
            return resolvedNs = lowerCasePrefix;
          }
        } catch (e) {
          return lowerCasePrefix;
        }
      };
    }
  })();

  var fileNsPrefixDot = function() {
    var prefix = fileNsPrefix();
    if (prefix.length > 1) {
      return prefix.replace('__', '.');
    } else {
      return prefix;
    }
};
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module('campaignMember', ['vlocity', 'mgcrea.ngStrap',
    'ngSanitize'
]).config(['remoteActionsProvider', function(remoteActionsProvider) {
    'use strict';
    remoteActionsProvider.setRemoteActions(window.remoteActions || {});
}]);


// Controllers
require('./modules/campaignMember/controller/CampaignManageMemberController.js');
require('./modules/campaignMember/controller/CampaignMassEmailController.js');


},{"./modules/campaignMember/controller/CampaignManageMemberController.js":2,"./modules/campaignMember/controller/CampaignMassEmailController.js":3}],2:[function(require,module,exports){
angular.module('campaignMember').controller('CampaignManageMemberController', function(
    $scope, $sce, remoteActions) {
    'use strict';
    $scope.importType = '';
    $scope.import_contacts = false; 
    $scope.import_leads = false;
    $scope.selectedMembers = [];
    $scope.importMembers = [];

    $scope.getImportMembers = function(){
        var conditions = ''; 
        $scope.importMembers = [];
        if($scope.import_contacts) {
            remoteActions.getImportMembers('Contact', conditions).then(function(result) {
                console.log(result);
                $scope.importMembers = result; 
            });
        }

        if($scope.import_leads) {
            remoteActions.getImportMembers('Lead', conditions).then(function(result) {
                console.log(result);
                for(var obj in result) {
                    if($scope.importMembers.indexOf(obj) == -1) {
                        $scope.importMembers.push(obj);
                    }
                }
            });
        } 

        console.log('import members: ', $scope.importMembers); 
    };



});

},{}],3:[function(require,module,exports){
angular.module('campaignMember').controller('CampaignMassEmailController', function(
    $scope, $sce, remoteActions) {
    'use strict';
    $scope.importType = '';
    $scope.import_contacts = false; 
    $scope.import_leads = false;
    $scope.selectedMembers = [];
    $scope.importMembers = [];

    $scope.getImportMembers = function(){
        var conditions = ''; 
        $scope.importMembers = [];
        if($scope.import_contacts) {
            remoteActions.getImportMembers('Contact', conditions).then(function(result) {
                console.log(result);
                $scope.importMembers = result; 
            });
        }

        if($scope.import_leads) {
            remoteActions.getImportMembers('Lead', conditions).then(function(result) {
                console.log(result);
                for(var obj in result) {
                    if($scope.importMembers.indexOf(obj) == -1) {
                        $scope.importMembers.push(obj);
                    }
                }
            });
        } 

        console.log('import members: ', $scope.importMembers); 
    };



});

},{}]},{},[1]);

})();
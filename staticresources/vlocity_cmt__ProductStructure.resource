/***************************
****************************
DO NOT EDIT THIS FILE DIRECTLY - IT IS AUTO-GENERATED!
Instead edit the JS files in the javascript directory:

****************************
****************************/

(function(){
  var fileNsPrefix = (function() {
    'use strict';
    var scripts = document.getElementsByTagName('script');
    var lastScript = scripts[scripts.length - 1];
    var scriptName = lastScript.src;
    var parts = scriptName.split('/');
    var thisScript = parts[parts.length - 1];
    if (thisScript === "") {
      thisScript = parts[parts.length - 2];
    }
    var lowerCasePrefix = thisScript.indexOf('__') == -1 ? '' : thisScript.substring(0, thisScript.indexOf('__') + 2);
    //check for the cached namespace first
    lowerCasePrefix = lowerCasePrefix === '' && localStorage.getItem('nsPrefix') ? localStorage.getItem('nsPrefix'): lowerCasePrefix;
    
    if(lowerCasePrefix !== ''){
        lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
    }
    if (lowerCasePrefix.length === 0) {
      return function() {
        //then check if the app has put a namespace and take that one as it is newer
        lowerCasePrefix = window.nsPrefix ? window.nsPrefix: lowerCasePrefix;
        //add the underscore if it doesn't have them    
        if(lowerCasePrefix !== ""){
            lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
        }  
        return lowerCasePrefix;
      };
    } else {
      var resolvedNs = null;
      return function() {
        if (resolvedNs) {
          return resolvedNs;
        }
        // hack to make scan SF objects for the correct case
        try {
          var tofind = lowerCasePrefix.replace('__', '');
          var name;
          var scanObjectForNs = function(object, alreadySeen) {
            if (object && object !== window && alreadySeen.indexOf(object) == -1) {
                alreadySeen.push(object);
                Object.keys(object).forEach(function(key) {
                  if (key === 'ns') {
                    // do ns test
                    if (typeof object[key] === 'string' && object[key].toLowerCase() === tofind) {
                      name = object[key] + '__';
                      return false;
                    }
                  }
                  if (Object.prototype.toString.call(object[key]) === '[object Array]') {
                    object[key].forEach(function(value) {
                      var result = scanObjectForNs(value, alreadySeen);
                      if (result) {
                          name = result;
                          return false;
                      }
                    });
                  } else if (typeof object[key] == 'object') {
                    var result = scanObjectForNs(object[key], alreadySeen);
                    if (result) {
                        name = result;
                        return false;
                    }
                  }
                  if (name) {
                    return false;
                  }
                });
                if (name) {
                  return name;
                }
            };
          }
          if(typeof Visualforce !== 'undefined') { //inside VF
            scanObjectForNs(Visualforce.remoting.Manager.providers, []);  
          } else {
            return lowerCasePrefix;
          }
          if (name) {
            return resolvedNs = name;
          } else {
            return resolvedNs = lowerCasePrefix;
          }
        } catch (e) {
          return lowerCasePrefix;
        }
      };
    }
  })();

  var fileNsPrefixDot = function() {
    var prefix = fileNsPrefix();
    if (prefix.length > 1) {
      return prefix.replace('__', '.');
    } else {
      return prefix;
    }
};
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module('productstructure', ['vlocity', 'mgcrea.ngStrap.tab', 'mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.modal'])
.config(['remoteActionsProvider', function(remoteActionsProvider) {
    remoteActionsProvider.setRemoteActions(window.remoteActions || {});
}])
.config(['$locationProvider', function($locationProvider) {
    $locationProvider.html5Mode(true);
}]);

require('./modules/productstructure/controller/ProductStructureController.js');
require('./modules/productstructure/templates/templates.js');

},{"./modules/productstructure/controller/ProductStructureController.js":2,"./modules/productstructure/templates/templates.js":3}],2:[function(require,module,exports){
angular.module('productstructure')
.controller('ProductStructureController', ['$scope', '$location', 'remoteActions', '$modal',
    function($scope, $location, remoteActions, $modal) {
        $scope.nsp = fileNsPrefix();
        $scope.productId = $location.search().id;
        $scope.productName = $location.search().name;
        $scope.baseProductId = $location.search().baseProductId;
        $scope.contextId = $scope.productId;
        $scope.productList = [];
        $scope.objectFields = null;
        $scope.showDetails = false;
        $scope.productTabs = [
            {
                'title': 'Product Child',
                'contentUrl': 'ProductChild.tpl.html'
            },
            {
                'title': 'Product Info',
                'contentUrl': 'ProductInfo.tpl.html'
            }
        ];
        $scope.activeProductTab = $scope.productTabs[0].title;

        $scope.getObjectData = function(getMetadata) {
            var prodId = $scope.productId;
            var prodChildId = null;

            angular.forEach($scope.productList, function(product) {
                product.isRoot = (product.level === 0);

                // get product fields
                remoteActions.getObject(product.productId).then(function(result) {
                    product.prodObj = result;
                });

                // get product-child relationship fields
                if (product.parentChildId) {
                    if (prodChildId === null) {
                        prodChildId = product.parentChildId;
                    }

                    remoteActions.getObject(product.parentChildId).then(function(result) {
                        product.prodChildObj = result;
                    });
                }
            });

            if (getMetadata) {
                // get the field sets
                $scope.getFieldSets(prodId, prodChildId);
            }
        };

        $scope.getFieldSets = function(prodId, prodChildId) {
            remoteActions.getFieldSets(prodId).then(function(results) {
                if (results[$scope.nsp + 'productstructure'] === undefined) {
                    $scope.prodFieldSet = null;
                } else {
                    $scope.prodFieldSet = results[$scope.nsp + 'productstructure'];
                }
            });

            remoteActions.getFieldSets(prodChildId).then(function(results) {
                if (results[$scope.nsp + 'productstructure'] === undefined) {
                    $scope.prodChildFieldSet = null;
                } else {
                    $scope.prodChildFieldSet = results[$scope.nsp + 'productstructure'];
                }
            });

            $scope.describeObject();
        };

        $scope.describeObject = function() {
            if ($scope.productList.length > 1) {
                remoteActions.describeObject($scope.productList[1].parentChildId).then(function(results) {
                    $scope.objectFields = results;
                });
            }
        };

        $scope.toggleChildren = function(index) {
            var parentProd = $scope.productList[index];
            var parentLevel = parentProd.level;
            var showProductChildren = !parentProd.showChildren;
            parentProd.showChildren = showProductChildren;
            var idx = index + 1;
            while (idx < $scope.productList.length) {
                var prod = $scope.productList[idx];
                if (prod.level === parentLevel) {
                    break;
                }
                if (showProductChildren) {
                    if (prod.level === (parentLevel + 1)) {
                        prod.show = true;
                        prod.showChildren = false;
                    } else if (prod.level > parentLevel) {
                        prod.show = false;
                        prod.showChildren = false;
                    }
                } else {
                    if (prod.level > parentLevel) {
                        prod.show = false;
                        prod.showChildren = false;
                    }
                }
                idx++;
            }
        };

        $scope.viewDetails = function(prod) {
            $scope.selectedProd = prod;
            $scope.selectedProd.detailsUrl = '/apex/ProductDetails?id=' + prod.productId + '&baseProductId=' + $scope.baseProductId + '&mode=override';
            $scope.selectedProd.attributesUrl = '/apex/ProductAttributeAdmin?id=' + prod.productId + '&baseProductId=' + $scope.baseProductId +
                                                '&rootProductId=' + $scope.productId + '&pci=' + $scope.selectedProd.parentChildId + '&mode=override';
            console.log('selected prod:', prod);
            angular.forEach($scope.productList, function(p) {
                p.isSelected = (p.productId === prod.productId);
            });

            var inputMap = {
                'overriddenObjectId': $scope.selectedProd.parentChildId,
                'contextId': $scope.contextId,
                'overriddenPCIId': $scope.selectedProd.parentChildId,
                'type': 'Product Definition'
            };
            console.log('Input Map: ', inputMap);
            var inputMapJSON = JSON.stringify(inputMap);
            remoteActions.getOverride(inputMapJSON).then(function(res) {
                console.log('get override: ', res);
                if (res !== null) {
                    var obj = JSON.parse(res);
                    $scope.selectedProd.overrideObj = obj.SObject;
                    $scope.selectedProd.overrideDef = obj.OverrideDefinition__c;
                }
                $scope.showDetails = true;
            });
            $scope.activeProductTab = $scope.productTabs[0].title;
        };

        $scope.closeDetails = function() {
            $scope.selectedProd.isSelected = false;
            $scope.showDetails = false;
        };

        $scope.saveItem = function(event) {
            var originalText;
            if (event) {
                originalText = event.currentTarget.innerText;
                event.currentTarget.disabled = true;
                event.currentTarget.innerText = 'Saving...';
            }
            remoteActions.updateObject($scope.selectedProd.prodChildObj).then(function(results) {
                if (event) {
                    event.currentTarget.innerText = 'Saved!';
                    setTimeout(function() {
                        event.currentTarget.innerText = originalText;
                        event.currentTarget.disabled = false;
                    }, 2000);
                }
            });
        };

        $scope.showDeleteItemModal = function(prod) {
            var modalScope = $scope.$new(true);
            modalScope.prod = prod;
            $scope.deleteProd = prod;
            var myModal = $modal({
                title: 'Delete Product Child Item',
                templateUrl: 'DeletePCIModal.tpl.html',
                scope: $scope,
                placement: 'center',
                show: true
            });
        };

        $scope.deleteItem = function(prod) {
            if (prod == $scope.selectedProd) {
                $scope.closeDetails();
            }
            remoteActions.deleteObject(prod.prodChildObj).then(function(results) {
                // refresh the product list
                $scope.init(false);
            });
        };

        $scope.createOverride = function() {
            var inputMap = {
                'overriddenObjectId': $scope.selectedProd.parentChildId,
                'contextId': $scope.contextId,
                'overriddenPCIId': $scope.selectedProd.parentChildId,
                'type': 'Product Definition'
            };
            var inputMapJSON = JSON.stringify(inputMap);
            remoteActions.createOverride(inputMapJSON).then(function(result) {
                console.log('create override: ', result);
                var obj = JSON.parse(result);
                $scope.selectedProd.overrideObj = obj.SObject;
                $scope.selectedProd.overrideDef = obj.OverrideDefinition__c;
            });
        };

        $scope.saveOverride = function(event) {
            var originalText;
            if (event) {
                originalText = event.currentTarget.innerText;
                event.currentTarget.disabled = true;
                event.currentTarget.innerText = 'Saving';
            }
            var inputMap = {
                'overriddenObjectId': $scope.selectedProd.parentChildId,
                'contextId': $scope.contextId,
                'overriddenPCIId': $scope.selectedProd.parentChildId,
                'type': 'Product Definition',
                'sObject': JSON.stringify($scope.selectedProd.overrideObj),
                'overrideDefinition': JSON.stringify($scope.selectedProd.overrideDef)
            };
            console.log('Input Map: ', inputMap);
            var inputMapJSON = JSON.stringify(inputMap);
            remoteActions.saveOverride(inputMapJSON).then(function(result) {
                console.log('create override: ', result);
                if (event) {
                    event.currentTarget.innerText = 'Saved!';
                    setTimeout(function() {
                        event.currentTarget.innerText = originalText;
                        event.currentTarget.disabled = false;
                    }, 2000);
                }
            });
        };

        $scope.deleteOverride = function() {
            var inputMap = {
                'contextId': $scope.contextId,
                'overriddenPCIId': $scope.selectedProd.parentChildId,
                'type': 'Product Definition',
                'overridingObjectId': $scope.selectedProd.overrideObj.Id,
                'overrideDefinitionId': $scope.selectedProd.overrideDef.Id
            };
            console.log('Input Map: ', inputMap);
            var inputMapJSON = JSON.stringify(inputMap);
            remoteActions.deleteOverride(inputMapJSON).then(function(result) {
                console.log('delete override: ', result);
                delete $scope.selectedProd.overrideObj;
                delete $scope.selectedProd.overrideDef;
            });
        };

        $scope.init = function(getMetadata) {
            var prodId = ($scope.baseProductId === '' ? $scope.productId : $scope.baseProductId);
            remoteActions.getProdStructureItems(prodId).then(function(results) {
                $scope.productList = [];
                angular.forEach(results, function(prod, idx) {
                    prod.isSelected = false;
                    prod.show = true;
                    if (idx === (results.length - 1)) {
                        prod.hasChildren = false;
                    } else {
                        prod.hasChildren = (prod.level < results[idx + 1].level);
                        prod.showChildren = true;
                    }

                    $scope.productList.push(prod);
                });

                // get the object data
                $scope.getObjectData(getMetadata);
            });
        };
        $scope.init(true);

        $scope.getNumber = function(num) {
            return (new Array(num));
        };
    }
]);

},{}],3:[function(require,module,exports){
angular.module("productstructure").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("DeletePCIModal.tpl.html",'<div class="modal" tabindex="-1" role="dialog" aria-hidden="true">\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header" ng-show="title">\n                <h4 class="modal-title" ng-bind="title"></h4>\n            </div>\n            <div class="modal-body">\n                Are you sure you want to delete <i>{{deleteProd.productName}}</i>?\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default" ng-click="$hide()">No</button>\n                <button type="button" class="btn btn-primary" ng-click="deleteItem(deleteProd);$hide();">Yes</button>\n            </div>\n        </div>\n    </div>\n</div>'),$templateCache.put("ProductChild.tpl.html",'<div class="product-child">\n    <div class="item-wrapper">\n        <div class="edit-item">\n            <form name="editItem">\n                <div class="pci-object">\n                    <div class="pci-field">\n                        <div class="pci-title">Edit Item</div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">{{objectFields[nsp+\'ParentProductId__c\'].label}}:</div>\n                        <div class="pci-value">{{selectedProd.parentProdName}}</div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="name">{{objectFields[\'Name\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="name" ng-model="selectedProd.prodChildObj[\'Name\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="seq">{{objectFields[nsp+\'SeqNumber__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="number" id="seq" ng-model="selectedProd.prodChildObj[nsp+\'SeqNumber__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="qty">{{objectFields[nsp+\'Quantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="number" id="qty" ng-model="selectedProd.prodChildObj[nsp+\'Quantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="min">{{objectFields[nsp+\'MinQuantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="number" id="min" ng-model="selectedProd.prodChildObj[nsp+\'MinQuantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="max">{{objectFields[nsp+\'MaxQuantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="number" id="max" ng-model="selectedProd.prodChildObj[nsp+\'MaxQuantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label"></div>\n                        <div class="pci-value">\n                            <button type="button" class="btn btn-primary" ng-click="saveItem($event)">Save</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <div class="override-item">\n            <div ng-if="!selectedProd.overrideObj">\n                <button type="button" class="btn btn-default" ng-click="createOverride()">Create an override</button>\n            </div>\n            <form name="overrideItem" ng-if="selectedProd.overrideObj">\n                <div class="pci-object">\n                    <div class="pci-field">\n                        <div class="pci-title">Override Item</div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">{{objectFields[nsp+\'ParentProductId__c\'].label}}:</div>\n                        <div class="pci-value">{{selectedProd.parentProdName}}</div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="name">{{objectFields[\'Name\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="name" ng-model="selectedProd.overrideObj[\'Name\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="seq">{{objectFields[nsp+\'SeqNumber__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="seq" ng-model="selectedProd.overrideObj[nsp+\'SeqNumber__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="qty">{{objectFields[nsp+\'Quantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="qty" ng-model="selectedProd.overrideObj[nsp+\'Quantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="min">{{objectFields[nsp+\'MinQuantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="min" ng-model="selectedProd.overrideObj[nsp+\'MinQuantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label">\n                            <label class="control-label" for="max">{{objectFields[nsp+\'MaxQuantity__c\'].label}}:</label>\n                        </div>\n                        <div class="pci-value">\n                            <input type="text" id="max" ng-model="selectedProd.overrideObj[nsp+\'MaxQuantity__c\']" class="form-control" />\n                        </div>\n                    </div>\n                    <div class="pci-field">\n                        <div class="pci-label"></div>\n                        <div class="pci-value">\n                            <button type="button" class="btn btn-primary" ng-click="saveOverride($event)">Save</button>&nbsp;&nbsp;\n                            <button type="button" class="btn btn-default" ng-click="deleteOverride()">Delete Override</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>'),$templateCache.put("ProductInfo.tpl.html",'<div class="product-info">\n    <h2>Product Details</h2>\n    <iframe ng-src="{{selectedProd.detailsUrl}}" id="prod_struct_details"></iframe>\n\n    <h2>Product Attributes</h2>\n    <iframe ng-src="{{selectedProd.attributesUrl}}" id="prod_struct_attrs"></iframe>\n</div>')}]);
},{}]},{},[1]);

})();
(function(){
  var fileNsPrefix = (function() {
    'use strict';    
    var lastScript;
    try {
      // Locker vNext uses `document.currentScript` instead of `document.getElementsByTagName`
      // We first check for vNext as the legacy code breaks and won't load with locker next.
      // If `currentScript` is undefined or not set, it means we are in legacy locker.
      lastScript = document.currentScript;
    } catch (err){
      console.info('Locker vNext is not enabled');
    }

    if(!lastScript) {
      var scripts = document.getElementsByTagName('script');
      lastScript = scripts[scripts.length - 1];
    }


    var scriptName = lastScript.src;
    var parts = scriptName.split('/');
    var partsLength = parts.length - 1;
    var thisScript = parts[partsLength--];
    if (thisScript === "") {
      thisScript = parts[partsLength--];
    }

    // Fix to handle cases where js files are inside zip files
    // https://dev-card.na31.visual.force.com/resource/1509484368000/dev_card__cardframework_core_assets/latest/cardframework.js

    //fix for finding nsPrefix in subpaths and subdomains
    if (scriptName.indexOf('__') != -1) {
      while(thisScript.indexOf('__') == -1 && partsLength >= 0) {
        thisScript = parts[partsLength];
        partsLength--;
      }
    }

    var lowerCasePrefix = thisScript.indexOf('__') == -1 ? '' : thisScript.substring(0, thisScript.indexOf('__') + 2);
    //check for the cached namespace first
    lowerCasePrefix = lowerCasePrefix === '' && localStorage.getItem('nsPrefix') ? localStorage.getItem('nsPrefix'): lowerCasePrefix;
    
    if(lowerCasePrefix !== ''){
        lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
    }
    if (lowerCasePrefix.length === 0) {
      return function() {
        //then check if the app has put a namespace and take that one as it is newer
        lowerCasePrefix = window.nsPrefix ? window.nsPrefix: lowerCasePrefix;
        //add the underscore if it doesn't have them    
        if(lowerCasePrefix !== ""){
            lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
        }  
        return lowerCasePrefix;
      };
    } else {
      var resolvedNs = null;
      return function() {
        if (resolvedNs) {
          return resolvedNs;
        }
        // hack to make scan SF objects for the correct case
        try {
          var tofind = lowerCasePrefix.replace('__', '');
          var name;
          var scanObjectForNs = function(object, alreadySeen) {
            if (object && object !== window && alreadySeen.indexOf(object) == -1) {
                alreadySeen.push(object);
                Object.keys(object).forEach(function(key) {
                  if (key === 'ns') {
                    // do ns test
                    if (typeof object[key] === 'string' && object[key].toLowerCase() === tofind) {
                      name = object[key] + '__';
                      return false;
                    }
                  }
                  if (Object.prototype.toString.call(object[key]) === '[object Array]') {
                    object[key].forEach(function(value) {
                      var result = scanObjectForNs(value, alreadySeen);
                      if (result) {
                          name = result;
                          return false;
                      }
                    });
                  } else if (typeof object[key] == 'object') {
                    var result = scanObjectForNs(object[key], alreadySeen);
                    if (result) {
                        name = result;
                        return false;
                    }
                  }
                  if (name) {
                    return false;
                  }
                });
                if (name) {
                  return name;
                }
            };
          }
          if(typeof Visualforce !== 'undefined') { //inside VF
            scanObjectForNs(Visualforce.remoting.Manager.providers, []);  
          } else {
            return lowerCasePrefix;
          }
          if (name) {
            return resolvedNs = name;
          } else {
            return resolvedNs = lowerCasePrefix;
          }
        } catch (e) {
          return lowerCasePrefix;
        }
      };
    }
  })();

  var fileNsPrefixDot = function() {
    var prefix = fileNsPrefix();
    if (prefix.length > 1) {
      return prefix.replace('__', '.');
    } else {
      return prefix;
    }
  };(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';
require('./dependencies/native.history.js');
require('./dependencies/angular-drag-and-drop-lists.js');
require('./polyfills/Array.find.js');
require('./polyfills/Array.findIndex.js');
require('./polyfills/Array.from.js');
require('./sharedObjectService.js');

angular.module('omniscriptDesigner', ['vlocity', 'omnidesigner.core', 'oui', 'mgcrea.ngStrap',
        'ui-rangeSlider', 'dndLists', 'ngSanitize', 'sldsangular', 'ngOrderObjectBy',
        'viaExpressionEngine', 'ui.tinymce', 'dataraptor', 'drvcomp', 'ouihome', 'sharedObjectService', 'monacoEditor'
    ])
    .value('isIntegrationProcedure', true)
    .constant('vkbeautify', window.vkbeautify);

require('./modules/oui/Oui.js');

require('./modules/designer/config/run.js');
require('./modules/designer/config/config.js');

require('./modules/designer/component/ips/IntegrationProcedurePropertySet.js');
require('./modules/designer/component/DataSourceProperty.js');
require('./modules/designer/component/DataraptorSelect.js');

require('./modules/designer/component/ips/action/index.js');
require('./modules/designer/component/ips/group/index.js');
require('./modules/designer/component/common/index.js');

require('./modules/designer/controller/OmniScriptDesigner.js');
require('./modules/designer/controller/ElementPalette.js');
require('./modules/designer/controller/StructureCanvas.js');
require('./modules/designer/controller/intProcedureTabbedController.js');
require('./modules/designer/controller/PropertiesController.js');
require('./modules/designer/controller/ScriptFormController.js');

require('./modules/designer/directive/NumberInputNullValueFix.js');
require('./modules/designer/directive/PreventDeleteBack.js');
require('./modules/designer/directive/PaletteGroup.js');
require('./modules/designer/directive/ViaAffix.js');
require('./modules/designer/directive/vlc-draggable.js');
require('./modules/designer/directive/vlc-bubble-canceller.js');
require('./modules/designer/directive/vlc-expand-collapse.js');
require('./modules/designer/directive/intProcedurePreviewPanel.js');
require('./modules/designer/directive/ngOrderObjectBy.js');
require('./modules/designer/directive/showHideRule.js');

require('./modules/designer/filter/ActiveElementTitle.js');
require('./modules/designer/filter/ClassName.js');
require('./modules/designer/filter/ElementLabel.js');
require('./modules/designer/filter/GetTypeForElement.js');
require('./modules/designer/filter/FixMissingProperties.js');
require('./modules/designer/filter/ReadablePropertyName.js');
require('./modules/designer/filter/ControlType.js');

require('./modules/designer/factory/propCompUtil.js');
require('./modules/designer/services/vlocityUiTemplatesService.js');
require('./modules/designer/factory/InterTabMsgBus.js');
require('./modules/designer/factory/Delete.js');
require('./modules/designer/services/dataraptorBundleService.js');
require('./modules/designer/services/sObjectService.js');
require('./modules/designer/services/tinyMCEImageInsert.js');
require('./modules/designer/services/propertyEditorModalService.js');
require('./modules/designer/services/customViewModalService.js');
require('./modules/designer/services/customLabelService.js');
require('./modules/designer/oui_tinymce_plugins/smart_link.js');

require('./modules/designer/templates/templates.js');
require('./modules/designer/directive/logging.js');
require('./modules/designer/directive/treeView.js');
require('./modules/designer/directive/vlcCollapsible.js');
require('./modules/designer/directive/vlcClipboard.js');
require('./modules/designer/factory/tObjectFactory.js');

angular.module('ouihome', ['vlocity']);
require('./modules/ouihome/factory/BackcompatExport.js');

},{"./dependencies/angular-drag-and-drop-lists.js":2,"./dependencies/native.history.js":3,"./modules/designer/component/DataSourceProperty.js":5,"./modules/designer/component/DataraptorSelect.js":6,"./modules/designer/component/common/index.js":20,"./modules/designer/component/ips/IntegrationProcedurePropertySet.js":21,"./modules/designer/component/ips/action/index.js":41,"./modules/designer/component/ips/group/index.js":46,"./modules/designer/config/config.js":47,"./modules/designer/config/run.js":48,"./modules/designer/controller/ElementPalette.js":49,"./modules/designer/controller/OmniScriptDesigner.js":50,"./modules/designer/controller/PropertiesController.js":51,"./modules/designer/controller/ScriptFormController.js":52,"./modules/designer/controller/StructureCanvas.js":53,"./modules/designer/controller/intProcedureTabbedController.js":54,"./modules/designer/directive/NumberInputNullValueFix.js":55,"./modules/designer/directive/PaletteGroup.js":56,"./modules/designer/directive/PreventDeleteBack.js":57,"./modules/designer/directive/ViaAffix.js":58,"./modules/designer/directive/intProcedurePreviewPanel.js":59,"./modules/designer/directive/logging.js":60,"./modules/designer/directive/ngOrderObjectBy.js":61,"./modules/designer/directive/showHideRule.js":62,"./modules/designer/directive/treeView.js":63,"./modules/designer/directive/vlc-bubble-canceller.js":64,"./modules/designer/directive/vlc-draggable.js":65,"./modules/designer/directive/vlc-expand-collapse.js":66,"./modules/designer/directive/vlcClipboard.js":67,"./modules/designer/directive/vlcCollapsible.js":68,"./modules/designer/factory/Delete.js":69,"./modules/designer/factory/InterTabMsgBus.js":70,"./modules/designer/factory/propCompUtil.js":71,"./modules/designer/factory/tObjectFactory.js":72,"./modules/designer/filter/ActiveElementTitle.js":73,"./modules/designer/filter/ClassName.js":74,"./modules/designer/filter/ControlType.js":75,"./modules/designer/filter/ElementLabel.js":76,"./modules/designer/filter/FixMissingProperties.js":77,"./modules/designer/filter/GetTypeForElement.js":78,"./modules/designer/filter/ReadablePropertyName.js":79,"./modules/designer/oui_tinymce_plugins/smart_link.js":80,"./modules/designer/services/customLabelService.js":81,"./modules/designer/services/customViewModalService.js":82,"./modules/designer/services/dataraptorBundleService.js":83,"./modules/designer/services/propertyEditorModalService.js":84,"./modules/designer/services/sObjectService.js":85,"./modules/designer/services/tinyMCEImageInsert.js":86,"./modules/designer/services/vlocityUiTemplatesService.js":87,"./modules/designer/templates/templates.js":88,"./modules/oui/Oui.js":89,"./modules/ouihome/factory/BackcompatExport.js":99,"./polyfills/Array.find.js":100,"./polyfills/Array.findIndex.js":101,"./polyfills/Array.from.js":102,"./sharedObjectService.js":103}],2:[function(require,module,exports){
/**
 * angular-drag-and-drop-lists v2.1.0
 *
 * IMPORTANT: This version contains a number of Vlocity OmniScript changes
 *
 * Specifically we don't insert a placeholder element and move it around the dom. Instead we
 * insert a single placeholder element and use css to position it absolutely in the dom.
 * This avoids a lot of layout calls in larger nested trees.
 *
 * Copyright (c) 2014 Marcel Juenemann marcel@juenemann.cc
 * Copyright (c) 2014-2017 Google Inc.
 * https://github.com/marceljuenemann/angular-drag-and-drop-lists
 *
 * License: MIT
 */
(function(dndLists) {

    // In standard-compliant browsers we use a custom mime type and also encode the dnd-type in it.
    // However, IE and Edge only support a limited number of mime types. The workarounds are described
    // in https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
    var MIME_TYPE = 'application/x-dnd';
    var EDGE_MIME_TYPE = 'application/json';
    var MSIE_MIME_TYPE = 'Text';

    // All valid HTML5 drop effects, in the order in which we prefer to use them.
    var ALL_EFFECTS = ['move', 'copy', 'link'];

    /**
     * Use the  dnd-draggable attribute to make your element draggable
     *
     * Attributes:
     * - dnd-draggable      Required attribute. The value has to be an object that represents the data
     *                      of the element. In case of a drag and drop operation the object will be
     *                      serialized and unserialized on the receiving end.
     * - dnd-effect-allowed Use this attribute to limit the operations that can be performed. Valid
     *                      options are "move", "copy" and "link", as well as "all", "copyMove",
     *                      "copyLink" and "linkMove". The semantics of these operations are up to you
     *                      and have to be implemented using the callbacks described below. If you
     *                      allow multiple options, the user can choose between them by using the
     *                      modifier keys (OS specific). The cursor will be changed accordingly,
     *                      expect for IE and Edge, where this is not supported.
     * - dnd-type           Use this attribute if you have different kinds of items in your
     *                      application and you want to limit which items can be dropped into which
     *                      lists. Combine with dnd-allowed-types on the dnd-list(s). This attribute
     *                      must be a lower case string. Upper case characters can be used, but will
     *                      be converted to lower case automatically.
     * - dnd-disable-if     You can use this attribute to dynamically disable the draggability of the
     *                      element. This is useful if you have certain list items that you don't want
     *                      to be draggable, or if you want to disable drag & drop completely without
     *                      having two different code branches (e.g. only allow for admins).
     *
     * Callbacks:
     * - dnd-dragstart      Callback that is invoked when the element was dragged. The original
     *                      dragstart event will be provided in the local event variable.
     * - dnd-moved          Callback that is invoked when the element was moved. Usually you will
     *                      remove your element from the original list in this callback, since the
     *                      directive is not doing that for you automatically. The original dragend
     *                      event will be provided in the local event variable.
     * - dnd-copied         Same as dnd-moved, just that it is called when the element was copied
     *                      instead of moved, so you probably want to implement a different logic.
     * - dnd-linked         Same as dnd-moved, just that it is called when the element was linked
     *                      instead of moved, so you probably want to implement a different logic.
     * - dnd-canceled       Callback that is invoked if the element was dragged, but the operation was
     *                      canceled and the element was not dropped. The original dragend event will
     *                      be provided in the local event variable.
     * - dnd-dragend        Callback that is invoked when the drag operation ended. Available local
     *                      variables are event and dropEffect.
     * - dnd-selected       Callback that is invoked when the element was clicked but not dragged.
     *                      The original click event will be provided in the local event variable.
     * - dnd-callback       Custom callback that is passed to dropzone callbacks and can be used to
     *                      communicate between source and target scopes. The dropzone can pass user
     *                      defined variables to this callback.
     *
     * CSS classes:
     * - dndDragging        This class will be added to the element while the element is being
     *                      dragged. It will affect both the element you see while dragging and the
     *                      source element that stays at it's position. Do not try to hide the source
     *                      element with this class, because that will abort the drag operation.
     * - dndDraggingSource  This class will be added to the element after the drag operation was
     *                      started, meaning it only affects the original element that is still at
     *                      it's source position, and not the "element" that the user is dragging with
     *                      his mouse pointer.
     */
    dndLists.directive('dndDraggable', ['$parse', '$timeout', function($parse, $timeout) {
      return function(scope, element, attr) {
        // Set the HTML5 draggable attribute on the element.
        element.attr("draggable", "true");

        // If the dnd-disable-if attribute is set, we have to watch that.
        if (attr.dndDisableIf) {
          scope.$watch(attr.dndDisableIf, function(disabled) {
            element.attr("draggable", !disabled);
          });
        }

        /**
         * When the drag operation is started we have to prepare the dataTransfer object,
         * which is the primary way we communicate with the target element
         */
        element.on('dragstart', function(event) {
          event = event.originalEvent || event;

          // Check whether the element is draggable, since dragstart might be triggered on a child.
          if (element.attr('draggable') == 'false') return true;

          document.body.classList.add('dnd-in-progress');

          // Initialize global state.
          dndState.isDragging = true;
          dndState.itemType = attr.dndType && scope.$eval(attr.dndType).toLowerCase();

          // Set the allowed drop effects. See below for special IE handling.
          dndState.dropEffect = "none";
          dndState.effectAllowed = attr.dndEffectAllowed || ALL_EFFECTS[0];
          event.dataTransfer.effectAllowed = dndState.effectAllowed;

          // Internet Explorer and Microsoft Edge don't support custom mime types, see design doc:
          // https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
          var item = scope.$eval(attr.dndDraggable);
          var mimeType = MIME_TYPE + (dndState.itemType ? ('-' + dndState.itemType) : '');
          try {
            event.dataTransfer.setData(mimeType, angular.toJson(item));
          } catch (e) {
            // Setting a custom MIME type did not work, we are probably in IE or Edge.
            var data = angular.toJson({item: item, type: dndState.itemType});
            try {
              event.dataTransfer.setData(EDGE_MIME_TYPE, data);
            } catch (e) {
              // We are in Internet Explorer and can only use the Text MIME type. Also note that IE
              // does not allow changing the cursor in the dragover event, therefore we have to choose
              // the one we want to display now by setting effectAllowed.
              var effectsAllowed = filterEffects(ALL_EFFECTS, dndState.effectAllowed);
              event.dataTransfer.effectAllowed = effectsAllowed[0];
              event.dataTransfer.setData(MSIE_MIME_TYPE, data);
            }
          }

          // Add CSS classes. See documentation above.
          element.addClass("dndDragging");
          $timeout(function() { element.addClass("dndDraggingSource"); }, 0);

          // Try setting a proper drag image if triggered on a dnd-handle (won't work in IE).
          if (event._dndHandle && event.dataTransfer.setDragImage) {
            event.dataTransfer.setDragImage(element[0], 0, 0);
          }

          // Invoke dragstart callback and prepare extra callback for dropzone.
          $parse(attr.dndDragstart)(scope, {event: event});
          if (attr.dndCallback) {
            var callback = $parse(attr.dndCallback);
            dndState.callback = function(params) { return callback(scope, params || {}); };
          }

          event.stopPropagation();
        });

      /**
       * The dragend event is triggered when the element was dropped or when the drag
       * operation was aborted (e.g. hit escape button). Depending on the executed action
       * we will invoke the callbacks specified with the dnd-moved or dnd-copied attribute.
       */
      element.on('dragend', function (event) {
          document.body.classList.remove('dnd-in-progress');

          event = event.originalEvent || event;

          // Invoke callbacks. Usually we would use event.dataTransfer.dropEffect to determine
          // the used effect, but Chrome has not implemented that field correctly. On Windows
          // it always sets it to 'none', while Chrome on Linux sometimes sets it to something
          // else when it's supposed to send 'none' (drag operation aborted).
          scope.$apply(function() {
            var dropEffect = dndState.dropEffect;
            var cb = {copy: 'dndCopied', link: 'dndLinked', move: 'dndMoved', none: 'dndCanceled'};
            $parse(attr[cb[dropEffect]])(scope, {event: event});
            $parse(attr.dndDragend)(scope, {event: event, dropEffect: dropEffect});
          });

          // Clean up
          dndState.isDragging = false;
          dndState.callback = undefined;
          element.removeClass("dndDragging");
          element.removeClass("dndDraggingSource");
          event.stopPropagation();

          // In IE9 it is possible that the timeout from dragstart triggers after the dragend handler.
          $timeout(function() { element.removeClass("dndDraggingSource"); }, 0);
        });

        /**
         * When the element is clicked we invoke the callback function
         * specified with the dnd-selected attribute.
         */
        element.on('click', function(event) {
          if (!attr.dndSelected) return;

          event = event.originalEvent || event;
          scope.$apply(function() {
            $parse(attr.dndSelected)(scope, {event: event});
          });

          // Prevent triggering dndSelected in parent elements.
          event.stopPropagation();
        });

        /**
         * Workaround to make element draggable in IE9
         */
        element.on('selectstart', function() {
          if (this.dragDrop) this.dragDrop();
        });
      };
    }]);

    /**
     * Use the dnd-list attribute to make your list element a dropzone. Usually you will add a single
     * li element as child with the ng-repeat directive. If you don't do that, we will not be able to
     * position the dropped element correctly. If you want your list to be sortable, also add the
     * dnd-draggable directive to your li element(s).
     *
     * Attributes:
     * - dnd-list             Required attribute. The value has to be the array in which the data of
     *                        the dropped element should be inserted. The value can be blank if used
     *                        with a custom dnd-drop handler that always returns true.
     * - dnd-allowed-types    Optional array of allowed item types. When used, only items that had a
     *                        matching dnd-type attribute will be dropable. Upper case characters will
     *                        automatically be converted to lower case.
     * - dnd-effect-allowed   Optional string expression that limits the drop effects that can be
     *                        performed in the list. See dnd-effect-allowed on dnd-draggable for more
     *                        details on allowed options. The default value is all.
     * - dnd-disable-if       Optional boolean expresssion. When it evaluates to true, no dropping
     *                        into the list is possible. Note that this also disables rearranging
     *                        items inside the list.
     * - dnd-horizontal-list  Optional boolean expresssion. When it evaluates to true, the positioning
     *                        algorithm will use the left and right halfs of the list items instead of
     *                        the upper and lower halfs.
     * - dnd-external-sources Optional boolean expression. When it evaluates to true, the list accepts
     *                        drops from sources outside of the current browser tab. This allows to
     *                        drag and drop accross different browser tabs. The only major browser
     *                        that does not support this is currently Microsoft Edge.
     *
     * Callbacks:
     * - dnd-dragover         Optional expression that is invoked when an element is dragged over the
     *                        list. If the expression is set, but does not return true, the element is
     *                        not allowed to be dropped. The following variables will be available:
     *                        - event: The original dragover event sent by the browser.
     *                        - index: The position in the list at which the element would be dropped.
     *                        - type: The dnd-type set on the dnd-draggable, or undefined if non was
     *                          set. Will be null for drops from external sources in IE and Edge,
     *                          since we don't know the type in those cases.
     *                        - dropEffect: One of move, copy or link, see dnd-effect-allowed.
     *                        - external: Whether the element was dragged from an external source.
     *                        - callback: If dnd-callback was set on the source element, this is a
     *                          function reference to the callback. The callback can be invoked with
     *                          custom variables like this: callback({var1: value1, var2: value2}).
     *                          The callback will be executed on the scope of the source element. If
     *                          dnd-external-sources was set and external is true, this callback will
     *                          not be available.
     * - dnd-drop             Optional expression that is invoked when an element is dropped on the
     *                        list. The same variables as for dnd-dragover will be available, with the
     *                        exception that type is always known and therefore never null. There
     *                        will also be an item variable, which is the transferred object. The
     *                        return value determines the further handling of the drop:
     *                        - falsy: The drop will be canceled and the element won't be inserted.
     *                        - true: Signalises that the drop is allowed, but the dnd-drop
     *                          callback already took care of inserting the element.
     *                        - otherwise: All other return values will be treated as the object to
     *                          insert into the array. In most cases you want to simply return the
     *                          item parameter, but there are no restrictions on what you can return.
     * - dnd-inserted         Optional expression that is invoked after a drop if the element was
     *                        actually inserted into the list. The same local variables as for
     *                        dnd-drop will be available. Note that for reorderings inside the same
     *                        list the old element will still be in the list due to the fact that
     *                        dnd-moved was not called yet.
     *
     * CSS classes:
     * - dndPlaceholder       When an element is dragged over the list, a new placeholder child
     *                        element will be added. This element is of type li and has the class
     *                        dndPlaceholder set. Alternatively, you can define your own placeholder
     *                        by creating a child element with dndPlaceholder class.
     * - dndDragover          Will be added to the list while an element is dragged over the list.
     */
    dndLists.directive('dndList', ['$parse', function($parse) {
      var placeholder = angular.element('<div class="dndPlaceholder"></div>');
      $('body').append(placeholder);
      return function(scope, element, attr) {
        // While an element is dragged over the list, this placeholder element is inserted
        // at the location where the element would be inserted after dropping.
        // var placeholder = getPlaceholderElement();
        // placeholder.remove();
        // laceholder);

        var placeholderNode = placeholder[0];
        var listNode = element[0];
        var listSettings = {};

        /**
         * The dragenter event is fired when a dragged element or text selection enters a valid drop
         * target. According to the spec, we either need to have a dropzone attribute or listen on
         * dragenter events and call preventDefault(). It should be noted though that no browser seems
         * to enforce this behaviour.
         */
        element.on('dragenter', function (event) {
          event = event.originalEvent || event;

          // Calculate list properties, so that we don't have to repeat this on every dragover event.
          var types = attr.dndAllowedTypes && scope.$eval(attr.dndAllowedTypes);
          listSettings = {
            allowedTypes: angular.isArray(types) && types.join('|').toLowerCase().split('|'),
            disabled: attr.dndDisableIf && scope.$eval(attr.dndDisableIf),
            externalSources: attr.dndExternalSources && scope.$eval(attr.dndExternalSources),
            horizontal: attr.dndHorizontalList && scope.$eval(attr.dndHorizontalList)
          };

          var mimeType = getMimeType(event.dataTransfer.types);
          if (!mimeType || !isDropAllowed(getItemType(mimeType))) return true;
          event.preventDefault();
        });

        /**
         * The dragover event is triggered "every few hundred milliseconds" while an element
         * is being dragged over our list, or over an child element.
         */
        element.on('dragover', function(event) {
          event = event.originalEvent || event;
          var isFirstHalf, rect;

          // Check whether the drop is allowed and determine mime type.
          var mimeType = getMimeType(event.dataTransfer.types);
          var itemType = getItemType(mimeType);
          if (!mimeType || !isDropAllowed(itemType)) return true;

          // Make sure the placeholder is shown, which is especially important if the list is empty.
          // if (placeholderNode.parentNode != listNode) {
          //   element.append(placeholder);
          // }

          if (event.target != listNode) {
            // Try to find the node direct directly below the list node.
            var listItemNode = event.target;
            while (listItemNode.parentNode != listNode && listItemNode.parentNode) {
              listItemNode = listItemNode.parentNode;
            }

            if (listItemNode.parentNode == listNode && listItemNode != placeholderNode) {
              // If the mouse pointer is in the upper half of the list item element,
              // we position the placeholder before the list item, otherwise after it.
              rect = listItemNode.getBoundingClientRect();
              if (listSettings.horizontal) {
                isFirstHalf = event.clientX < rect.left + rect.width / 2;
              } else {
                isFirstHalf = event.clientY < rect.top + rect.height / 2;
              }

              $(placeholder).css({
                position: 'absolute',
                visibility: 'visible',
                top: (isFirstHalf ? rect.y: rect.y + rect.height ) + window.scrollY,
                left: rect.left - 4,
                width: (rect.width + 8),
                opacity: 1
              });
              var placeholderIndex = Array.prototype.indexOf.call(listNode.children, listItemNode) + (isFirstHalf ? 0 : 1);
              if ($(placeholder).data('currentIndex') !== placeholderIndex) {
                $(placeholder).data('currentIndex', placeholderIndex);
              }
            }
          } else {
            rect = event.target.getBoundingClientRect();
            var top = rect.y;
            if (event.target.children.length > 0) {
              var lastItem = event.target.children[event.target.children.length - 1].getBoundingClientRect();
              top = lastItem.y + lastItem.height;
            }
            $(placeholder).css({
              position: 'absolute',
              visibility: 'visible',
              top: top + window.scrollY,
              left: rect.left - 4,
              width: rect.width + 8,
              opacity: 1
            });
            if ($(placeholder).data('currentIndex') !== event.target.children.length) {
              $(placeholder).data('currentIndex', event.target.children.length);
            }
          }

          // In IE we set a fake effectAllowed in dragstart to get the correct cursor, we therefore
          // ignore the effectAllowed passed in dataTransfer. We must also not access dataTransfer for
          // drops from external sources, as that throws an exception.
          var ignoreDataTransfer = mimeType == MSIE_MIME_TYPE;
          var dropEffect = getDropEffect(event, ignoreDataTransfer);
          if (dropEffect == 'none') return stopDragover();

          // At this point we invoke the callback, which still can disallow the drop.
          // We can't do this earlier because we want to pass the index of the placeholder.
          if (attr.dndDragover && !invokeCallback(attr.dndDragover, event, dropEffect, itemType)) {
            return stopDragover();
          }

          // Set dropEffect to modify the cursor shown by the browser, unless we're in IE, where this
          // is not supported. This must be done after preventDefault in Firefox.
          event.preventDefault();
          if (!ignoreDataTransfer) {
            event.dataTransfer.dropEffect = dropEffect;
          }

          element.addClass("dndDragover");
          event.stopPropagation();
          return false;
        });

        /**
         * When the element is dropped, we use the position of the placeholder element as the
         * position where we insert the transferred data. This assumes that the list has exactly
         * one child element per array element.
         */
        element.on('drop', function(event) {
          event = event.originalEvent || event;

          // Check whether the drop is allowed and determine mime type.
          var mimeType = getMimeType(event.dataTransfer.types);
          var itemType = getItemType(mimeType);
          if (!mimeType || !isDropAllowed(itemType)) return true;

          // The default behavior in Firefox is to interpret the dropped element as URL and
          // forward to it. We want to prevent that even if our drop is aborted.
          event.preventDefault();

          // Unserialize the data that was serialized in dragstart.
          try {
            var data = JSON.parse(event.dataTransfer.getData(mimeType));
          } catch(e) {
            return stopDragover();
          }

          // Drops with invalid types from external sources might not have been filtered out yet.
          if (mimeType == MSIE_MIME_TYPE || mimeType == EDGE_MIME_TYPE) {
            itemType = data.type || undefined;
            data = data.item;
            if (!isDropAllowed(itemType)) return stopDragover();
          }

          // Special handling for internal IE drops, see dragover handler.
          var ignoreDataTransfer = mimeType == MSIE_MIME_TYPE;
          var dropEffect = getDropEffect(event, ignoreDataTransfer);
          if (dropEffect == 'none') return stopDragover();

          // Invoke the callback, which can transform the transferredObject and even abort the drop.
          var index = getPlaceholderIndex();
          if (attr.dndDrop) {
            data = invokeCallback(attr.dndDrop, event, dropEffect, itemType, index, data);
            if (!data) return stopDragover();
          }

        // The drop is definitely going to happen now, store the dropEffect.
        dndState.dropEffect = dropEffect;
        if (!ignoreDataTransfer) {
          event.dataTransfer.dropEffect = dropEffect;
        }
        document.body.classList.remove('dnd-in-progress');

          // Insert the object into the array, unless dnd-drop took care of that (returned true).
          if (data !== true) {
            scope.$apply(function() {
              scope.$eval(attr.dndList).splice(index, 0, data);
            });
          }
          invokeCallback(attr.dndInserted, event, dropEffect, itemType, index, data);

          // Clean up
          stopDragover();
          event.stopPropagation();
          return false;
        });

        /**
         * We have to remove the placeholder when the element is no longer dragged over our list. The
         * problem is that the dragleave event is not only fired when the element leaves our list,
         * but also when it leaves a child element. Therefore, we determine whether the mouse cursor
         * is still pointing to an element inside the list or not.
         */
        element.on('dragleave', function(event) {
          event = event.originalEvent || event;

          var newTarget = document.elementFromPoint(event.clientX, event.clientY);
          if (listNode.contains(newTarget) && !event._dndPhShown) {
            // Signalize to potential parent lists that a placeholder is already shown.
            event._dndPhShown = true;
          } else {
            stopDragover();
          }
        });

        /**
         * Given the types array from the DataTransfer object, returns the first valid mime type.
         * A type is valid if it starts with MIME_TYPE, or it equals MSIE_MIME_TYPE or EDGE_MIME_TYPE.
         */
        function getMimeType(types) {
          if (!types) return MSIE_MIME_TYPE; // IE 9 workaround.
          for (var i = 0; i < types.length; i++) {
            if (types[i] == MSIE_MIME_TYPE || types[i] == EDGE_MIME_TYPE ||
                types[i].substr(0, MIME_TYPE.length) == MIME_TYPE) {
              return types[i];
            }
          }
          return null;
        }

        /**
         * Determines the type of the item from the dndState, or from the mime type for items from
         * external sources. Returns undefined if no item type was set and null if the item type could
         * not be determined.
         */
        function getItemType(mimeType) {
          if (dndState.isDragging) return dndState.itemType || undefined;
          if (mimeType == MSIE_MIME_TYPE || mimeType == EDGE_MIME_TYPE) return null;
          return (mimeType && mimeType.substr(MIME_TYPE.length + 1)) || undefined;
        }

        /**
         * Checks various conditions that must be fulfilled for a drop to be allowed, including the
         * dnd-allowed-types attribute. If the item Type is unknown (null), the drop will be allowed.
         */
        function isDropAllowed(itemType) {
          if (listSettings.disabled) return false;
          if (!listSettings.externalSources && !dndState.isDragging) return false;
          if (!listSettings.allowedTypes || itemType === null) return true;
          return itemType && listSettings.allowedTypes.indexOf(itemType) != -1;
        }

        /**
         * Determines which drop effect to use for the given event. In Internet Explorer we have to
         * ignore the effectAllowed field on dataTransfer, since we set a fake value in dragstart.
         * In those cases we rely on dndState to filter effects. Read the design doc for more details:
         * https://github.com/marceljuenemann/angular-drag-and-drop-lists/wiki/Data-Transfer-Design
         */
        function getDropEffect(event, ignoreDataTransfer) {
          var effects = ALL_EFFECTS;
          if (!ignoreDataTransfer) {
            effects = filterEffects(effects, event.dataTransfer.effectAllowed);
          }
          if (dndState.isDragging) {
            effects = filterEffects(effects, dndState.effectAllowed);
          }
          if (attr.dndEffectAllowed) {
            effects = filterEffects(effects, attr.dndEffectAllowed);
          }
          // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
          // therefore the following modifier keys will only affect other operating systems.
          if (!effects.length) {
            return 'none';
          } else if (event.ctrlKey && effects.indexOf('copy') != -1) {
            return 'copy';
          } else if (event.altKey && effects.indexOf('link') != -1) {
            return 'link';
          } else {
            return effects[0];
          }
        }

        /**
         * Small helper function that cleans up if we aborted a drop.
         */
        function stopDragover() {
          placeholder.css({
            transition: "opacity 0s",
            opacity: 0
          });
          element.removeClass("dndDragover");
          return true;
        }

        /**
         * Invokes a callback with some interesting parameters and returns the callbacks return value.
         */
        function invokeCallback(expression, event, dropEffect, itemType, index, item) {
          return $parse(expression)(scope, {
            callback: dndState.callback,
            dropEffect: dropEffect,
            event: event,
            external: !dndState.isDragging,
            index: index !== undefined ? index : getPlaceholderIndex(),
            item: item || undefined,
            type: itemType
          });
        }

        /**
         * We use the position of the placeholder node to determine at which position of the array the
         * object needs to be inserted
         */
        function getPlaceholderIndex() {
          return $(placeholder).data('currentIndex');
          //return Array.prototype.indexOf.call(listNode.children, placeholderNode);
        }

        /**
         * Tries to find a child element that has the dndPlaceholder class set. If none was found, a
         * new li element is created.
         */
        function getPlaceholderElement() {
          var placeholder;
          angular.forEach(element.children(), function(childNode) {
            var child = angular.element(childNode);
            if (child.hasClass('dndPlaceholder')) {
              placeholder = child;
            }
          });
          placeholder = $(document.querySelector('.dndPlaceholder'));
          return placeholder || angular.element("<div class='dndPlaceholder'></div>");
        }
      };
    }]);

    /**
     * Use the dnd-nodrag attribute inside of dnd-draggable elements to prevent them from starting
     * drag operations. This is especially useful if you want to use input elements inside of
     * dnd-draggable elements or create specific handle elements. Note: This directive does not work
     * in Internet Explorer 9.
     */
    dndLists.directive('dndNodrag', function() {
      return function(scope, element, attr) {
        // Set as draggable so that we can cancel the events explicitly
        element.attr("draggable", "true");

        /**
         * Since the element is draggable, the browser's default operation is to drag it on dragstart.
         * We will prevent that and also stop the event from bubbling up.
         */
        element.on('dragstart', function(event) {
          event = event.originalEvent || event;

          if (!event._dndHandle) {
            // If a child element already reacted to dragstart and set a dataTransfer object, we will
            // allow that. For example, this is the case for user selections inside of input elements.
            if (!(event.dataTransfer.types && event.dataTransfer.types.length)) {
              event.preventDefault();
            }
            event.stopPropagation();
          }
        });

        /**
         * Stop propagation of dragend events, otherwise dnd-moved might be triggered and the element
         * would be removed.
         */
        element.on('dragend', function(event) {
          event = event.originalEvent || event;
          if (!event._dndHandle) {
            event.stopPropagation();
          }
        });
      };
    });

    /**
     * Use the dnd-handle directive within a dnd-nodrag element in order to allow dragging with that
     * element after all. Therefore, by combining dnd-nodrag and dnd-handle you can allow
     * dnd-draggable elements to only be dragged via specific "handle" elements. Note that Internet
     * Explorer will show the handle element as drag image instead of the dnd-draggable element. You
     * can work around this by styling the handle element differently when it is being dragged. Use
     * the CSS selector .dndDragging:not(.dndDraggingSource) [dnd-handle] for that.
     */
    dndLists.directive('dndHandle', function() {
      return function(scope, element, attr) {
        element.attr("draggable", "true");

        element.on('dragstart dragend', function(event) {
          event = event.originalEvent || event;
          event._dndHandle = true;
        });
      };
    });

    /**
     * Filters an array of drop effects using a HTML5 effectAllowed string.
     */
    function filterEffects(effects, effectAllowed) {
      if (effectAllowed == 'all') return effects;
      return effects.filter(function(effect) {
        return effectAllowed.toLowerCase().indexOf(effect) != -1;
      });
    }

    /**
     * For some features we need to maintain global state. This is done here, with these fields:
     * - callback: A callback function set at dragstart that is passed to internal dropzone handlers.
     * - dropEffect: Set in dragstart to "none" and to the actual value in the drop handler. We don't
     *   rely on the dropEffect passed by the browser, since there are various bugs in Chrome and
     *   Safari, and Internet Explorer defaults to copy if effectAllowed is copyMove.
     * - effectAllowed: Set in dragstart based on dnd-effect-allowed. This is needed for IE because
     *   setting effectAllowed on dataTransfer might result in an undesired cursor.
     * - isDragging: True between dragstart and dragend. Falsy for drops from external sources.
     * - itemType: The item type of the dragged element set via dnd-type. This is needed because IE
     *   and Edge don't support custom mime types that we can use to transfer this information.
     */
    var dndState = {};

  })(angular.module('dndLists', []));

},{}],3:[function(require,module,exports){
typeof JSON!="object"&&(JSON={}),function(){"use strict";function f(e){return e<10?"0"+e:e}function quote(e){return escapable.lastIndex=0,escapable.test(e)?'"'+e.replace(escapable,function(e){var t=meta[e];return typeof t=="string"?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+e+'"'}function str(e,t){var n,r,i,s,o=gap,u,a=t[e];a&&typeof a=="object"&&typeof a.toJSON=="function"&&(a=a.toJSON(e)),typeof rep=="function"&&(a=rep.call(t,e,a));switch(typeof a){case"string":return quote(a);case"number":return isFinite(a)?String(a):"null";case"boolean":case"null":return String(a);case"object":if(!a)return"null";gap+=indent,u=[];if(Object.prototype.toString.apply(a)==="[object Array]"){s=a.length;for(n=0;n<s;n+=1)u[n]=str(n,a)||"null";return i=u.length===0?"[]":gap?"[\n"+gap+u.join(",\n"+gap)+"\n"+o+"]":"["+u.join(",")+"]",gap=o,i}if(rep&&typeof rep=="object"){s=rep.length;for(n=0;n<s;n+=1)typeof rep[n]=="string"&&(r=rep[n],i=str(r,a),i&&u.push(quote(r)+(gap?": ":":")+i))}else for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(i=str(r,a),i&&u.push(quote(r)+(gap?": ":":")+i));return i=u.length===0?"{}":gap?"{\n"+gap+u.join(",\n"+gap)+"\n"+o+"}":"{"+u.join(",")+"}",gap=o,i}}typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(e){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(e){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(e,t,n){var r;gap="",indent="";if(typeof n=="number")for(r=0;r<n;r+=1)indent+=" ";else typeof n=="string"&&(indent=n);rep=t;if(!t||typeof t=="function"||typeof t=="object"&&typeof t.length=="number")return str("",{"":e});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(e,t){var n,r,i=e[t];if(i&&typeof i=="object")for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(r=walk(i,n),r!==undefined?i[n]=r:delete i[n]);return reviver.call(e,t,i)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}(),function(e,t){"use strict";var n=e.History=e.History||{};if(typeof n.Adapter!="undefined")throw new Error("History.js Adapter has already been loaded...");n.Adapter={handlers:{},_uid:1,uid:function(e){return e._uid||(e._uid=n.Adapter._uid++)},bind:function(e,t,r){var i=n.Adapter.uid(e);n.Adapter.handlers[i]=n.Adapter.handlers[i]||{},n.Adapter.handlers[i][t]=n.Adapter.handlers[i][t]||[],n.Adapter.handlers[i][t].push(r),e["on"+t]=function(e,t){return function(r){n.Adapter.trigger(e,t,r)}}(e,t)},trigger:function(e,t,r){r=r||{};var i=n.Adapter.uid(e),s,o;n.Adapter.handlers[i]=n.Adapter.handlers[i]||{},n.Adapter.handlers[i][t]=n.Adapter.handlers[i][t]||[];for(s=0,o=n.Adapter.handlers[i][t].length;s<o;++s)n.Adapter.handlers[i][t][s].apply(this,[r])},extractEventData:function(e,n){var r=n&&n[e]||t;return r},onDomLoad:function(t){var n=e.setTimeout(function(){t()},2e3);e.onload=function(){clearTimeout(n),t()}}},typeof n.init!="undefined"&&n.init()}(window),function(e,t){"use strict";var n=e.document,r=e.setTimeout||r,i=e.clearTimeout||i,s=e.setInterval||s,o=e.History=e.History||{};if(typeof o.initHtml4!="undefined")throw new Error("History.js HTML4 Support has already been loaded...");o.initHtml4=function(){if(typeof o.initHtml4.initialized!="undefined")return!1;o.initHtml4.initialized=!0,o.enabled=!0,o.savedHashes=[],o.isLastHash=function(e){var t=o.getHashByIndex(),n;return n=e===t,n},o.isHashEqual=function(e,t){return e=encodeURIComponent(e).replace(/%25/g,"%"),t=encodeURIComponent(t).replace(/%25/g,"%"),e===t},o.saveHash=function(e){return o.isLastHash(e)?!1:(o.savedHashes.push(e),!0)},o.getHashByIndex=function(e){var t=null;return typeof e=="undefined"?t=o.savedHashes[o.savedHashes.length-1]:e<0?t=o.savedHashes[o.savedHashes.length+e]:t=o.savedHashes[e],t},o.discardedHashes={},o.discardedStates={},o.discardState=function(e,t,n){var r=o.getHashByState(e),i;return i={discardedState:e,backState:n,forwardState:t},o.discardedStates[r]=i,!0},o.discardHash=function(e,t,n){var r={discardedHash:e,backState:n,forwardState:t};return o.discardedHashes[e]=r,!0},o.discardedState=function(e){var t=o.getHashByState(e),n;return n=o.discardedStates[t]||!1,n},o.discardedHash=function(e){var t=o.discardedHashes[e]||!1;return t},o.recycleState=function(e){var t=o.getHashByState(e);return o.discardedState(e)&&delete o.discardedStates[t],!0},o.emulated.hashChange&&(o.hashChangeInit=function(){o.checkerFunction=null;var t="",r,i,u,a,f=Boolean(o.getHash());return o.isInternetExplorer()?(r="historyjs-iframe",i=n.createElement("iframe"),i.setAttribute("id",r),i.setAttribute("src","#"),i.style.display="none",n.body.appendChild(i),i.contentWindow.document.open(),i.contentWindow.document.close(),u="",a=!1,o.checkerFunction=function(){if(a)return!1;a=!0;var n=o.getHash(),r=o.getHash(i.contentWindow.document);return n!==t?(t=n,r!==n&&(u=r=n,i.contentWindow.document.open(),i.contentWindow.document.close(),i.contentWindow.document.location.hash=o.escapeHash(n)),o.Adapter.trigger(e,"hashchange")):r!==u&&(u=r,f&&r===""?o.back():o.setHash(r,!1)),a=!1,!0}):o.checkerFunction=function(){var n=o.getHash()||"";return n!==t&&(t=n,o.Adapter.trigger(e,"hashchange")),!0},o.intervalList.push(s(o.checkerFunction,o.options.hashChangeInterval)),!0},o.Adapter.onDomLoad(o.hashChangeInit)),o.emulated.pushState&&(o.onHashChange=function(t){var n=t&&t.newURL||o.getLocationHref(),r=o.getHashByUrl(n),i=null,s=null,u=null,a;return o.isLastHash(r)?(o.busy(!1),!1):(o.doubleCheckComplete(),o.saveHash(r),r&&o.isTraditionalAnchor(r)?(o.Adapter.trigger(e,"anchorchange"),o.busy(!1),!1):(i=o.extractState(o.getFullUrl(r||o.getLocationHref()),!0),o.isLastSavedState(i)?(o.busy(!1),!1):(s=o.getHashByState(i),a=o.discardedState(i),a?(o.getHashByIndex(-2)===o.getHashByState(a.forwardState)?o.back(!1):o.forward(!1),!1):(o.pushState(i.data,i.title,encodeURI(i.url),!1),!0))))},o.Adapter.bind(e,"hashchange",o.onHashChange),o.pushState=function(t,n,r,i){r=encodeURI(r).replace(/%25/g,"%");if(o.getHashByUrl(r))throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");if(i!==!1&&o.busy())return o.pushQueue({scope:o,callback:o.pushState,args:arguments,queue:i}),!1;o.busy(!0);var s=o.createStateObject(t,n,r),u=o.getHashByState(s),a=o.getState(!1),f=o.getHashByState(a),l=o.getHash(),c=o.expectedStateId==s.id;return o.storeState(s),o.expectedStateId=s.id,o.recycleState(s),o.setTitle(s),u===f?(o.busy(!1),!1):(o.saveState(s),c||o.Adapter.trigger(e,"statechange"),!o.isHashEqual(u,l)&&!o.isHashEqual(u,o.getShortUrl(o.getLocationHref()))&&o.setHash(u,!1),o.busy(!1),!0)},o.replaceState=function(t,n,r,i){r=encodeURI(r).replace(/%25/g,"%");if(o.getHashByUrl(r))throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).");if(i!==!1&&o.busy())return o.pushQueue({scope:o,callback:o.replaceState,args:arguments,queue:i}),!1;o.busy(!0);var s=o.createStateObject(t,n,r),u=o.getHashByState(s),a=o.getState(!1),f=o.getHashByState(a),l=o.getStateByIndex(-2);return o.discardState(a,s,l),u===f?(o.storeState(s),o.expectedStateId=s.id,o.recycleState(s),o.setTitle(s),o.saveState(s),o.Adapter.trigger(e,"statechange"),o.busy(!1)):o.pushState(s.data,s.title,s.url,!1),!0}),o.emulated.pushState&&o.getHash()&&!o.emulated.hashChange&&o.Adapter.onDomLoad(function(){o.Adapter.trigger(e,"hashchange")})},typeof o.init!="undefined"&&o.init()}(window),function(e,t){"use strict";var n=e.console||t,r=e.document,i=e.navigator,s=e.sessionStorage||!1,o=e.setTimeout,u=e.clearTimeout,a=e.setInterval,f=e.clearInterval,l=e.JSON,c=e.alert,h=e.History=e.History||{},p=e.history;try{s.setItem("TEST","1"),s.removeItem("TEST")}catch(d){s=!1}l.stringify=l.stringify||l.encode,l.parse=l.parse||l.decode;if(typeof h.init!="undefined")throw new Error("History.js Core has already been loaded...");h.init=function(e){return typeof h.Adapter=="undefined"?!1:(typeof h.initCore!="undefined"&&h.initCore(),typeof h.initHtml4!="undefined"&&h.initHtml4(),!0)},h.initCore=function(d){if(typeof h.initCore.initialized!="undefined")return!1;h.initCore.initialized=!0,h.options=h.options||{},h.options.hashChangeInterval=h.options.hashChangeInterval||100,h.options.safariPollInterval=h.options.safariPollInterval||500,h.options.doubleCheckInterval=h.options.doubleCheckInterval||500,h.options.disableSuid=h.options.disableSuid||!1,h.options.storeInterval=h.options.storeInterval||1e3,h.options.busyDelay=h.options.busyDelay||250,h.options.debug=h.options.debug||!1,h.options.initialTitle=h.options.initialTitle||r.title,h.options.html4Mode=h.options.html4Mode||!1,h.options.delayInit=h.options.delayInit||!1,h.intervalList=[],h.clearAllIntervals=function(){var e,t=h.intervalList;if(typeof t!="undefined"&&t!==null){for(e=0;e<t.length;e++)f(t[e]);h.intervalList=null}},h.debug=function(){(h.options.debug||!1)&&h.log.apply(h,arguments)},h.log=function(){var e=typeof n!="undefined"&&typeof n.log!="undefined"&&typeof n.log.apply!="undefined",t=r.getElementById("log"),i,s,o,u,a;e?(u=Array.prototype.slice.call(arguments),i=u.shift(),typeof n.debug!="undefined"?n.debug.apply(n,[i,u]):n.log.apply(n,[i,u])):i="\n"+arguments[0]+"\n";for(s=1,o=arguments.length;s<o;++s){a=arguments[s];if(typeof a=="object"&&typeof l!="undefined")try{a=l.stringify(a)}catch(f){}i+="\n"+a+"\n"}return t?(t.value+=i+"\n-----\n",t.scrollTop=t.scrollHeight-t.clientHeight):e||c(i),!0},h.getInternetExplorerMajorVersion=function(){var e=h.getInternetExplorerMajorVersion.cached=typeof h.getInternetExplorerMajorVersion.cached!="undefined"?h.getInternetExplorerMajorVersion.cached:function(){var e=3,t=r.createElement("div"),n=t.getElementsByTagName("i");while((t.innerHTML="<!--[if gt IE "+ ++e+"]><i></i><![endif]-->")&&n[0]);return e>4?e:!1}();return e},h.isInternetExplorer=function(){var e=h.isInternetExplorer.cached=typeof h.isInternetExplorer.cached!="undefined"?h.isInternetExplorer.cached:Boolean(h.getInternetExplorerMajorVersion());return e},h.options.html4Mode?h.emulated={pushState:!0,hashChange:!0}:h.emulated={pushState:!Boolean(e.history&&e.history.pushState&&e.history.replaceState&&!/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(i.userAgent)&&!/AppleWebKit\/5([0-2]|3[0-2])/i.test(i.userAgent)),hashChange:Boolean(!("onhashchange"in e||"onhashchange"in r)||h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<8)},h.enabled=!h.emulated.pushState,h.bugs={setHash:Boolean(!h.emulated.pushState&&i.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(i.userAgent)),safariPoll:Boolean(!h.emulated.pushState&&i.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(i.userAgent)),ieDoubleCheck:Boolean(h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<8),hashEscape:Boolean(h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<7)},h.isEmptyObject=function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0},h.cloneObject=function(e){var t,n;return e?(t=l.stringify(e),n=l.parse(t)):n={},n},h.getRootUrl=function(){var e=r.location.protocol+"//"+(r.location.hostname||r.location.host);if(r.location.port||!1)e+=":"+r.location.port;return e+="/",e},h.getBaseHref=function(){var e=r.getElementsByTagName("base"),t=null,n="";return e.length===1&&(t=e[0],n=t.href.replace(/[^\/]+$/,"")),n=n.replace(/\/+$/,""),n&&(n+="/"),n},h.getBaseUrl=function(){var e=h.getBaseHref()||h.getBasePageUrl()||h.getRootUrl();return e},h.getPageUrl=function(){var e=h.getState(!1,!1),t=(e||{}).url||h.getLocationHref(),n;return n=t.replace(/\/+$/,"").replace(/[^\/]+$/,function(e,t,n){return/\./.test(e)?e:e+"/"}),n},h.getBasePageUrl=function(){var e=h.getLocationHref().replace(/[#\?].*/,"").replace(/[^\/]+$/,function(e,t,n){return/[^\/]$/.test(e)?"":e}).replace(/\/+$/,"")+"/";return e},h.getFullUrl=function(e,t){var n=e,r=e.substring(0,1);return t=typeof t=="undefined"?!0:t,/[a-z]+\:\/\//.test(e)||(r==="/"?n=h.getRootUrl()+e.replace(/^\/+/,""):r==="#"?n=h.getPageUrl().replace(/#.*/,"")+e:r==="?"?n=h.getPageUrl().replace(/[\?#].*/,"")+e:t?n=h.getBaseUrl()+e.replace(/^(\.\/)+/,""):n=h.getBasePageUrl()+e.replace(/^(\.\/)+/,"")),n.replace(/\#$/,"")},h.getShortUrl=function(e){var t=e,n=h.getBaseUrl(),r=h.getRootUrl();return h.emulated.pushState&&(t=t.replace(n,"")),t=t.replace(r,"/"),h.isTraditionalAnchor(t)&&(t="./"+t),t=t.replace(/^(\.\/)+/g,"./").replace(/\#$/,""),t},h.getLocationHref=function(e){return e=e||r,e.URL===e.location.href?e.location.href:e.location.href===decodeURIComponent(e.URL)?e.URL:e.location.hash&&decodeURIComponent(e.location.href.replace(/^[^#]+/,""))===e.location.hash?e.location.href:e.URL.indexOf("#")==-1&&e.location.href.indexOf("#")!=-1?e.location.href:e.URL||e.location.href},h.store={},h.idToState=h.idToState||{},h.stateToId=h.stateToId||{},h.urlToId=h.urlToId||{},h.storedStates=h.storedStates||[],h.savedStates=h.savedStates||[],h.normalizeStore=function(){h.store.idToState=h.store.idToState||{},h.store.urlToId=h.store.urlToId||{},h.store.stateToId=h.store.stateToId||{}},h.getState=function(e,t){typeof e=="undefined"&&(e=!0),typeof t=="undefined"&&(t=!0);var n=h.getLastSavedState();return!n&&t&&(n=h.createStateObject()),e&&(n=h.cloneObject(n),n.url=n.cleanUrl||n.url),n},h.getIdByState=function(e){var t=h.extractId(e.url),n;if(!t){n=h.getStateString(e);if(typeof h.stateToId[n]!="undefined")t=h.stateToId[n];else if(typeof h.store.stateToId[n]!="undefined")t=h.store.stateToId[n];else{for(;;){t=(new Date).getTime()+String(Math.random()).replace(/\D/g,"");if(typeof h.idToState[t]=="undefined"&&typeof h.store.idToState[t]=="undefined")break}h.stateToId[n]=t,h.idToState[t]=e}}return t},h.normalizeState=function(e){var t,n;if(!e||typeof e!="object")e={};if(typeof e.normalized!="undefined")return e;if(!e.data||typeof e.data!="object")e.data={};return t={},t.normalized=!0,t.title=e.title||"",t.url=h.getFullUrl(e.url?e.url:h.getLocationHref()),t.hash=h.getShortUrl(t.url),t.data=h.cloneObject(e.data),t.id=h.getIdByState(t),t.cleanUrl=t.url.replace(/\??\&_suid.*/,""),t.url=t.cleanUrl,n=!h.isEmptyObject(t.data),(t.title||n)&&h.options.disableSuid!==!0&&(t.hash=h.getShortUrl(t.url).replace(/\??\&_suid.*/,""),/\?/.test(t.hash)||(t.hash+="?"),t.hash+="&_suid="+t.id),t.hashedUrl=h.getFullUrl(t.hash),(h.emulated.pushState||h.bugs.safariPoll)&&h.hasUrlDuplicate(t)&&(t.url=t.hashedUrl),t},h.createStateObject=function(e,t,n){var r={data:e,title:t,url:n};return r=h.normalizeState(r),r},h.getStateById=function(e){e=String(e);var n=h.idToState[e]||h.store.idToState[e]||t;return n},h.getStateString=function(e){var t,n,r;return t=h.normalizeState(e),n={data:t.data,title:e.title,url:e.url},r=l.stringify(n),r},h.getStateId=function(e){var t,n;return t=h.normalizeState(e),n=t.id,n},h.getHashByState=function(e){var t,n;return t=h.normalizeState(e),n=t.hash,n},h.extractId=function(e){var t,n,r,i;return e.indexOf("#")!=-1?i=e.split("#")[0]:i=e,n=/(.*)\&_suid=([0-9]+)$/.exec(i),r=n?n[1]||e:e,t=n?String(n[2]||""):"",t||!1},h.isTraditionalAnchor=function(e){var t=!/[\/\?\.]/.test(e);return t},h.extractState=function(e,t){var n=null,r,i;return t=t||!1,r=h.extractId(e),r&&(n=h.getStateById(r)),n||(i=h.getFullUrl(e),r=h.getIdByUrl(i)||!1,r&&(n=h.getStateById(r)),!n&&t&&!h.isTraditionalAnchor(e)&&(n=h.createStateObject(null,null,i))),n},h.getIdByUrl=function(e){var n=h.urlToId[e]||h.store.urlToId[e]||t;return n},h.getLastSavedState=function(){return h.savedStates[h.savedStates.length-1]||t},h.getLastStoredState=function(){return h.storedStates[h.storedStates.length-1]||t},h.hasUrlDuplicate=function(e){var t=!1,n;return n=h.extractState(e.url),t=n&&n.id!==e.id,t},h.storeState=function(e){return h.urlToId[e.url]=e.id,h.storedStates.push(h.cloneObject(e)),e},h.isLastSavedState=function(e){var t=!1,n,r,i;return h.savedStates.length&&(n=e.id,r=h.getLastSavedState(),i=r.id,t=n===i),t},h.saveState=function(e){return h.isLastSavedState(e)?!1:(h.savedStates.push(h.cloneObject(e)),!0)},h.getStateByIndex=function(e){var t=null;return typeof e=="undefined"?t=h.savedStates[h.savedStates.length-1]:e<0?t=h.savedStates[h.savedStates.length+e]:t=h.savedStates[e],t},h.getCurrentIndex=function(){var e=null;return h.savedStates.length<1?e=0:e=h.savedStates.length-1,e},h.getHash=function(e){var t=h.getLocationHref(e),n;return n=h.getHashByUrl(t),n},h.unescapeHash=function(e){var t=h.normalizeHash(e);return t=decodeURIComponent(t),t},h.normalizeHash=function(e){var t=e.replace(/[^#]*#/,"").replace(/#.*/,"");return t},h.setHash=function(e,t){var n,i;return t!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.setHash,args:arguments,queue:t}),!1):(h.busy(!0),n=h.extractState(e,!0),n&&!h.emulated.pushState?h.pushState(n.data,n.title,n.url,!1):h.getHash()!==e&&(h.bugs.setHash?(i=h.getPageUrl(),h.pushState(null,null,i+"#"+e,!1)):r.location.hash=e),h)},h.escapeHash=function(t){var n=h.normalizeHash(t);return n=e.encodeURIComponent(n),h.bugs.hashEscape||(n=n.replace(/\%21/g,"!").replace(/\%26/g,"&").replace(/\%3D/g,"=").replace(/\%3F/g,"?")),n},h.getHashByUrl=function(e){var t=String(e).replace(/([^#]*)#?([^#]*)#?(.*)/,"$2");return t=h.unescapeHash(t),t},h.setTitle=function(e){var t=e.title,n;t||(n=h.getStateByIndex(0),n&&n.url===e.url&&(t=n.title||h.options.initialTitle));try{r.getElementsByTagName("title")[0].innerHTML=t.replace("<","&lt;").replace(">","&gt;").replace(" & "," &amp; ")}catch(i){}return r.title=t,h},h.queues=[],h.busy=function(e){typeof e!="undefined"?h.busy.flag=e:typeof h.busy.flag=="undefined"&&(h.busy.flag=!1);if(!h.busy.flag){u(h.busy.timeout);var t=function(){var e,n,r;if(h.busy.flag)return;for(e=h.queues.length-1;e>=0;--e){n=h.queues[e];if(n.length===0)continue;r=n.shift(),h.fireQueueItem(r),h.busy.timeout=o(t,h.options.busyDelay)}};h.busy.timeout=o(t,h.options.busyDelay)}return h.busy.flag},h.busy.flag=!1,h.fireQueueItem=function(e){return e.callback.apply(e.scope||h,e.args||[])},h.pushQueue=function(e){return h.queues[e.queue||0]=h.queues[e.queue||0]||[],h.queues[e.queue||0].push(e),h},h.queue=function(e,t){return typeof e=="function"&&(e={callback:e}),typeof t!="undefined"&&(e.queue=t),h.busy()?h.pushQueue(e):h.fireQueueItem(e),h},h.clearQueue=function(){return h.busy.flag=!1,h.queues=[],h},h.stateChanged=!1,h.doubleChecker=!1,h.doubleCheckComplete=function(){return h.stateChanged=!0,h.doubleCheckClear(),h},h.doubleCheckClear=function(){return h.doubleChecker&&(u(h.doubleChecker),h.doubleChecker=!1),h},h.doubleCheck=function(e){return h.stateChanged=!1,h.doubleCheckClear(),h.bugs.ieDoubleCheck&&(h.doubleChecker=o(function(){return h.doubleCheckClear(),h.stateChanged||e(),!0},h.options.doubleCheckInterval)),h},h.safariStatePoll=function(){var t=h.extractState(h.getLocationHref()),n;if(!h.isLastSavedState(t))return n=t,n||(n=h.createStateObject()),h.Adapter.trigger(e,"popstate"),h;return},h.back=function(e){return e!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.back,args:arguments,queue:e}),!1):(h.busy(!0),h.doubleCheck(function(){h.back(!1)}),p.go(-1),!0)},h.forward=function(e){return e!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.forward,args:arguments,queue:e}),!1):(h.busy(!0),h.doubleCheck(function(){h.forward(!1)}),p.go(1),!0)},h.go=function(e,t){var n;if(e>0)for(n=1;n<=e;++n)h.forward(t);else{if(!(e<0))throw new Error("History.go: History.go requires a positive or negative integer passed.");for(n=-1;n>=e;--n)h.back(t)}return h};if(h.emulated.pushState){var v=function(){};h.pushState=h.pushState||v,h.replaceState=h.replaceState||v}else h.onPopState=function(t,n){var r=!1,i=!1,s,o;return h.doubleCheckComplete(),s=h.getHash(),s?(o=h.extractState(s||h.getLocationHref(),!0),o?h.replaceState(o.data,o.title,o.url,!1):(h.Adapter.trigger(e,"anchorchange"),h.busy(!1)),h.expectedStateId=!1,!1):(r=h.Adapter.extractEventData("state",t,n)||!1,r?i=h.getStateById(r):h.expectedStateId?i=h.getStateById(h.expectedStateId):i=h.extractState(h.getLocationHref()),i||(i=h.createStateObject(null,null,h.getLocationHref())),h.expectedStateId=!1,h.isLastSavedState(i)?(h.busy(!1),!1):(h.storeState(i),h.saveState(i),h.setTitle(i),h.Adapter.trigger(e,"statechange"),h.busy(!1),!0))},h.Adapter.bind(e,"popstate",h.onPopState),h.pushState=function(t,n,r,i){if(h.getHashByUrl(r)&&h.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(i!==!1&&h.busy())return h.pushQueue({scope:h,callback:h.pushState,args:arguments,queue:i}),!1;h.busy(!0);var s=h.createStateObject(t,n,r);return h.isLastSavedState(s)?h.busy(!1):(h.storeState(s),h.expectedStateId=s.id,p.pushState(s.id,s.title,s.url),h.Adapter.trigger(e,"popstate")),!0},h.replaceState=function(t,n,r,i){if(h.getHashByUrl(r)&&h.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(i!==!1&&h.busy())return h.pushQueue({scope:h,callback:h.replaceState,args:arguments,queue:i}),!1;h.busy(!0);var s=h.createStateObject(t,n,r);return h.isLastSavedState(s)?h.busy(!1):(h.storeState(s),h.expectedStateId=s.id,p.replaceState(s.id,s.title,s.url),h.Adapter.trigger(e,"popstate")),!0};if(s){try{h.store=l.parse(s.getItem("History.store"))||{}}catch(m){h.store={}}h.normalizeStore()}else h.store={},h.normalizeStore();h.Adapter.bind(e,"unload",h.clearAllIntervals),h.saveState(h.storeState(h.extractState(h.getLocationHref(),!0))),s&&(h.onUnload=function(){var e,t,n;try{e=l.parse(s.getItem("History.store"))||{}}catch(r){e={}}e.idToState=e.idToState||{},e.urlToId=e.urlToId||{},e.stateToId=e.stateToId||{};for(t in h.idToState){if(!h.idToState.hasOwnProperty(t))continue;e.idToState[t]=h.idToState[t]}for(t in h.urlToId){if(!h.urlToId.hasOwnProperty(t))continue;e.urlToId[t]=h.urlToId[t]}for(t in h.stateToId){if(!h.stateToId.hasOwnProperty(t))continue;e.stateToId[t]=h.stateToId[t]}h.store=e,h.normalizeStore(),n=l.stringify(e);try{s.setItem("History.store",n)}catch(i){if(i.code!==DOMException.QUOTA_EXCEEDED_ERR)throw i;s.length&&(s.removeItem("History.store"),s.setItem("History.store",n))}},h.intervalList.push(a(h.onUnload,h.options.storeInterval)),h.Adapter.bind(e,"beforeunload",h.onUnload),h.Adapter.bind(e,"unload",h.onUnload));if(!h.emulated.pushState){h.bugs.safariPoll&&h.intervalList.push(a(h.safariStatePoll,h.options.safariPollInterval));if(i.vendor==="Apple Computer, Inc."||(i.appCodeName||"")==="Mozilla")h.Adapter.bind(e,"hashchange",function(){h.Adapter.trigger(e,"popstate")}),h.getHash()&&h.Adapter.onDomLoad(function(){h.Adapter.trigger(e,"hashchange")})}},(!h.options||!h.options.delayInit)&&h.init()}(window)
},{}],4:[function(require,module,exports){
/* globals VOUINS */
window.VOUINS = window.VOUINS || {};

// v102 multi-lang support
VOUINS.ootbLabelMap = {
    'Step': ['previousLabel', 'nextLabel', 'cancelLabel', 'saveLabel', 'completeLabel',
        'cancelMessage', 'saveMessage', 'completeMessage', 'instructionKey', 'chartLabel', 'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Text Block': ['textKey'],
    'Headline': ['labelKey'],
    'Submit': ['summaryLabel', 'submitLabel', 'reviseLabel','errorMessage:custom|n:message', 'errorMessage:default'],
    'DataRaptor Extract Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 
        'redirectNextLabel', 'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 
        'postMessage', 'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Remote Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel',
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Rest Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel',
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'DataRaptor Post Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 
        'redirectNextLabel', 'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 
        'postMessage', 'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Post to Object Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel',
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Done Action': ['consoleTabLabel', 'errorMessage:custom|n:message', 'errorMessage:default'],
    'Review Action': ['nextLabel', 'previousLabel', 'errorMessage:custom|n:message', 'errorMessage:default'],
    'Filter Block': ['buttonLabel'],
    'Calculation Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel',
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'PDF Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel','redirectNextLabel', 
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'DocuSign Envelope Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel', 
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'DocuSign Signature Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 
        'inProgressMessage', 'failureAbortMessage', 'postMessage', 'errorMessage:custom|n:message', 
        'errorMessage:default'
    ],
    'Type Ahead': ['newItemLabel'],
    'Email Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel','redirectNextLabel', 
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'DataRaptor Transform Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 
        'redirectNextLabel', 'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 
        'postMessage', 'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Matrix Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel', 
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Integration Procedure Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 
        'redirectNextLabel', 'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 
        'postMessage', 'errorMessage:custom|n:message', 'errorMessage:default'
    ],
    'Edit Block': ['newLabel', 'editLabel', 'deleteLabel'],
    'Delete Action': ['failureNextLabel', 'failureAbortLabel', 'failureGoBackLabel', 'redirectNextLabel', 
        'redirectPreviousLabel', 'inProgressMessage', 'failureAbortMessage', 'postMessage', 
        'remoteConfirmMsg', 'cancelLabel', 'subLabel'
    ],
    'Validation': ['messages|n:text'],
    'Checkbox': ['checkLabel', 'helpText'],
    'Email': ['ptrnErrText', 'helpText'],
    'Number': ['ptrnErrText', 'helpText'],
    'Password': ['ptrnErrText', 'helpText'],
    'Telephone':['ptrnErrText', 'helpText'],
    'Text': ['ptrnErrText', 'helpText'],
    'Text Area': ['ptrnErrText', 'helpText'],
    'URL':['ptrnErrText', 'helpText'],
    'Disclosure': ['checkLabel','textKey'],
    'Script': ['persistentComponent|n:label', 'consoleTabLabel','errorMessage:custom|n:message'],
    'Radio': ['options|n:value', 'helpText'],
    'Select': ['options|n:value', 'helpText'],
    'Multi-select': ['options|n:value', 'helpText'],
    'Radio Group' : ['options|n:value', 'radioLabels|n:value', 'helpText'],
    'File' : ['errorMessage:custom|n:message', 'errorMessage:default', 'helpText'],
    'Image' : ['errorMessage:custom|n:message', 'errorMessage:default', 'helpText'],
    'Lookup': ['errorMessage:custom|n:message', 'errorMessage:default', 'helpText'],
    'Currency': ['helpText'],
    'Date': ['helpText'],
    'Date/Time (Local)' : ['helpText'],
    'Time': ['helpText'],
    'Type Ahead': ['helpText'],
    'Range': ['helpText']
};

VOUINS.ootbLabelMap2 = ['subLabel','remoteConfirmMsg','cancelLabel'];
VOUINS.actionEleTypesBase = ['Remote Action', 'Rest Action', 'DataRaptor Extract Action', 'DataRaptor Post Action', 'Post to Object Action', 'Review Action', 'Done Action', 'Calculation Action', 'PDF Action', 'Set Values', 'Set Errors', 'DocuSign Envelope Action', 'DocuSign Signature Action', 'Email Action', 'DataRaptor Transform Action', 'Matrix Action', 'Integration Procedure Action'];
VOUINS.actionEleTypes = VOUINS.actionEleTypesBase.concat(['Delete Action']);

VOUINS.picklistEleList = ['Select', 'Multi-select', 'Radio'];

VOUINS.getPropToUpdate = function (prop, tokenList) {
    'use strict';
    for (var ind = 0; ind < tokenList.length - 1; ind++) {
        if (tokenList[ind].indexOf('|n') >= 0) {
            tokenList[ind] = tokenList[ind].slice(0, tokenList[ind].length - 2);
        }
        var buildupArray = [];
        if(!prop) return null; //property does not exist in object
        if (Array.isArray(prop)) {
            for (var j = 0; j < prop.length; j++) {
                prop[j] = prop[j][tokenList[ind]];
                if (Array.isArray(prop[j])) {
                    for (var k = 0; k < prop[j].length; k++) {
                        buildupArray.push(prop[j][k]);
                    }
                }
            }
        } else {
            if(prop) {
                prop = prop[tokenList[ind]];
            }
            if (Array.isArray(prop)) {
                for (var l = 0; l < prop.length; l++) {
                    buildupArray.push(prop[l]);
                }
            }
        }
        if (buildupArray.length > 0) {
            prop = buildupArray;
        }
    }
    return prop;
};

/*

Input
    prop : any object
    tokenstr : path syntax used such as :   abc|n:efg
               where abc is a key of the prop object, 
               abc's key is associated with a value of type array (hence the |n)
               n is a digit >= 0
               efg is a property of the object contained inside the array

Output
    pathList : an array of object paths that match the pathStr
*/
VOUINS.createPropPaths = function (prop, pathStr) {
    'use strict';
    var path = "";
    var pathList = [];

    if(typeof pathStr !== "string") return pathList;

    // swap n with regex \d to match digits
    pathStr = pathStr.replace(/[|]n/g,'|\\d');
    // escape the pipe to prevent false positive matches
    pathStr = pathStr.replace(/[|]/g,'\[\|\]');
    var pathStrRegex = new RegExp('^' + pathStr + '$');

    var flatten = function(prop, path) {
        if(!prop)
            return path;

        var keys = Object.keys(prop);
        for(var i = 0; i < keys.length; i++) {
            if(typeof prop[keys[i]] === "object") {
                var symbol = Array.isArray(prop[keys[i]]) ? "|" : ":";
                flatten(prop[keys[i]], path + keys[i] + symbol);
            }
            else {
                var pathFlat = path + keys[i];
                if(pathStrRegex.test(pathFlat)) {
                    pathList.push(pathFlat);
                }
            }
        }

    }

    flatten(prop, path);

    return pathList;
}

},{}],5:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('datasourceProperty', {
            templateUrl: 'propertysets/datasource.tpl.html',
            controller: DataSourcePropertyController,
            controllerAs: 'vm',
            bindings: {
                datasource: '<',
                scriptElement: '<'
            }
        });

    DataSourcePropertyController.$inject = ['remoteActions','sObjectService','propCompUtil'];
    function DataSourcePropertyController(remoteActions, sObjectService, propCompUtil) {
        var vm = this;
        propCompUtil.baseConstructor.apply(vm);

        vm.$onInit = function() {
            loadFieldsForExistingData();
        };

        function loadFieldsForExistingData() {
            if (vm.datasource && vm.datasource.mapItems && vm.datasource.mapItems.phase1MapItems) {
                if (vm.sobjectTypes) {
                    vm.datasource.mapItems.phase1MapItems.forEach(function(object) {
                        vm.loadFieldsFor(object.InterfaceObjectName__c);
                    });
                }
            }
        }

        vm.filterOptions = [
            '=', '<', '>', '<=', '>=',
            'LIKE', 'NOT LIKE', '<>', 'INCLUDES', 'EXCLUDES'
        ];
        vm.allFieldsForObjects = {};

        sObjectService.getSObjects().then(function (allObjects) {
            vm.sobjectTypes = allObjects;
            loadFieldsForExistingData();
            if (vm.sobjectTypes.length > 0) {
                vm.loadFieldsFor(vm.sobjectTypes[0].name);
            }
        });

        vm.loadFieldsFor = function (object) {
            remoteActions.getFieldsForObject(object).then(function (fields) {
                vm.allFieldsForObjects[object] = fields;
            });
        };

        vm.addNewInputParameter = function(inputParamArray) {
            inputParamArray.push({
                'inputParam': '',
                'element': ''
            });
        };

        vm.getAllFieldsForObjects = function (obj) {
            if (vm.allFieldsForObjects[obj]) {
                return Object.keys(vm.allFieldsForObjects[obj]);
            }
            return [];
        };

        vm.deleteInputParameter = function (inputParam, inputParamArray) {
            inputParamArray.splice(inputParamArray.indexOf(inputParam), 1);
        };

        vm.addNewMapping = function (mappingArray) {
            mappingArray.push({
                'InterfaceObjectLookupOrder__c': 1,
                'InterfaceObjectName__c': '',
                'DomainObjectFieldAPIName__c': '',
                'FilterValue__c': '',
                'InterfaceFieldAPIName__c': '',
                'FilterOperator__c': '='
            });
        };

        vm.deleteMapping = function (mapping, mappingArray) {
            mappingArray.splice(mappingArray.indexOf(mapping), 1);
            if (mappingArray.length === 0) {
                vm.addNewMapping(mappingArray);
            }
        };
    }
})();

},{}],6:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('dataraptorSelect', {
            templateUrl: 'propertysets/dataraptorselect.tpl.html',
            controller: DataraptorSelectPropertyController,
            require: {
                ngModel: "ngModel"
            },
            controllerAs: 'vm',
            bindings: {
                scriptElement: '<',
                ngDisabled: '<',
                type: '@',
                inputType: '@',
                outputType: '@',
                includeInputJson: '@',
                idPrefix: '@',
                mode: '@'
            }
        });

    DataraptorSelectPropertyController.$inject = ['dataraptorBundleService', '$q', 'remoteActions', '$dataraptor'];

    function DataraptorSelectPropertyController(dataraptorBundleService, $q, remoteActions, $dataraptor) {
        var vm = this;

        vm.$onInit = function () {
            var ngModel = vm.ngModel;
            ngModel.$viewChangeListeners.push(onChange);
            ngModel.$render = onChange;
        };

        vm.$onChanges = function (changes) {
            vm.modelValue = vm.ngModel.$modelValue;
        }

        function onChange() {
            vm.modelValue = vm.ngModel.$modelValue;
        }

        vm.updateParentModel = function () {
            if (vm.modelValue !== '+ Create New DataRaptor') {
                vm.ngModel.$setViewValue(vm.modelValue);
                return;
            }

            createNewDataRaptor(vm.ngModel.$modelValue);
        };

        vm.openDR = function ($event) {
            vm.loading = true;
            getMatchingDRBundles(vm.modelValue, vm.type)
                .then(function (bundles) {
                    var bundle = bundles.find(function (bundle) {
                        return bundle.Name === vm.modelValue;
                    });
                    if (!bundle) {
                        alert('Dataraptor named "' + vm.modelValue + '" does not exist in this org.');
                        vm.loading = false;
                        return;
                    }
                    var id = bundle;
                    doWindowOpen('/apex/' + window.ns + 'DRMapper?id=' + bundle.Id, $event);
                    vm.loading = false;
                })
                .catch(function (error) {
                    vm.loading = false;
                });
        }

        function doWindowOpen(url, $event) {
            window.vlocityOpenUrl(url, $event, true);
        }

        vm.handleBlur = function (value) {
            if (vm.drBundles) {
                var match;
                vm.drBundles.forEach(function (item) {
                    if (item.Name === value) {
                        match = item;
                    }
                });
                if (match) {
                    vm.ngModel.$setViewValue(value);
                } else {
                    vm.ngModel.$setViewValue(null);
                }
            }
        }

        vm.getBundles = function (value) {
            vm.loading = true;
            return getMatchingDRBundles(value, vm.type)
                .then(function (results) {
                    vm.loading = false;
                    vm.drBundles = results;
                    if (vm.drBundles)
                        return results.concat({
                            Name: '+ Create New DataRaptor',
                            Id: '+ Create New DataRaptor'
                        });
                })
                .catch(function (error) {
                    vm.loading = false;
                    throw error;
                });
        };

        function getMatchingDRBundles(value, type) {
            var requiredTypes = type ? [type] : [];
            if (type === 'Extract') {
                requiredTypes.push('Extract (JSON)');
            } else if (type === 'Turbo Extract') {
                requiredTypes.push('Turbo Extract');
            } else if (type === 'Load') {
                requiredTypes.push('Load (JSON)');
            }

            return dataraptorBundleService.getMatchingDRBundles(value, requiredTypes);
        }

        function createNewDataRaptor(originalValue) {
            var newName = prompt('Please enter a new name for the DataRaptor interface', '');
            if (newName === '' && !isSafari()) {
                alert('Please enter a Name');
                createNewDataRaptor(originalValue);
            } else if (!/^[a-zA-Z0-9\s-_]+$/.test(newName) && newName && newName.length > 0) {
                alert('This interface name can only contain letters, numbers and spaces. Please choose a different name.');
                createNewDataRaptor(originalValue);
                return;
            } else if (newName !== null && !(newName === '' && isSafari())) {
                vm.loading = true;
                // ensure drbundle doesn't exist
                getMatchingDRBundles(newName, null)
                    .then(function (bundles) {
                        var found = false;
                        bundles.forEach(function (bundle) {
                            found = (found || bundle.Name == newName);
                            if (found) {
                                return false;
                            }
                        });
                        if (found) {
                            alert('This name is already in use. Please enter a different name');
                            createNewDataRaptor(originalValue);
                            vm.loading = false;
                            return;
                        }
                        var prePromise = $q.when(null);
                        if (vm.includeInputJson) {
                            prePromise = remoteActions.viewFullDataJson(vm.scriptElement.Id)
                                .then(function (omniScriptResult) {
                                    return omniScriptResult.replace(/&quot;/g, '"');
                                });
                        }

                        prePromise.then(function (json) {
                            return $dataraptor.createNewBundle({
                                'Name': newName,
                                'Type': vm.type,
                                'InterfaceObject': 'json',
                                'InputJson': json,
                                'InputType': vm.inputType || 'JSON',
                                'OutputType': vm.outputType || 'JSON'
                            });
                        }).then(function (bundle) {
                            vm.ngModel.$setViewValue(newName);
                            vm.modelValue = newName;
                            vm.openDR(null);
                            vm.loading = false;
                            return bundle;
                        })
                            .catch(function (error) {
                                vm.loading = false;
                            })
                    });
            } else {
                vm.ngModel.$setViewValue(originalValue);
                vm.modelValue = originalValue;
            }
        }

    }
})();

},{}],7:[function(require,module,exports){
(function () {
    'use strict';

    // Usage:
    //
    // Creates:
    //

    angular
        .module('omniscriptDesigner')
        .component('arrayListProp', {
            templateUrl: 'propertysets/common/array-list.tpl.html',
            controller: ArrayListController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                label: '@',
                addBtnLabel: '@',
                ngDisabled: '=',
                ngModel: '<'
            }
        });

    ArrayListController.$inject = [];

    function ArrayListController() {
        var vm = this;

        vm.$onChanges = function (changes) {
            if (!vm.addBtnLabel) {
                vm.addBtnLabel = 'Add New Value';
            }
        }

        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        };

        vm.add = function () {
            vm.ngModel.push(null);
        }

        vm.remove = function (index) {
            vm.ngModel.splice(index, 1);
        }
    }
})();

},{}],8:[function(require,module,exports){
(function() {
    'use strict';

    // Usage:
    //
    // Creates:
    //

    angular
        .module('omniscriptDesigner')
        .component('checkboxProp', {
            templateUrl: 'propertysets/common/checkbox.tpl.html',
            controller: CheckboxController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                label: '@',
                helpText: '@',
                ngDisabled: '=',
                ngModel: '<'
            }
        });

    CheckboxController.$inject = [];
    function CheckboxController() {
        var vm = this;
        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        };
    }
})();

},{}],9:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('elementNameProp', {
            templateUrl: 'propertysets/common/element-name.tpl.html',
            controller: ElementNameController,
            controllerAs: 'vm',
            require: {
                form: '^form',
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                ngDisabled: '=',
                ngModel: '<'
            }
        });

    ElementNameController.$inject = [];
    function ElementNameController() {
        var vm = this;
        vm.isValidHTMLId = true;

        var validHtmlIdRegex = /^[A-Za-z]+[\/\w\ \-\:\.]*$/;

        vm.$onInit = function () {
            isValid();
        }

        vm.$onChanges = function (changes) {
            isValid();
        }
        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
            isValid();
        };

        function isValid() {
            vm.isValidHTMLId = validHtmlIdRegex.test(vm.ngModel)
        }
    }
})();

},{}],10:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('errormessageHandler', {
            templateUrl: 'propertysets/common/errormessage-handler.tpl.html',
            controller: ErrorMessageHandlerController,
            controllerAs: 'vm',
            bindings: {
                ngModel: '<',
                ngDisabled: '='
            }
        });

    ErrorMessageHandlerController.$inject = [];

    function ErrorMessageHandlerController() {
        var vm = this;

        vm.$onInit = function () {
            vm.errorMessages = vm.ngModel;
        }

        vm.$onChanges = function (changes) {
            if (changes.ngModel) {
                vm.errorMessages = vm.ngModel;
            }
        }

        vm.addNewErrorMessage = function () {
            vm.errorMessages.custom.push({
                path: '',
                value: '',
                message: ''
            });
        };

        vm.deleteErrorMessage = function (option) {
            vm.errorMessages.custom.splice(vm.errorMessages.custom.indexOf(option), 1);
        };
    }
})();

},{}],11:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('groupProp', {
            templateUrl: 'propertysets/common/group.tpl.html',
            controller: GroupController,
            controllerAs: 'vm',
            transclude: true,
            bindings: {
                label: '@',
                helpText: '@',
                isOpen: '@'
            }
        });

    GroupController.$inject = [];

    function GroupController() {
        var vm = this;
        vm.isOpen = false;
    }
})();

},{}],12:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('htmlTemplateIdProp', {
            templateUrl: 'propertysets/common/html-template-id.tpl.html',
            controller: HtmlTemplateIdController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                ngDisabled: '=',
                ngModel: '<',
                scriptElement: '<',
                hideLabel: '<'
            }
        });

    HtmlTemplateIdController.$inject = ['$window', 'vlocityUiTemplateService'];
    function HtmlTemplateIdController($window, vlocityUiTemplateService) {
        var vm = this;
        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        };

        vm.templateList = [];
        vm.templateMap = {};

        vm.getTemplates =  vlocityUiTemplateService.getGeneralTemplates;

        vm.openTemplate = function openTemplate($event, templateId) {
            $window.vlocityOpenUrl('/apex/' + $window.ns + 'UITemplateDesigner?name=' + templateId, $event, true);
        };

        vm.refreshTemplates = function(){
            vm.getTemplates().then(function(result){
                vm.templateMap = result;
                vm.templateList = vm.objectToKeyValueArray(result);
            });
        };

        vm.objectToKeyValueArray = function objectToKeyValueArray(map) {
            return Object.keys(map).filter(function (key) {
                if (!vm.ignoreKeys) {
                    return true;
                }
                return vm.ignoreKeys.indexOf(key) === -1;
            }).map(function (key) {
                return {
                    key: key,
                    value: map[key],
                    type: (typeof getType==="function"&&vm.getType(map[key]))||undefined
                };
            });
        };
        
        vm.refreshTemplates();
    }
})();

},{}],13:[function(require,module,exports){
(function () {
    'use strict';

    const properties = {
        templateUrl: 'propertysets/common/key-value.tpl.html',
        controller: KeyValueController,
        controllerAs: 'vm',
        require: {
            ngModelCtrl: 'ngModel'
        },
        transclude: true,
        bindings: {
            ngDisabled: '=',
            ngModel: '<',
            label: '@',
            helpText: '@',
            keyLabel: '@',
            valueLabel: '@',
            addBtnLabel: '@',
            idPrefix: '@',
            ignoreKeys: '<',
            scriptElement: '<',
            renderTemplateCell: '<',
            renderExpressionCell: '<'
        }
    };

    angular
        .module('omniscriptDesigner')
        .component('keyValueProp', properties);

    // This keyValuePropSmall is used on the LWC preview and has a different sizing of columns
    angular
        .module('omniscriptDesigner')
        .component('keyValueSmallProp', {
            ...properties,
            templateUrl: 'propertysets/common/key-value-small.tpl.html',
        });

    KeyValueController.$inject = ['$modal'];

    function KeyValueController($modal) {
        var vm = this;

        vm.$onChanges = function (changes) {
            if (!vm.ngModel) {
                vm.ngModel = {};
            }
            const newMap = vm.objectToKeyValueArray(vm.ngModel);
            if (!_.isEqual(newMap, vm.map)) {
                vm.map = newMap;
            }
            if (!vm.addBtnLabel) {
                vm.addBtnLabel = 'Add Key/Value Pair';
            }
        };

        vm.objectToKeyValueArray = function objectToKeyValueArray(map) {
            return Object.keys(map).filter(function (key) {
                if (!vm.ignoreKeys) {
                    return true;
                }

                return vm.ignoreKeys.indexOf(key) === -1;
            }).map(function (key) {
                return {
                    key: key,
                    value: map[key],
                    type: (typeof vm.getType === "function" && vm.getType(map[key])) || undefined
                };
            });
        }

        vm.getType = function (value) {
            if (vm.ngModel == null) {
                vm.type = 'text';
                return;
            }
            switch (typeof value) {
                case 'object':
                    if (Array.isArray(value)) {
                        return 'array';
                    }
                    return 'object';
                default:
                    return 'text';
            }
        };

        vm.addNewKeyValue = function () {
            vm.map.push({
                key: '',
                value: ''
            });
            vm.updateKeyValueProperty();
        };

        vm.deleteKeyValue = function (option) {
            vm.map.splice(vm.map.indexOf(option), 1);
            vm.updateKeyValueProperty();
        };

        vm.updateKeyValueProperty = function () {
            const baseObj = {};
            if (vm.ignoreKeys) {
                vm.ignoreKeys.forEach(function (key) {
                    baseObj[key] = vm.ngModel[key];
                });
            }
            const newValue = vm.map.reduce(function (obj, prop) {
                var value = prop.value;
                try {
                    value = JSON.parse(value);
                } catch (e) {
                    // try convert to a more appropriate type if possible.
                }
                obj[prop.key] = value;

                return obj;
            }, baseObj);
            vm.ngModel = newValue;
            vm.ngModelCtrl.$setViewValue(newValue);
        };

        vm.editAsExpression = function (property, expressionOnly) {
            var input = {};
            input.currentVal = property.value;
            if (typeof input.currentVal == "undefined") {
                input.currentVal = "";
            }
            input.elementNames = function () {
                return vm.elementNamesAsObject();
            };

            // delete leading '=' token
            if (!expressionOnly) {
                input.currentVal = String(property.value).replace(/(?:^\s*=)|(?:\s*$)/g, '');
            }
            $modal({
                title: 'Expression Editor',
                templateUrl: 'modal-edit-expression.tpl.html',
                backdrop: 'static',
                controller: function ($scope) {
                    $scope.obj = input;

                    $scope.obj.newVal = $scope.obj.currentVal;

                    $scope.cancel = function () {
                        $scope.$hide();
                    };

                    $scope.submit = function () {
                        if ($scope.obj.newVal || $scope.obj.newVal == 'false') {
                            property.value = '=' + $scope.obj.newVal;
                            vm.updateKeyValueProperty();
                        }
                        $scope.cancel();
                    };
                }
            });
        };
    }
})();

},{}],14:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('lwcOverrideProp', {
            templateUrl: 'propertysets/common/lwc-override.tpl.html',
            controller: LwcOverrideController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            transclude: true,
            bindings: {
                ngDisabled: '=',
                ngModel: '<',
                label: '@',
                helpText: '@',
                keyLabel: '@',
                valueLabel: '@',
                addBtnLabel: '@',
                idPrefix: '@',
                scriptElement: '<',
                options: '<'
            }
        });

    LwcOverrideController.$inject = ['lwcService', '$scope'];

    function LwcOverrideController(lwcService, $scope) {
        var vm = this;
        let timeout = undefined;

        lwcService.getLwcList().then(lwcs => {
            // Clone so we don't mess the list
            const values = [''].concat(lwcs);
            $scope.$apply(() => {
                vm.lwcList = values;
            });
        });

        vm.$onChanges = function () {
            if (!vm.ngModel) {
                vm.ngModel = {};
            }
            const newMap = vm.objectToKeyValueArray(vm.ngModel);
            if (!_.isEqual(newMap, vm.map)) {
                vm.map = newMap;
            }
            if (!vm.addBtnLabel) {
                vm.addBtnLabel = 'Add Key/Value Pair';
            }
        };

        vm.objectToKeyValueArray = function objectToKeyValueArray(map) {
            return Object.keys(map).map(function (key) {
                return {
                    key: key,
                    value: map[key]
                };
            });
        }

        vm.addNewKeyValue = function () {
            vm.map.push({
                key: '',
                value: ''
            });
            vm.updateKeyValueProperty();
        };

        vm.deleteKeyValue = function (option) {
            vm.map.splice(vm.map.indexOf(option), 1);
            vm.updateKeyValueProperty();
        };

        vm.updateKeyValueProperty = function () {
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(() => {
                const baseObj = {};
                const newValue = vm.map.reduce(function (obj, prop) {
                    var value = prop.value;
                    try {
                        value = JSON.parse(value);
                    } catch (e) {
                        // try convert to a more appropriate type if possible.
                    }
                    obj[prop.key] = value;

                    return obj;
                }, baseObj);
                vm.ngModel = newValue;
                vm.ngModelCtrl.$setViewValue(newValue);
            }, 500);
        };
    }
})();

},{}],15:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('lwcSelectionProp', {
            templateUrl: 'propertysets/common/lwc-selection.tpl.html',
            controller: LwcSelectionController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                ngDisabled: '=',
                ngModel: '<',
                scriptElement: '<'
            }
        });

    LwcSelectionController.$inject = ['lwcService', '$scope'];
    function LwcSelectionController(lwcService, $scope) {
        var vm = this;

        lwcService.getLwcList().then(lwcs => {
            // Clone so we don't mess the list
            const values = [''].concat(lwcs);
            $scope.$apply(() => {
                vm.lwcList = values;
            })
        });

        vm.updateModel = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        }
    }
})();

},{}],16:[function(require,module,exports){
(function () {
    'use strict';

    // Usage:
    //
    // Creates:
    //

    angular
        .module('omniscriptDesigner')
        .component('monacoEditorProp', {
            templateUrl: 'propertysets/common/monaco-editor-prop.tpl.html',
            controller: MonacoEditorController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                label: '@',
                ngDisabled: '=',
                ngModel: '<'
            }
        });

    MonacoEditorController.$inject = [];

    function MonacoEditorController() {
        var vm = this;

        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        };
    }
})();

},{}],17:[function(require,module,exports){
(function () {
    'use strict';

    // Usage:
    //
    // Creates:
    //

    angular
        .module('omniscriptDesigner')
        .component('patternProp', {
            templateUrl: 'propertysets/common/pattern.tpl.html',
            controller: PatternPropController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                label: '@',
                helpText: '@',
                ngDisabled: '=',
                ngModel: '=',
                lwcEnabled: '<',
                documentation: '@'
            }
        });

    PatternPropController.$inject = [];
    function PatternPropController() {
        this.$onInit = onInit;

        function onInit() {
            this.ngModelCtrl.$validators['Invalid Pattern'] = validatePattern.bind(this);
        }

        function validatePattern(modelValue) {
            let isValid = true;

            try {
                new RegExp(modelValue, 'u');
            } catch(err) {
                if (this.lwcEnabled)
                    isValid = false;
            }

            return isValid;
        }
    }
})();

},{}],18:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('showPersistentComponentProp', {
            templateUrl: 'propertysets/common/show-persistent-component.tpl.html',
            controller: ShowPersistentComponentController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                persistentComponent: '<',
                ngDisabled: '=',
                ngModel: '<'
            }
        });

    ShowPersistentComponentController.$inject = [];
    function ShowPersistentComponentController() {
        var vm = this;

        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        }

    }
})();

},{}],19:[function(require,module,exports){
(function () {
    'use strict';

    // Usage:
    //
    // Creates:
    //

    angular
        .module('omniscriptDesigner')
        .component('textProp', {
            templateUrl: 'propertysets/common/text.tpl.html',
            controller: TextController,
            controllerAs: 'vm',
            require: {
                ngModelCtrl: 'ngModel'
            },
            bindings: {
                label: '@',
                helpText: '@',
                placeholder: '@',
                ngDisabled: '=',
                ngModel: '<',
                documentation: '@'
            }
        });

    TextController.$inject = [];

    function TextController() {
        var vm = this;

        vm.$onChanges = function (changes) {
            if (vm.ngModel == null) {
                vm.type = 'text';
                return;
            }
            switch (typeof vm.ngModel) {
                case 'object':
                    if (Array.isArray(vm.ngModel)) {
                        vm.type = 'array';
                        break;
                    }
                    vm.type = 'object';
                    break;
                default:
                    vm.type = 'text';
            }
        };

        vm.ngModelChange = () => {
            vm.ngModelCtrl.$setViewValue(vm.ngModel);
        };
    }
})();

},{}],20:[function(require,module,exports){
require('./ArrayListProp.js');
require('./CheckboxProp.js');
require('./TextProp.js');
require('./PatternProp.js');
require('./ElementNameProp.js');
require('./GroupProp.js');
require('./HtmlTemplateIdProp.js');
require('./KeyValueProp.js');
require('./LwcOverrideProp.js');
require('./LwcSelectionProp.js');
require('./ShowPersistentComponentProp.js');
require('./MonacoEditorProp.js');
require('./ErrorMessageHandlerProp.js');
},{"./ArrayListProp.js":7,"./CheckboxProp.js":8,"./ElementNameProp.js":9,"./ErrorMessageHandlerProp.js":10,"./GroupProp.js":11,"./HtmlTemplateIdProp.js":12,"./KeyValueProp.js":13,"./LwcOverrideProp.js":14,"./LwcSelectionProp.js":15,"./MonacoEditorProp.js":16,"./PatternProp.js":17,"./ShowPersistentComponentProp.js":18,"./TextProp.js":19}],21:[function(require,module,exports){
var htmlEncodeDecode = require('../../../oui/util/HtmlEncodeDecode.js');

(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('integrationProcedurePropertySet', {
            templateUrl: 'propertysets/ips/integration-procedure.tpl.html',
            controller: IntegrationProcedurePropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "linkToExternalObject": "",
        "trackingCustomData": {},
        "includeAllActionsInResponse": false,
        "columnsPropertyMap": [],
        "relationshipFieldsMap": [],
        "labelSingular": "",
        "labelPlural": "",
        "description": "",
        "nameColumn": "",
        "rollbackOnError": false,
        "chainableQueriesLimit": 50,
        "chainableDMLStatementsLimit": null,
        "chainableCpuLimit": 2000,
        "chainableHeapSizeLimit": null,
        "chainableDMLRowsLimit": null,
        "chainableQueryRowsLimit": null,
        "chainableSoslQueriesLimit": null,
        "chainableActualTimeLimit": null,
        "additionalChainableResponse": {},
        "queueableChainableQueriesLimit": 120,
        "queueableChainableCpuLimit": 40000,
        "queueableChainableHeapSizeLimit": 6,
        "ttlMinutes": 5,
        "mockResponseMap": {}
    };

    IntegrationProcedurePropertySetController.$inject = ['propCompUtil', 'remoteActions', 'ScriptElementTypes', 'AvailableScriptTypesInit', 'sObjectService', 'IsFoundation', 'OmniScriptObjectName', 'OmniScriptFieldMappings', 'OmniScriptInstanceObjectName'];

    function IntegrationProcedurePropertySetController(propCompUtil, remoteActions, ScriptElementTypes, AvailableScriptTypesInit, sObjectService, IsFoundation, OmniScriptObjectName, OmniScriptFieldMappings, OmniScriptInstanceObjectName) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.types = [];
        vm.subtypes = [];
        vm.cacheTypes = ['', 'Session Cache', 'Org Cache'];
        vm.columnPropertyTypes = ['Boolean', 'Date/Time', 'Text', 'Number', 'Long text area', 'URL'];
        vm.relationshipTypes = ['External lookup relationship', 'Indirect lookup relationship',
            'Lookup relationship'
        ];
        vm.omniScriptInstanceObjectName = OmniScriptInstanceObjectName;
        vm.isFoundation = IsFoundation;
        vm.omniScriptObjectName = OmniScriptObjectName;
        vm.omniScriptFieldMappings = OmniScriptFieldMappings;

        sObjectService.getSObjects().then(function (allObjects) {
            vm.sobjectTypes = allObjects;
        });

        remoteActions.getExternalObjects().then(function (externalObjects) {
            vm.externalObjectTypes = externalObjects.sort(function (a, b) {
                return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
            });
        });

        addTypes(ScriptElementTypes, vm.types);
        // Load from Existing Scripts
        addTypes(AvailableScriptTypesInit, vm.types);

        function addTypes(types, target) {
            delete types['null'];
            delete types[''];
            var i = -1;
            Object.keys(types).forEach(function (property) {
                i = target.findIndex(equalsLabel, property);
                if (i == -1) {
                    i = target.length;
                    target[i] = {
                        label: htmlEncodeDecode.unescapeHTML(property),
                        value: htmlEncodeDecode.unescapeHTML(property),
                        $$subTypes: []
                    };
                }
                for (var y = 0; y < types[property].length; y++) {
                    types[property][y] = htmlEncodeDecode.unescapeHTML(types[property][y]);
                    if (target[i].$$subTypes.findIndex(equalsLabel, types[property][y]) === -1, types[property][y]) {
                        target[i].$$subTypes.push({
                            label: types[property][y],
                            value: types[property][y]
                        });
                    }
                }
                target[i].$$subTypes.sort(compareLabels);
            });
            target.sort(compareLabels);
        }

        function equalsLabel(a) {
            var label = typeof a == "string" ? a : a.label;
            return this && label == this || (typeof label == 'string' && typeof this == 'string' && label.trim() == this.trim());
        }

        function compareLabels(a, b) {
            return String(a.label).localeCompare(b.value);
        }

        vm.$onInit = function () {
            vm.element.PropertySet__c = Object.assign({}, _.cloneDeep(DEFAULT_PROP_SET), vm.element.PropertySet__c);
        };

        vm.handleTypeChange = function () {
            var matchingType = vm.types.find(function (type) {
                return type.value === vm.element.Type__c;
            });
            vm.subtypes = matchingType ? matchingType.$$subTypes : [];
            vm.element.SubType__c = null;
        };

        vm.openExternalObjects = function ($event) {
            window.vlocityOpenUrl('/p/setup/custent/ExternalObjectsPage', $event, true);
        };

        vm.addColumnsPropertyMap = function () {
            if (!vm.element.PropertySet__c.columnsPropertyMap) {
                vm.element.PropertySet__c.columnsPropertyMap = [];
            }
            vm.element.PropertySet__c.columnsPropertyMap.push({
                name: '',
                label: '',
                description: '',
                sortable: true,
                filterable: true,
                type: '',
                length: 255,
                decimalPlaces: 0
            });
        };

        vm.deleteColumnsPropertyMap = function (index) {
            vm.element.PropertySet__c.columnsPropertyMap.splice(index, 1);
        };

        vm.addRelationshipFieldsMap = function () {
            if (!vm.element.PropertySet__c.relationshipFieldsMap) {
                vm.element.PropertySet__c.relationshipFieldsMap = [];
            }
            vm.element.PropertySet__c.relationshipFieldsMap.push({
                name: '',
                label: '',
                description: '',
                sortable: true,
                filterable: true,
                type: '',
                length: 255,
                referenceTo: '',
                referenceTargetField: ''
            });
        };

        vm.deleteRelationshipFieldsMap = function (index) {
            vm.element.PropertySet__c.relationshipFieldsMap.splice(index, 1);
        };

        vm.validateIsTestChange = function (newValue) {
            if (!vm.element.IsTest__c && vm.containsAssertAction()) {
                setTimeout(() => {
                    vm.element.IsTest__c = true;
                });
                alert('You must remove all Assert Actions before disabling Is Test');
            }
        }

        vm.containsAssertAction = function () {
            var matchingElement = null;
            vm.scriptElement.each(function(element){
                if (element.Type__c === 'Assert Action' || element.Type__c.label === 'Assert Action') {
                    matchingElement = element;
                }
            });
            return !!matchingElement;
        }
    }
})();

},{"../../../oui/util/HtmlEncodeDecode.js":92}],22:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('assertActionPropertySet', {
            templateUrl: 'propertysets/ips/action/assert-action.tpl.html',
            controller: AssertActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "assertConditionalFormula": "",
        "assertFailureMessage": "",
        "executionConditionalFormula": "",
        "failOnStepError": true
    };

    AssertActionPropertySetController.$inject = ['propCompUtil', '$modal', 'remoteActions'];

    function AssertActionPropertySetController(propCompUtil, $modal, remoteActions) {
        var vm = this;
        vm.nsPrefix = fileNsPrefix();

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],23:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('batchActionPropertySet', {
            templateUrl: 'propertysets/ips/action/batch-action.tpl.html',
            controller: BatchActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "scheduledJobId": "",
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "chainOnStep": false,
        "actionMessage": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "batchOptions": {},
        "chainable": false,
        "listInput":""
    };

    BatchActionPropertySetController.$inject = ['propCompUtil', '$modal', 'remoteActions'];

    function BatchActionPropertySetController(propCompUtil, $modal, remoteActions) {
        var vm = this;
        vm.nsPrefix = fileNsPrefix();

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        remoteActions.GetScheduledJobs().then(function (scheduledJobs) {
            vm.scheduledJobs = scheduledJobs;
        });

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],24:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('calculationActionPropertySet', {
            templateUrl: 'propertysets/ips/action/calculation-action.tpl.html',
            controller: CalculationActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "remoteClass": fileNsPrefixDot() + "PricingMatrixCalculationService",
        "remoteMethod": "calculate",
        "remoteOptions": {
            "configurationName": ""
        },
        "chainOnStep": false,
        "actionMessage": ""
    };

    CalculationActionPropertySetController.$inject = ['propCompUtil', 'IsFoundation', 'bInteractionCalculation', 'remoteActions'];
    function CalculationActionPropertySetController(propCompUtil, IsFoundation, bInteractionCalculation, remoteActions) {
        var vm = this;

        vm._debounceValidateName = _.debounce(validateName, 400);

        // When bOmniStudio = false (i.e Existing customers) and InteractionCalculation permission is ON -
        // show the checkbox to enable usage of calculation BPOs
        vm.showUseExpressionSetCheckbox = !IsFoundation && bInteractionCalculation;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
            vm.calcId = null;
            vm.isFoundation = IsFoundation || (vm.showUseExpressionSetCheckbox && vm.element.PropertySet__c.useExpressionSet);
            if (vm.element.PropertySet__c.remoteOptions.configurationName) {
                validateName(vm.element.PropertySet__c.remoteOptions.configurationName);
            }
        }

        vm.calcNameChange = function() {
            vm.loading = true; 
            var name = vm.element.PropertySet__c.remoteOptions.configurationName;
            vm._debounceValidateName(name)
        }

        vm.useExpressionSet = function() {
            vm.element.PropertySet__c.remoteOptions.configurationName = '';
            vm.element.PropertySet__c.remoteClass = fileNsPrefixDot() + "PricingMatrixCalculationService";
            vm.element.PropertySet__c.remoteMethod = "calculate";
            vm.isFoundation = vm.element.PropertySet__c.useExpressionSet;
        }

        function validateName(name) {
            return remoteActions.getIdForCalculationByName2(name, vm.isFoundation)
                .then(function(id) {
                    if (name === vm.element.PropertySet__c.remoteOptions.configurationName) {
                        vm.calcId = id;
                    }
                })
                .finally(() => {
                    if (name === vm.element.PropertySet__c.remoteOptions.configurationName) {
                        vm.loading = false;
                    }
                });
        }

        function doWindowOpen(url, $event) {
            window.vlocityOpenUrl(url, $event, true);
        }

        vm.openCalc = function($event) {
            var promise = Promise.resolve();
            if (!vm.calcId) {
                promise = validateName(vm.element.PropertySet__c.remoteOptions.configurationName);
            }
            promise.then(() => {
                if (vm.calcId) {
                    doWindowOpen('/' + vm.calcId, $event);
                }
            })
        }
    }
})();

},{}],25:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('chatterActionPropertySet', {
            templateUrl: 'propertysets/ips/action/chatter-action.tpl.html',
            controller: ChatterActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "communityId": "",
        "subjectId": "",
        "mentionedUserId":"",
        "imageId":"",
        "markupType":"",
        "fileId":"",
        "text": "",
        "responseJSONPath":"",
        "responseJSONNode": "",
        "useFormulas": true,
        "returnOnlyAdditionalOutput": false,
        "additionalOutput": {},
        "returnOnlyFailureResponse": false,
        "failureResponse": {},
        "executionConditionalFormula": "",
        "failOnStepError": true,
        "failureConditionalFormula": "",
        "chainOnStep": false,
        "additionalChainableResponse": {},
        "actionMessage": ""
    };

    ChatterActionPropertySetController.$inject = ['propCompUtil', '$modal', 'remoteActions'];

    function ChatterActionPropertySetController(propCompUtil, $modal, remoteActions) {
        var vm = this;

        vm.markupTypes = ['', 'Bold', 'Italic', 'Underline'];

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],26:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('dataraptorExtractActionPropertySet', {
            templateUrl: 'propertysets/ips/action/dataraptor-extract-action.tpl.html',
            controller: DataraptorExtractActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "bundle": "",
        "dataRaptor Input Parameters": [],
        "chainOnStep": false,
        "actionMessage": "",
        "ignoreCache": false
    };

    DataraptorExtractActionPropertySetController.$inject = ['propCompUtil'];
    function DataraptorExtractActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        vm.deleteInputParameter = function (inputParam, inputParamArray) {
            inputParamArray.splice(inputParamArray.indexOf(inputParam), 1);
        };

        vm.addNewInputParameter = function(inputParamArray) {
            inputParamArray.push({
                'inputParam': '',
                'element': ''
            });
        };
    }
})();

},{}],27:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('dataraptorPostActionPropertySet', {
            templateUrl: 'propertysets/ips/action/dataraptor-post-action.tpl.html',
            controller: DataraptorPostActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "bundle": "",
        "chainOnStep": false,
        "actionMessage": ""
    };

    DataraptorPostActionPropertySetController.$inject = ['propCompUtil'];
    function DataraptorPostActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],28:[function(require,module,exports){
(function() {
    'use strict';


    angular
        .module('omniscriptDesigner')
        .component('dataraptorTransformActionPropertySet', {
            templateUrl: 'propertysets/ips/action/dataraptor-transform-action.tpl.html',
            controller: DataraptorTransformActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "bundle": "",
        "chainOnStep": false,
        "actionMessage": "",
        "ignoreCache": false
    };

    DataraptorTransformActionPropertySetController.$inject = ['propCompUtil'];
    function DataraptorTransformActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],29:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('deleteActionPropertySet', {
            templateUrl: 'propertysets/ips/action/delete-action.tpl.html',
            controller: DeleteActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "deleteSObject": [],
        "responseJSONPath": "",
        "responseJSONNode": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "additionalOutput": {},
        "failureResponse": {},
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "chainOnStep": false,
        "actionMessage": "",
        "allOrNone": false
    };

    DeleteActionPropertySetController.$inject = ['propCompUtil', 'sObjectService'];
    function DeleteActionPropertySetController(propCompUtil, sObjectService) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        sObjectService.getSObjects().then(function (allObjects) {
            vm.sobjectTypes = allObjects;
        });

        vm.addDeleteSObjectMap = function () {
            var obj = {
                Type: '',
                Id: '',
                AllOrNone : false
            };
            if (vm.element.PropertySet__c.deleteSObject) {
                vm.element.PropertySet__c.deleteSObject.push(obj);
            }
        };

        vm.deleteDeleteSObjectMap = function (ind) {
            if (vm.element.PropertySet__c.deleteSObject) {
                vm.element.PropertySet__c.deleteSObject.splice(ind, 1);
            }
        };
    }
})();

},{}],30:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('docusignEnvelopeActionPropertySet', {
            templateUrl: 'propertysets/ips/action/docusign-envelope-action.tpl.html',
            controller: DocusignEnvelopeActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "docuSignTemplatesGroup": [],
        "emailSubject": "",
        "emailBody": "",
        "dateFormat": "",
        "dateTimeFormat": "",
        "timeFormat": "",
        "validationRequired": "Step",
        "HTMLTemplateId": "",
        "chainOnStep": false,
        "actionMessage": ""
    };

    DocusignEnvelopeActionPropertySetController.$inject = ['propCompUtil', 'remoteActions', '$q', 'dataraptorBundleService'];

    function DocusignEnvelopeActionPropertySetController(propCompUtil, remoteActions, $q, dataraptorBundleService) {
        var vm = this;
        vm.nsPrefix = fileNsPrefix();
        vm.templateRolesByTemplate = {};

        getDocusignTemplates();

        vm.getBundles = function (value) {
            return dataraptorBundleService.getMatchingDRBundles(value, ["Transform"]);
        }

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));

            if (vm.element.PropertySet__c.docuSignTemplate) {
                const obj = {
                    docuSignTemplate: vm.element.PropertySet__c.docuSignTemplate,
                    transformBundle: vm.element.PropertySet__c.transformBundle,
                    sendJSONPath: vm.element.PropertySet__c.sendJSONPath,
                    sendJSONNode: vm.element.PropertySet__c.sendJSONNode,
                    signerList: vm.element.PropertySet__c.signerList || [],
                    includeToSend: true
                };
                vm.element.PropertySet__c.docuSignTemplatesGroup.push(obj);
                delete vm.element.PropertySet__c.signerList;
                delete vm.element.PropertySet__c.docuSignTemplate;
                delete vm.element.PropertySet__c.transformBundle;
                delete vm.element.PropertySet__c.sendJSONPath;
                delete vm.element.PropertySet__c.sendJSONNode;
            }
        }

        function getDocusignTemplates() {
            if (vm.docuSignTemplates) {
                return $q.when(vm.docuSignTemplates);
            }
            return remoteActions.getDocuSignFieldMap().then(function (docusignFieldMap) {
                vm.docusignFieldMap = docusignFieldMap;
                return remoteActions.loadDocuSignTemplates().then(function (docuSignTemplates) {
                    vm.docuSignTemplates = docuSignTemplates;
                    vm.docuSignTemplates.forEach(function (template) {
                        var roleArray = angular.fromJson(template[docusignFieldMap['RolesData__c']]
                            .replace(/&quot;/g, '"'));
                        vm.templateRolesByTemplate[template[docusignFieldMap['TemplateIdentifier__c']]] = roleArray;
                    })
                    return vm.docuSignTemplates;
                });
            });
        }

        vm.addDocuSignTemplate = function () {
            const obj = {
                docuSignTemplate: "",
                transformBundle: "",
                sendJSONPath: "",
                sendJSONNode: "",
                includeToSend: true,
                signerList: []
            };
            vm.element.PropertySet__c.docuSignTemplatesGroup.push(obj);
        }

        vm.onChangeDocusignTemplate = function (index) {
            if (vm.element.PropertySet__c.docuSignTemplatesGroup[index].signerList) {
                vm.element.PropertySet__c.docuSignTemplatesGroup[index].signerList = [];
                delete vm.element.PropertySet__c.docuSignTemplatesGroup[index].templateRoleName;
            }
        };

        vm.deleteDocuSignTemplate = function (index) {
            vm.element.PropertySet__c.docuSignTemplatesGroup.splice(index, 1);
        };

        vm.addDocuSignSigner = function (index) {
            if (!vm.element.PropertySet__c.docuSignTemplatesGroup[index].signerList) {
                vm.element.PropertySet__c.docuSignTemplatesGroup[index].signerList = [];
            }
            vm.element.PropertySet__c.docuSignTemplatesGroup[index].signerList.push({
                signerName: "",
                signerEmail: "",
                templateRole: "",
                routingOrder: ""
            });
        };

        vm.deleteDocuSignSigner = function (index, parentIndex) {
            vm.element.PropertySet__c
                .docuSignTemplatesGroup[parentIndex].signerList.splice(index, 1);
        };

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],31:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('emailActionPropertySet', {
            templateUrl: 'propertysets/ips/action/email-action.tpl.html',
            controller: EmailActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "useTemplate": true,
        "emailTemplateInformation": {
            "emailTemplateName": "",
            "emailTargetObjectId": "",
            "saveAsActivity": false,
            "whatId": ""
        },
        "emailInformation": {
            "toAddressList": [],
            "ccAddressList": [],
            "bccAddressList": [],
            "emailSubject": "",
            "emailBody": "",
            "setHtmlBody": false
        },
        "OrgWideEmailAddress": "",
        "attachmentList": "",
        "contentVersionList": "",
        "staticDocList": [],
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "chainOnStep": false,
        "actionMessage": ""
    };

    EmailActionPropertySetController.$inject = ['propCompUtil', 'remoteActions'];

    function EmailActionPropertySetController(propCompUtil, remoteActions) {
        var vm = this;

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        remoteActions.GetEmailTemplates().then(function (emailTemplates) {
            vm.emailTemplates = emailTemplates;
        });

        remoteActions.GetEmailDocuments().then(function (emailDocuments) {
            vm.emailDocuments = emailDocuments;
        });

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],32:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('integrationProcedureActionPropertySet', {
            templateUrl: 'propertysets/ips/action/integration-procedure-action.tpl.html',
            controller: IntegrationProcedureActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "integrationProcedureKey": "",
        "remoteOptions": {},
        "chainOnStep": false,
        "actionMessage": "",
        "disableChainable": false
    };

    IntegrationProcedureActionPropertySetController.$inject = ['propCompUtil', 'remoteActions'];

    function IntegrationProcedureActionPropertySetController(propCompUtil, remoteActions) {
        const vm = this;

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        };

        (function loadIPs() {
            remoteActions.loadIntegrationProcedureKeys2().then(function (intProcedureKeys) {
                vm.integrationProcedures = intProcedureKeys;
                vm.integrationProceduresArray = Object.keys(intProcedureKeys);
            });
        })();

        vm.openIntegrationProcedure = function ($event) {
            const ipName = vm.element.PropertySet__c.integrationProcedureKey;
            if (!ipName) {
                return;
            }
            const ip = vm.integrationProcedures[ipName];
            if (!ip) {
                alert('There is currently no Integration Procedure named "' + ipName + '" in this org. If "' + ipName + '" was created recently, please try again in a few moments.');
                loadIPs();
                return;
            }
            doWindowOpen('/apex/' + window.ns + 'integrationproceduredesigner?id=' + ip, $event);
        }

        function doWindowOpen(url, $event) {
            window.vlocityOpenUrl(url, $event, true);
        }

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],33:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('intelligenceActionPropertySet', {
            templateUrl: 'propertysets/ips/action/intelligence-action.tpl.html',
            controller: IntelligenceActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "machineDeveloperName": "",
        "inputData": {},
        "itemsToRankPath": "",
        "chainOnStep": false,
        "actionMessage": ""
    };

    IntelligenceActionPropertySetController.$inject = ['propCompUtil', 'remoteActions'];

    function IntelligenceActionPropertySetController(propCompUtil, remoteActions) {
        const vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],34:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('listMergeActionPropertySet', {
            templateUrl: 'propertysets/ips/action/list-merge-action.tpl.html',
            controller: ListMergeActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "advancedMerge": false,
        "advancedMergeMap": [],
        "mergeFields": [],
        "allowMergeNulls": true,
        "hasPrimary": false,
        "primaryListKey": "",
        "sortBy": [],
        "sortInDescendingOrder": false,
        "mergeListsOrder": [],
        "filterListFormula": "",
        "dynamicOutputFields": "",
        "updateFieldValue": {},
        "chainOnStep": false,
        "actionMessage": "",
        "additionalChainableResponse": {}
    };

    ListMergeActionPropertySetController.$inject = ['propCompUtil', '$modal'];

    function ListMergeActionPropertySetController(propCompUtil, $modal) {
        var vm = this;
        vm.matchingGroupOptions = ['1', '2', '3', '4', '5'];

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        vm.addAdvancedMergeMap = function () {
            vm.element.PropertySet__c.advancedMergeMap.push({
                listKey: '',
                matchingPath: '',
                normalizeKey: ''
            });
        };

        vm.deleteAdvancedMergeMap = function (map) {
            vm.element.PropertySet__c.advancedMergeMap.splice(vm.element.PropertySet__c.advancedMergeMap.indexOf(map), 1);
        };

        vm.editAsExpression = function () {
            var input = {};
            input.currentVal = vm.element.PropertySet__c.filterListFormula;
            if (typeof input.currentVal == "undefined") {
                input.currentVal = "";
            }

            // delete leading '=' token
            input.currentVal = String(vm.element.PropertySet__c.filterListFormula).replace(/(?:^\s*=)|(?:\s*$)/g, '');
            $modal({
                title: 'Expression Editor',
                templateUrl: 'modal-edit-expression.tpl.html',
                backdrop: 'static',
                controller: function ($scope) {
                    $scope.obj = input;

                    $scope.obj.newVal = $scope.obj.currentVal;

                    $scope.cancel = function () {
                        $scope.$hide();
                    };

                    $scope.submit = function () {
                        if ($scope.obj.newVal || $scope.obj.newVal == 'false') {
                            vm.element.PropertySet__c.filterListFormula = '=' + $scope.obj.newVal;
                        }
                        $scope.cancel();
                    };
                }
            });
        };

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],35:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('matrixActionPropertySet', {
            templateUrl: 'propertysets/ips/action/matrix-action.tpl.html',
            controller: MatrixActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalOutput": {},
        "failureResponse": {},
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "matrix Input Parameters": [],
        "remoteOptions": {
            "matrixName": ""
        },
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "defaultMatrixResult": {},
        "chainOnStep": false,
        "actionMessage": ""
    };

    MatrixActionPropertySetController.$inject = ['propCompUtil', 'IsFoundation', 'bInteractionCalculation', 'remoteActions'];

    function MatrixActionPropertySetController(propCompUtil, IsFoundation, bInteractionCalculation, remoteActions) {
        var vm = this;

        vm.customMatrices = [];
        vm.decisionMatrices = [];

        vm._debounceValidateName = _.debounce(validateName, 400);

        // When bOmniStudio = false (i.e Existing customers) and InteractionCalculation permission is ON
        // Show the checkbox to enable usage of calculation BPOs
        vm.showUseDecisionMatrixCheckbox = !IsFoundation && bInteractionCalculation;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
            vm.matrixId = null;
            vm.isFoundation = IsFoundation || (vm.showUseDecisionMatrixCheckbox && vm.element.PropertySet__c.useDecisionMatrix);

            // In order to prevent consecutive queries while action clone
            // using separately stored matrix names for BPOs and custom object while first query
            if (vm.isFoundation && vm.decisionMatrices.length !== 0) {
                vm.matrixNames = vm.decisionMatrices;
            } else if (!vm.isFoundation && vm.customMatrices.length !== 0) {
                vm.matrixNames = vm.customMatrices;
            } else {
                fetchMatrixNames();
            }
            
            if (vm.element.PropertySet__c.remoteOptions.matrixName) {
                validateName(vm.element.PropertySet__c.remoteOptions.matrixName);
            }
        }

        vm.matrixNameChange = function() {
            vm.loading = true;
            let name = vm.element.PropertySet__c.remoteOptions.matrixName;
            vm._debounceValidateName(name);
        }

        vm.useDecisionMatrix = function() {
            vm.isFoundation = vm.element.PropertySet__c.useDecisionMatrix;
            vm.element.PropertySet__c.remoteOptions.matrixName = '';
            fetchMatrixNames();
        }

        function fetchMatrixNames() {
            vm.matrixNames = [];
            vm.loading = true;
            if (vm.isFoundation) {
                remoteActions.getDecisionMatrixNames()
                    .then(function (matrixNames) {
                        vm.decisionMatrices = matrixNames;
                        vm.matrixNames = matrixNames;
                        vm.loading = false;
                    })
                    .catch(function () {
                        vm.loading = false;
                    });
            } else {
                remoteActions.getMatrixNames()
                    .then(function (matrixNames) {
                        vm.customMatrices = matrixNames;
                        vm.matrixNames = matrixNames;
                        vm.loading = false;
                    })
                    .catch(function () {
                        vm.loading = false;
                    });
            }
        }

        function validateName(name) {
            return remoteActions.getIdForMatrixByName2(name, vm.isFoundation)
                .then(function(id) {
                    if (name === vm.element.PropertySet__c.remoteOptions.matrixName) {
                        vm.matrixId = id;
                    }
                })
                .finally(() => {
                    if (name === vm.element.PropertySet__c.remoteOptions.matrixName) {
                        vm.loading = false;
                    }
                });
        }

        function doWindowOpen(url, $event) {
            window.vlocityOpenUrl(url, $event, true);
        }

        vm.openMatrix = function ($event) {
            var promise = Promise.resolve();
            if (!vm.matrixId) {
                promise = validateName(vm.element.PropertySet__c.remoteOptions.matrixName);
            }
            promise.then(() => {
                if (vm.matrixId) {
                    doWindowOpen('/' + vm.matrixId, $event);
                }
            })
        }

        vm.deleteInputParameter = function (inputParam, inputParamArray) {
            inputParamArray.splice(inputParamArray.indexOf(inputParam), 1);
        };

        vm.addNewInputParameter = function (inputParamArray) {
            inputParamArray.push({
                'value': '',
                'name': ''
            });
        };
    }
})();

},{}],36:[function(require,module,exports){
var htmlEncodeDecode = require('../../../../oui/util/HtmlEncodeDecode.js');

(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('omniFormPropertySet', {
            templateUrl: 'propertysets/ips/action/omni-form.tpl.html',
            controller: OmniFormPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "Type": "",
        "Sub Type": "",
        "Language": "",
        "preIP": null,
        "postIP": null,
        "remoteOptions": {},
        "chainOnStep": false,
        "actionMessage": ""
    };

    OmniFormPropertySetController.$inject = ['propCompUtil', 'remoteActions','$timeout','LanguagesJson'];

    var persist={};

    function OmniFormPropertySetController(propCompUtil, remoteActions, $timeout, LanguagesJson) {
        var vm = this;

        Object.defineProperty(vm, 'types', {
            get: function() {
                return persist.types;
            }
        });
        Object.defineProperty(vm, 'subtypes', {
            get: function() {
                var tmp = vm.types.find(equalsLabel,vm.element.PropertySet__c.Type);
                return (tmp&&tmp.$$subTypes)||[];
            }
        });
        Object.defineProperty(vm, 'languages', {
            get: function() {
                var tmp = vm.subtypes.find(equalsLabel,vm.element.PropertySet__c['Sub Type']);
                return (tmp&&tmp.$$languages)||[];
            }
        });
        Object.defineProperty(vm, 'id', {
            get: function() {
                var tmp = vm.languages.find(equalsLabel,vm.element.PropertySet__c.Language);
                return (tmp&&tmp.$$id);
            }
        });
        persist.types = persist.types || [];
        updateOmniKeysMapAsync();

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        propCompUtil.baseConstructor.apply(vm);

        remoteActions.getMatrixNames().then(function (matrixNames) {
            vm.matrixNames = matrixNames;
        });

        vm.deleteInputParameter = function (inputParam, inputParamArray) {
            inputParamArray.splice(inputParamArray.indexOf(inputParam), 1);
        };

        vm.addNewInputParameter = function (inputParamArray) {
            inputParamArray.push({
                'inputParam': '',
                'element': ''
            });
        };

        vm.openOmniForm = function ($event) {
            doWindowOpen('/apex/' + window.ns + 'omniscriptdesigner?id=' + vm.id, $event);
        };

        function equalsLabel (a){
            var label = typeof a == "string" ? a : a.label;
            return this && label == this || (typeof label == 'string' && typeof this == 'string' && label.trim() == this.trim());
        }

        function compareLabels (a,b){
            return String(a.label).localeCompare(b.value);
        }

        function addTypes(types, tgt){
            var target = tgt;
            delete types['null'];
            delete types[''];
            var i = -1;
            for (var type in types) {
                type = htmlEncodeDecode.unescapeHTML(type);
                if (types.hasOwnProperty(type)){
                    i = target.findIndex(equalsLabel, type);
                    if (i == -1){
                        i = target.length;
                        target[i]={label: type, value: type, $$subTypes:[]};
                    }
                    var j = -1;
                    for (var subtype in types[type]) {
                        if (types[type].hasOwnProperty(subtype)){
                            subtype = htmlEncodeDecode.unescapeHTML(subtype);
                            j = target[i].$$subTypes.findIndex(equalsLabel, subtype);
                            if (j == -1){
                                j = target[i].$$subTypes.length;
                                target[i].$$subTypes[j]={label: subtype, value: subtype, $$languages:[]};
                            }
                            for (var language in types[type][subtype]) {
                                language = htmlEncodeDecode.unescapeHTML(language);
                                if (target[i].$$subTypes[j].$$languages.findIndex(equalsLabel, language) === -1) {
                                    target[i].$$subTypes[j].$$languages.push({label: LanguagesJson[language], value: language, $$id: types[type][subtype][language]});
                                }
                            }
                            target[i].$$subTypes[j].$$languages.sort(compareLabels);
                        }
                    }
                    target[i].$$subTypes.sort(compareLabels);
                }
            }
            target.sort(compareLabels);
            tgt = target;
        }

        function updateOmniKeysMapAsync () {
            $timeout(function(){
                remoteActions.queryOmniScriptKeys(false,false).then(function(result) {
                    var stor={};
                    result.forEach(function(script){
                        var type=script[ns+"Type__c"],
                            subtype=script[ns+"SubType__c"],
                            lang=script[ns+"Language__c"],
                            id=script['Id'];
                        if(stor.hasOwnProperty(type)){
                            if(stor[type].hasOwnProperty(subtype)){
                                if(!stor[type][subtype].hasOwnProperty(lang)){
                                    stor[type][subtype][lang]='';
                                }
                            }else{
                                stor[type][subtype]={};
                                stor[type][subtype][lang]='';
                            }
                        }else{
                            stor[type] = {};
                            stor[type][subtype]={};
                            stor[type][subtype][lang]='';
                        }
                        stor[type][subtype][lang]=id;
                    });
                    addTypes(stor,persist.types);
                });
            });
        }

        function doWindowOpen(url, $event) {
            window.vlocityOpenUrl(url, $event, true);
        }
    }

})();

},{"../../../../oui/util/HtmlEncodeDecode.js":92}],37:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('remoteActionPropertySet', {
            templateUrl: 'propertysets/ips/action/remote-action.tpl.html',
            controller: RemoteActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "remoteClass": "",
        "remoteOptions": {},
        "remoteMethod": "",
        "chainOnStep": false,
        "actionMessage": "",
        "additionalChainableResponse": {}
    };

    RemoteActionPropertySetController.$inject = ['propCompUtil'];

    function RemoteActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],38:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('responseActionPropertySet', {
            templateUrl: 'propertysets/ips/action/response-action.tpl.html',
            controller: ResponseActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "useFormulas": true,
        "additionalOutput": {},
        "returnOnlyAdditionalOutput": false,
        "returnFullDataJSON": false,
        "responseFormat": "JSON",
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "responseDefaultData": {},
        "vlcResponseHeaders": {}
    };

    ResponseActionPropertySetController.$inject = ['propCompUtil'];

    function ResponseActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],39:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('restActionPropertySet', {
            templateUrl: 'propertysets/ips/action/rest-action.tpl.html',
            controller: RestActionPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "useFormulas": true,
        "additionalInput": {},
        "additionalOutput": {},
        "failureResponse": {},
        "sendOnlyAdditionalInput": false,
        "returnOnlyAdditionalOutput": false,
        "returnOnlyFailureResponse": false,
        "responseJSONPath": "",
        "responseJSONNode": "",
        "sendJSONPath": "",
        "sendJSONNode": "",
        "preActionLogging": "%endpoint%",
        "postActionLogging": "",
        "restPath": "",
        "restMethod": "",
        "retryCount": 0,
        "restOptions": {
            "headers": {},
            "params": {},
            "timeout": 0,
            "sendBody": true,
            "xmlEscapeResponse": false,
            "clientCertificateName": "",
            "isCompressed": false
        },
        "namedCredential": "",
        "type": "Integration",
        "chainOnStep": false,
        "actionMessage": ""
    };

    RestActionPropertySetController.$inject = ['propCompUtil'];

    function RestActionPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],40:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('setValuesPropertySet', {
            templateUrl: 'propertysets/ips/action/set-values.tpl.html',
            controller: SetValuesPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "failureConditionalFormula": "",
        "failOnStepError": true,
        "elementValueMap": {},
        "responseJSONPath": "",
        "responseJSONNode": "",
        "chainOnStep": false,
        "actionMessage": ""
    };

    SetValuesPropertySetController.$inject = ['propCompUtil', '$modal'];

    function SetValuesPropertySetController(propCompUtil, $modal) {
        var vm = this;

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
            vm.elementValueMap = vm.objectToKeyValueArray(vm.element.PropertySet__c.elementValueMap);
        };

        vm.objectToKeyValueArray = function objectToKeyValueArray(map) {
            return Object.keys(map).map(function (key) {
                return {
                    key: key,
                    value: map[key],
                    type: vm.getType(map[key])
                };
            });
        }

        vm.getType = function (value) {
            switch (typeof value) {
                case 'object':
                    if (Array.isArray(value)) {
                        return 'array';
                    }
                    return 'object';
                default:
                    if (value && value[0] === '=') {
                        return 'expression';
                    }
                    return 'text';
            }
        };

        vm.addNewKeyValue = function () {
            vm.elementValueMap.push({
                key: '',
                type: 'text',
                value: ''
            });
            vm.updateKeyValueProperty();
        };

        vm.deleteKeyValue = function (option) {
            vm.elementValueMap.splice(vm.elementValueMap.indexOf(option), 1);
            vm.updateKeyValueProperty();
        };

        vm.updateKeyValueProperty = function () {
            const newValue = vm.elementValueMap.reduce(function (obj, prop) {
                var value = prop.value;
                try {
                    value = JSON.parse(value);
                } catch (e) {
                    // try convert to a more appropriate type if possible.
                }
                obj[prop.key] = value;

                return obj;
            }, {});
            vm.element.PropertySet__c.elementValueMap = newValue;

        };

        vm.editAsExpression = function (property, expressionOnly) {
            var input = {};
            input.currentVal = property.value;
            if (typeof input.currentVal == "undefined") {
                input.currentVal = "";
            }

            // delete leading '=' token
            if (!expressionOnly) {
                input.currentVal = String(property.value).replace(/(?:^\s*=)|(?:\s*$)/g, '');
            }
            $modal({
                title: 'Expression Editor',
                templateUrl: 'modal-edit-expression.tpl.html',
                backdrop: 'static',
                controller: function ($scope) {
                    $scope.obj = input;

                    $scope.obj.newVal = $scope.obj.currentVal;

                    $scope.cancel = function () {
                        $scope.$hide();
                    };

                    $scope.submit = function () {
                        if ($scope.obj.newVal || $scope.obj.newVal == 'false') {
                            property.value = '=' + $scope.obj.newVal;
                            vm.updateKeyValueProperty();
                        }
                        $scope.cancel();
                    };
                }
            });
        };

        propCompUtil.baseConstructor.apply(vm);
    }
})();

},{}],41:[function(require,module,exports){
require('./CalculationAction.js');
require('./ChatterAction.js');
require('./DataraptorExtractAction.js');
require('./DataraptorPostAction.js');
require('./DataraptorTransformAction.js');
require('./DeleteAction.js');
require('./DocusignEnvelopeAction.js');
require('./EmailAction.js');
require('./IntegrationProcedureAction.js');
require('./IntelligenceAction.js');
require('./ListMergeAction.js');
require('./MatrixAction.js');
require('./OmniForm.js');
require('./RemoteAction.js');
require('./RestAction.js');
require('./ResponseAction.js');
require('./SetValues.js');
require('./BatchAction.js');
require('./AssertAction.js');
},{"./AssertAction.js":22,"./BatchAction.js":23,"./CalculationAction.js":24,"./ChatterAction.js":25,"./DataraptorExtractAction.js":26,"./DataraptorPostAction.js":27,"./DataraptorTransformAction.js":28,"./DeleteAction.js":29,"./DocusignEnvelopeAction.js":30,"./EmailAction.js":31,"./IntegrationProcedureAction.js":32,"./IntelligenceAction.js":33,"./ListMergeAction.js":34,"./MatrixAction.js":35,"./OmniForm.js":36,"./RemoteAction.js":37,"./ResponseAction.js":38,"./RestAction.js":39,"./SetValues.js":40}],42:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('cacheBlockPropertySet', {
            templateUrl: 'propertysets/ips/group/cache-block.tpl.html',
            controller: CacheBlockPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "refreshCacheConditionalFormula": "",
        "ignoreCacheConditionalFormula": "",
        "executionConditionalFormula": "",
        "addToCacheConditionalFormula": "",
        "cacheKeys": {},
        "cacheBlockOutput": {},
        "ttlMinutes": 5,
        "cacheType":""
    };

    CacheBlockPropertySetController.$inject = ['propCompUtil'];

    function CacheBlockPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }

        vm.cacheTypes = ['Session Cache', 'Org Cache'];
    }
})();

},{}],43:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('conditionalBlockPropertySet', {
            templateUrl: 'propertysets/ips/group/conditional-block.tpl.html',
            controller: ConditionalBlockPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "executionConditionalFormula": "",
        "isIfElseBlock": false
    };

    ConditionalBlockPropertySetController.$inject = ['propCompUtil'];

    function ConditionalBlockPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],44:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('loopBlockPropertySet', {
            templateUrl: 'propertysets/ips/group/loop-block.tpl.html',
            controller: LoopBlockPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "loopList": "",
        "executionConditionalFormula": "",
        "loopOutput": {}
    };

    LoopBlockPropertySetController.$inject = ['propCompUtil'];

    function LoopBlockPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],45:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .component('tryCatchBlockPropertySet', {
            templateUrl: 'propertysets/ips/group/try-catch-block.tpl.html',
            controller: TryCatchBlockPropertySetController,
            controllerAs: 'vm',
            bindings: {
                element: '<',
                scriptElement: '<'
            }
        });

    const DEFAULT_PROP_SET = {
        "failureResponse": {},
        "remoteClass":"",
        "remoteMethod":"",
        "executionConditionalFormula": "",
        "failOnBlockError": true
    };

    TryCatchBlockPropertySetController.$inject = ['propCompUtil'];

    function TryCatchBlockPropertySetController(propCompUtil) {
        var vm = this;

        propCompUtil.baseConstructor.apply(vm);

        vm.$onChanges = function (changes) {
            if (!changes.element) {
                return;
            }

            vm.element.PropertySet__c = vm.updateDefaultProperties(DEFAULT_PROP_SET, vm.element.PropertySet__c, vm.getElementType(vm.element));
        }
    }
})();

},{}],46:[function(require,module,exports){
require('./ConditionalBlock.js');
require('./LoopBlock.js');
require('./CacheBlock.js');
require('./TryCatchBlock.js');

},{"./CacheBlock.js":42,"./ConditionalBlock.js":43,"./LoopBlock.js":44,"./TryCatchBlock.js":45}],47:[function(require,module,exports){
/*global fileNsPrefixDot*/
(function () {
    'use strict';
    angular.module('omniscriptDesigner')
        .config(['remoteActionsProvider', function (remoteActionsProvider) {
            'use strict';
            remoteActionsProvider.setRemoteActions({
                getOmniScript: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetOmniScript2",
                    config: {
                        buffer: false
                    }
                },
                getDocuments: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetDocuments",
                    config: {
                        buffer: false
                    }
                },
                getReusableOmniScripts: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetReusableOmniScripts2",
                    config: {
                        buffer: false
                    }
                },
                getOmniScriptTypes: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetOmniScriptTypes",
                    config: {
                        buffer: false
                    }
                },
                getElements: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetElements2",
                    config: {
                        buffer: false
                    }
                },
                loadElementTypes: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadElementTypes",
                    config: {
                        buffer: false
                    }
                },
                loadScriptElementTypes: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadScriptElementTypes",
                    config: {
                        buffer: false
                    }
                },
                getMatchingDRBundles: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getMatchingDRBundles2",
                    config: {
                        buffer: false
                    }
                },
                loadIntegrationProcedureKeys2: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadIntegrationProcedureKeys2",
                    config: {
                        buffer: false
                    }
                },
                loadVlocityUITemplates: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadVlocityUITemplates",
                    config: {
                        buffer: false
                    }
                },
                uploadDocument: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.uploadDocument",
                    config: {
                        buffer: false
                    }
                },
                getAllDocuments: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetAllDocuments",
                    config: {
                        buffer: false
                    }
                },
                getLanguageCodeMap: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getLanguageCodeMap",
                    config: {
                        buffer: false
                    }
                },
                loadLanguages: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadLanguages",
                    config: {
                        buffer: false
                    }
                },
                loadPropertySetForElement: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadPropertySetForElement",
                    config: {
                        buffer: false
                    }
                },
                getKnowledgeArticles: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getKnowledgeArticles",
                    config: {
                        buffer: false
                    }
                },
                saveOmniScript: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.SaveOmniScript",
                    config: {
                        buffer: false
                    }
                },
                saveElement: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.SaveElement",
                    config: {
                        buffer: false
                    }
                },
                deleteOmniScript: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.DeleteOmniScript",
                    config: {
                        buffer: false
                    }
                },
                deleteElement: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.DeleteElement",
                    config: {
                        buffer: false
                    }
                },
                getAllObjects: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetAllObjects",
                    config: {
                        buffer: false
                    }
                },
                getExternalObjects: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetExternalObjects",
                    config: {
                        buffer: false
                    }
                },
                getFieldsForObject: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetFieldsForObject",
                    config: {
                        buffer: false
                    }
                },
                getExternalObjects: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetExternalObjects",
                    config: {
                        buffer: false
                    }
                },
                createVersion: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.CreateVersion",
                    config: {
                        buffer: false
                    }
                },
                activateVersion: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.ActivateVersion",
                    config: {
                        buffer: false
                    }
                },
                deactivateVersion: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.DeactivateVersion",
                    config: {
                        buffer: false
                    }
                },
                loadDocuSignTemplates: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadDocuSignTemplates2",
                    config: {
                        buffer: false
                    }
                },
                viewFullDataJson: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.ViewFullDataJson",
                    config: {
                        buffer: false
                    }
                },
                GetEmailTemplates: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetEmailTemplates",
                    config: {
                        buffer: false
                    }
                },
                GetEmailDocuments: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetEmailDocuments",
                    config: {
                        buffer: false
                    }
                },
                ensureDocumentUploads: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.EnsureDocumentUploads",
                    config: {
                        buffer: false
                    }
                },
                getMatrixNames: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetMatrixNames",
                    config: {
                        buffer: false
                    }
                },
                getDecisionMatrixNames: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetDecisionMatrixNames",
                    config: {
                        buffer: false
                    }
                },
                getMatrixHeaders: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.GetMatrixHeaders",
                    config: {
                        buffer: false
                    }
                },
                exportOmniScript: {
                    action: fileNsPrefixDot() + "OmniScriptHomeController.exportScripts",
                    config: {
                        buffer: true,
                        escape: false
                    }
                },
                BuildJSONV2: {
                    action: fileNsPrefixDot() + "OmniScriptHomeController.BuildJSONV2",
                    config: {
                        escape: false,
                        buffer: false
                    }
                },
                toggleElementTrigger: {
                    action: fileNsPrefixDot() + "OmniScriptHomeController.toggleElementTrigger",
                    config: {
                        buffer: false
                    }
                },
                createElement: {
                    action: fileNsPrefixDot() + "OmniScriptHomeController.createElement",
                    config: {
                        escape: false,
                        buffer: true
                    }
                },
                getCustomLabels: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getCustomLabels",
                    config: {
                        escape: false,
                        buffer: true
                    }
                },
                updateScriptLastPreviewPage: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.updateScriptLastPreviewPage",
                    config: {
                        escape: false,
                        buffer: true
                    }
                },
                createScript: fileNsPrefixDot() + "OmniScriptHomeController.createScript",
                queryOmniScriptKeys: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.QueryOmniScriptKeys2",
                    config: {
                        buffer: false
                    }
                },
                loadIntegrationProcedureElementTypes: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.LoadIntegrationProcedureElementTypes",
                    config: {
                        buffer: false
                    }
                },
                testIntegrationProcedure: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.testIntegrationProcedure",
                    config: {
                        escape: false
                    }
                },
                getAllLWCNames: {
                    action: fileNsPrefixDot() + "LWCDesignerController.getAllLWCNames",
                    config: {
                        escape: false,
                        buffer: true
                    }
                },
                getLWCBundles: {
                    action: fileNsPrefixDot() + "LWCDesignerController.getLWCBundles",
                    config: {
                        escape: false,
                        buffer: false
                    }
                },
                vlocityFormulaParserFunctions: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.vlocityFormulaParserFunctions",
                    config: {
                        escape: false
                    }
                },
                GetScheduledJobs: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getVlocityScheduledJob",
                    config: {
                        escape: false
                    }

                },
                getIdForMatrixByName2: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getIdForMatrixByName2",
                    config: {
                        escape: false,
                        buffer: false
                    }
                },
                getIdForCalculationByName2: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getIdForCalculationByName2",
                    config: {
                        escape: false,
                        buffer: false
                    }
                },
                getDocuSignFieldMap: {
                    action: fileNsPrefixDot() + "OmniScriptDesignerController.getDocuSignFieldMap",
                    config: {
                        buffer: false
                    }
                }
            });
        }]).config(function ($locationProvider) {
            $locationProvider.html5Mode({
                enabled: !!(window.history && history.pushState),
                requireBase: false
            });
        }).config(['$compileProvider', function ($compileProvider) {
            $compileProvider.debugInfoEnabled(false);
        }]).config(['$localizableProvider', function ($localizableProvider) {
            $localizableProvider.setLocalizedMap(window.i18n);
            $localizableProvider.setDebugMode(window.ns === '');
            $localizableProvider.setSyncModeOnly();
        }]).config(function ($typeaheadProvider) {
            angular.extend($typeaheadProvider.defaults, {
                watchOptions: true,
                minLength: 0,
                limit: 1000
            });
        }).config(function ($tooltipProvider) {
            angular.extend($tooltipProvider.defaults, {
                delay: {
                    show: 0,
                    hide: 100
                }
            });
        });
})();

},{}],48:[function(require,module,exports){
var PaletteElement = require('../../oui/util/PaletteElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');
var replaceAllFields = require('../../../modules/oui/util/fieldsMappingUtils.js').replaceAllFields;

angular.module('omniscriptDesigner')
    .run(function ($rootScope, isIntegrationProcedure, OmniScriptJson, IsFoundation,
        ElementTypesJson, $localizable) {
        'use strict';
        var defaultConfigForScriptElement = {
            'Name': $localizable(isIntegrationProcedure ? 'IntProcNewIntProc' : 'OmniDesNewOmniScript')
        };
        defaultConfigForScriptElement[fileNsPrefix() + 'IsProcedure__c'] = !!isIntegrationProcedure;
        OmniScriptJson = replaceAllFields(OmniScriptJson, true, false, IsFoundation);

        if (OmniScriptJson.Id) {
            $rootScope.scriptElement = new ScriptElement(OmniScriptJson);
            if ($rootScope.scriptElement.isDisabled()) {
                var pageDescription = $('.pageDescription');
                pageDescription.append('&nbsp;<span class="active text-success">' +
                    $localizable('OmniDesActive') + '</span>');
                pageDescription.addClass('vlocity');
            }
        } else {
            $rootScope.scriptElement = new ScriptElement(defaultConfigForScriptElement);
        }
        if (typeof sforce !== 'undefined') {
            if (sforce.console && sforce.console.isInConsole()) {
                sforce.console.setTabTitle($rootScope.scriptElement.Name);
                if (isIntegrationProcedure) {
                    sforce.console.setTabIcon('custom:custom63');
                } else {
                    sforce.console.setTabIcon('standard:template');
                }
                document.getElementById('omnidesigner_goback').style.display = 'none';
            }
        }
        var titleEl = document.querySelector('title');
        if (!titleEl) {
            var headEl = document.querySelector('head');
            titleEl = document.createElement('title');
            headEl.appendChild(titleEl);
        }
        titleEl.innerText = (isIntegrationProcedure ? 'IP: ' : 'OmniScript: ') + $rootScope.scriptElement.Name;

        ElementTypesJson.filter(function (element) {
            return !/(Button)/gi.test(element);
        }).map(function (element) {
            return PaletteElement.factory(element);
        });

        $rootScope.vlocityOpenUrl = window.vlocityOpenUrl;
    });

},{"../../../modules/oui/util/fieldsMappingUtils.js":95,"../../oui/util/PaletteElement.js":93,"../../oui/util/ScriptElement.js":94}],49:[function(require,module,exports){
var PaletteElement = require('../../oui/util/PaletteElement.js');
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');
var replaceAllFields = require('../../oui/util/fieldsMappingUtils.js').replaceAllFields;

angular.module('omniscriptDesigner')
    .controller('elementPalette', function ($rootScope, $scope, isIntegrationProcedure, ElementTypesJson, ReusableScriptsInit, IsFoundation, IsIndustryPkg, IsOmniStudioPkg) {
        'use strict';
        $scope.groupedControlsGroupCollapse = $scope.navigationGroupCollapse = $scope.inputControlsGroupCollapse = false;
        ReusableScriptsInit = replaceAllFields(ReusableScriptsInit, true, false, IsFoundation);

        if (!isIntegrationProcedure) {
            $scope.reusableScripts = ReusableScriptsInit.map(function (script) {
                return PaletteElement.factory(script);
            }).sort();
            $scope.allElements = ElementTypesJson.filter(function (element) {
                return !/(Button)/gi.test(element);
            }).sort().map(function (element) {
                return PaletteElement.factory(element);
            });
        } else {
            $rootScope.$watch('scriptElement.IsTest__c', function () {
                initAllElements();
            });
        }

        function initAllElements() {
            var isTesting = isIntegrationProcedure && $rootScope.scriptElement.IsTest__c;
            $scope.allElements = ElementTypesJson.filter(function (element) {
                if (element === 'Assert Action') {
                    return isTesting;
                } else if (IsOmniStudioPkg && !IsIndustryPkg && element === 'Batch Action') {
                    return false;
                }
                return !/(Button)/gi.test(element);
            }).sort().map(function (element) {
                return PaletteElement.factory(element);
            });
        }

        initAllElements();

    });

},{"../../oui/util/CanvasElement.js":91,"../../oui/util/PaletteElement.js":93,"../../oui/util/ScriptElement.js":94,"../../oui/util/fieldsMappingUtils.js":95}],50:[function(require,module,exports){
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');
var replaceAllFields = require('../../oui/util/fieldsMappingUtils.js').replaceAllFields;

angular.module('omniscriptDesigner')
    .controller('omniscriptDesignerController', function ($rootScope, $scope, $q, remoteActions, fixMissingPropertiesFilter,
        $location, $timeout, save, $localizable, $modal, ElementsJson, $injector, isIntegrationProcedure, IsFoundation, showLegacyOmniStudioUi, OmniScriptObjectName, OmniScriptFieldMappings, OmniScriptInstanceObjectName) {
        'use strict';
        var urlPrefix = window.location.protocol + '//' + window.location.hostname;
        ElementsJson = replaceAllFields(ElementsJson, false, false, IsFoundation);

        function sortByOrder(a, b) {
            if (a.Order__c === undefined) {
                return (b.Order__c === undefined) ? 0 : 1;
            } else if (b.Order__c === undefined) {
                return -1;
            }
            return a.Order__c - b.Order__c;
        }

        $timeout(function () {
            $rootScope.$broadcast('activeElementInCanvas', $rootScope.scriptElement);
        });
        var transformedElements = [],
            inProgressMap = {};
        ElementsJson.forEach(function (elementPreConvert) {
            var element = CanvasElement.fromJson(elementPreConvert, IsFoundation);
            if (element) {
                fixMissingPropertiesFilter(element);
                transformedElements.push(element);
                inProgressMap[element.Id] = element;
            }
        });
        for (var i = 0; i < transformedElements.length; i++) {
            var transformedElement = transformedElements[i];
            if (transformedElement.ParentElementId__c) {
                if (inProgressMap[transformedElement.ParentElementId__c]) {
                    inProgressMap[transformedElement.ParentElementId__c].children.push(transformedElement);
                }
                transformedElements.splice(i, 1);
                i--;
            }
        }
        transformedElements.forEach(function (transformedElement) {
            $rootScope.scriptElement.children.push(transformedElement);
        });
        $rootScope.scriptElement.each(function (element) {
            if (element.children) {
                element.children.sort(sortByOrder);
            }
        });

        $scope.showLegacyOmniStudioUi = showLegacyOmniStudioUi;

        $scope.saveOmniScript = function () {
            return save($rootScope.scriptElement);
        };

        $scope.toggleCollapsePalette = function () {
            $rootScope.collapsePalette = !$rootScope.collapsePalette;
        };

        $scope.toggleFullScreen = function () {
            $rootScope.fullScreen = !$rootScope.fullScreen;
        };

        $scope.showHowToUse = function () {
            var modal = $modal({
                title: 'How to launch',
                templateUrl: 'modal-how-to-use-this.tpl.html',
                show: false,
                html: true,
                backdrop: 'static',
                controller: function ($scope, $timeout, showLegacyOmniStudioUi) {
                    var pageToMode = {
                        'Universal Page': 'OmniScriptUniversalPage',
                        'Universal Page with Header': 'OmniScriptUniversalPageWHeader',
                        'Universal Page with Header/Sidebar': 'OmniScriptUniversalPageWHeaderSidebar',
                        'Console': 'OmniScriptUniversalPageConsole'
                    };

                    $scope.modes = Object.keys(pageToMode);
                    $scope.currentMode = $scope.modes[0];
                    $scope.vertOrHoriz = 'lightning';
                    $scope.$watch('currentMode', buildUrl);
                    $scope.$watch('vertOrHoriz', buildUrl);
                    $scope.embedLayout = 'lightning';
                    $scope.lwcLayout = 'lightning';
                    $scope.lwcEnabled = $rootScope.scriptElement.IsLwcEnabled__c;
                    $scope.tabs = [{
                        title: 'Angular',
                        content: '',
                        disabled: !showLegacyOmniStudioUi
                    }];
                    $scope.tabs.activeTab = showLegacyOmniStudioUi? 0 : 1 ;
                    var nsPrefix = window.ns.replace(/__$/, '');

                    if ($rootScope.scriptElement.IsLwcEnabled__c) {
                        $scope.tabs.push({
                            title: 'LWC',
                            content: ''
                        })
                    }

                    function buildUrl() {
                        var mode, layout, layoutParams, verHor;

                        //default mode is vertical, vertical is true
                        mode = $scope.vertOrHoriz === 'horizontal' ? 'horizontal' : 'vertical';
                        verHor = $scope.vertOrHoriz !== 'horizontal';

                        if ($scope.currentMode !== 'Mobile' && $scope.currentMode !== 'Communities') {
                            if ($scope.vertOrHoriz === 'lightning') {
                                layout = 'lightning'
                            }
                            else if ($scope.vertOrHoriz === 'newport') {
                                layout = 'newport';
                            }
                        }
                        else { //defaults to vertical if currentMode changes
                            $scope.vertOrHoriz = 'vertical';
                        }

                        //default layout parameters
                        layoutParams = layout ? '&layout=' + layout : '';

                        $scope.url = urlPrefix + '/apex/' + window.ns +

                            pageToMode[$scope.currentMode] + '?id={0}' + layoutParams + '#/OmniScriptType/' + $rootScope.scriptElement.Type__c +
                            '/OmniScriptSubType/' + $rootScope.scriptElement.SubType__c +
                            '/OmniScriptLang/' + $rootScope.scriptElement.Language__c +
                            '/ContextId/{0}/PrefillDataRaptorBundle//' + verHor;

                        layoutParams = '&scriptMode=' + mode;

                        if (($scope.currentMode !== 'Mobile' && $scope.currentMode !== 'Communities')) {
                            if (layout) {
                                layoutParams = layoutParams + '&layout=' + layout;
                            }
                        }


                        $scope.urlWithParam = urlPrefix + '/apex/' + window.ns +
                            pageToMode[$scope.currentMode] + '?id={0}&OmniScriptType=' + encodeURIComponent($rootScope.scriptElement.Type__c) +
                            '&OmniScriptSubType=' + encodeURIComponent($rootScope.scriptElement.SubType__c) +
                            '&OmniScriptLang=' + encodeURIComponent($rootScope.scriptElement.Language__c) +
                            '&PrefillDataRaptorBundle=' + layoutParams + '&ContextId={0}';


                        if (!isIntegrationProcedure && $rootScope.scriptElement.IsLwcEnabled__c) {
                            const compilerService = $injector.get('compilerService'),
                                type = $rootScope.scriptElement.Type__c,
                                subType = $rootScope.scriptElement.SubType__c,
                                language = $rootScope.scriptElement.Language__c,
                                lwcName = compilerService.getLwcName(type, subType, language),
                                cTag = compilerService.getComponentTag(lwcName),
                                consoleTabTitle = $rootScope.scriptElement.PropertySet__c.consoleTabTitle,
                                consoleTabIcon = $rootScope.scriptElement.PropertySet__c.consoleTabIcon,
                                componentNs = window.isInsidePckg === "true" || window.isInsidePckg === true ? 'c' : (nsPrefix || 'c');

                            let consoleTabTitleUrlParam = '',
                                consoleTabIconUrlParam = '';

                            if (consoleTabTitle) {
                                consoleTabTitleUrlParam = `&c__tabLabel=${consoleTabTitle}`;
                            }

                            if (consoleTabIcon) {
                                consoleTabIconUrlParam = `&c__tabIcon=${consoleTabIcon}`;
                            }

                            $scope.lwcWrapperUrl = urlPrefix + '/lightning/cmp/' + (window.ns || 'c__') + 'vlocityLWCOmniWrapper?c__target=' + componentNs + ':' + lwcName + '&c__layout=' + $scope.lwcLayout +
                                consoleTabTitleUrlParam + consoleTabIconUrlParam;
                            $scope.lwcTag = `<${cTag} layout="${$scope.lwcLayout}" prefill={prefill}></${cTag}>`;
                            $scope.lwcTag2 = `<${cTag} layout="${$scope.lwcLayout}" prefill='\\{"ContextId":"abc","otherParam":"FAQ"}'></${cTag}>`;
                            $scope.lwcName = lwcName;
                        }
                    }

                    var appName = $rootScope.scriptElement.Name.replace(/( |_|-)/gi, '');
                    var elementPrefix = (nsPrefix || nsPrefix === '' ? nsPrefix : 'c') + ':';

                    $scope.onChangeLayout = function (scp) {
                        if ($scope.embedLayout === "lightning") {
                            $scope.textarea = $scope.makeVFTemplateForLayout("lightning");
                        }
                        else if ($scope.embedLayout === "newport") {
                            $scope.textarea = $scope.makeVFTemplateForLayout("newport");
                        }
                        else {
                            $scope.textarea = $scope.makeVFTemplateForLayout();
                        }
                    };

                    $scope.onChangeLwcLayout = function () {
                        if (isIntegrationProcedure) return;

                        const compilerService = $injector.get('compilerService'),
                            type = $rootScope.scriptElement.Type__c,
                            subType = $rootScope.scriptElement.SubType__c,
                            language = $rootScope.scriptElement.Language__c,
                            lwcName = compilerService.getLwcName(type, subType, language),
                            cTag = compilerService.getComponentTag(lwcName),
                            consoleTabTitle = $rootScope.scriptElement.PropertySet__c.consoleTabTitle,
                            consoleTabIcon = $rootScope.scriptElement.PropertySet__c.consoleTabIcon,
                            componentNs = window.isInsidePckg === "true" || window.isInsidePckg === true ? 'c' : (nsPrefix || 'c');

                        let consoleTabTitleUrlParam = '',
                            consoleTabIconUrlParam = '';

                        if (consoleTabTitle) {
                            consoleTabTitleUrlParam = `&c__tabLabel=${consoleTabTitle}`;
                        }

                        if (consoleTabIcon) {
                            consoleTabIconUrlParam = `&c__tabIcon=${consoleTabIcon}`;
                        }

                        $scope.lwcWrapperUrl = urlPrefix + '/lightning/cmp/' + (window.ns || 'c__') + 'vlocityLWCOmniWrapper?c__target=' + componentNs + ':' + lwcName + '&c__layout=' + $scope.lwcLayout +
                            consoleTabTitleUrlParam + consoleTabIconUrlParam;
                        $scope.lwcTag = `<${cTag} layout="${$scope.lwcLayout}" prefill={prefill}></${cTag}>`;
                        $scope.lwcTag2 = `<${cTag} layout="${$scope.lwcLayout}" prefill='\\{"ContextId":"abc","otherParam":"FAQ"}'></${cTag}>`;
                    }

                    var xmls = 'http://www.w3.org/2000/svg',
                        xlink = 'http://www.w3.org/1999/xlink';


                    $scope.makeVFTemplateForLayout = function (layout) {
                        var header, sidebar, scriptLayout;
                        // default to classic
                        if (!layout) {
                            header = true;
                            sidebar = true;
                            scriptLayout = '';
                        }
                        // lightning, newport layout
                        else {
                            header = false;
                            sidebar = false;
                            scriptLayout = '\t\t\tscriptLayout=\"' + layout + '\"\n';
                        }

                        return '<apex:page standardStylesheets=\"false\" ' +
                            'showHeader=\"' + header + '\" sidebar=\"' + sidebar + '\" docType=\"html-5.0\">\n' +
                            '\t<div class=\"vlocity via-slds\" xmlns=\"' + xmls + '\" xmlns:xlink=\"' + xlink + '\" ng-app=\"' + appName + '\">\n' +
                            '\t\t<' + elementPrefix + 'BusinessProcessComponent\n' +
                            '\t\t\tstrOmniScriptType=\"' + $rootScope.scriptElement.Type__c + '\"\n' +
                            '\t\t\tstrOmniScriptSubType=\"' + $rootScope.scriptElement.SubType__c + '\"\n' +
                            '\t\t\tstrOmniScriptLang=\"' + $rootScope.scriptElement.Language__c + '\"\n' +
                            '\t\t\tpreviewMode=\"{!$CurrentPage.parameters.previewEmbedded}\"\n' +
                            '\t\t\tverticalMode=\"{!$CurrentPage.parameters.verticalMode}\"\n' +
                            '\t\t\tstrOmniScriptId=\"{!$CurrentPage.parameters.designerPreviewId}\"\n' +
                            scriptLayout + '\t\t\t/>\n' +
                            '\t\t<script type=\"text/javascript\">\n' +
                            '\t\t\tvar modules = [\'vlocity-business-process\'];\n' +
                            '\t\t\tvar myModule = angular.module(\'' + appName + '\', modules);\n' +
                            '\t\t</script>\n' +
                            ($rootScope.scriptElement.CustomJavaScript__c && $rootScope.scriptElement.CustomJavaScript__c !== '' ?
                                ('\t\t<script type=\"text/javascript\">\n' +
                                    $rootScope.scriptElement.CustomJavaScript__c +
                                    '\n\t\t</script>\n') : '') +
                            $rootScope.scriptElement.TestHTMLTemplates__c +
                            '\n\t</div>\n' +
                            '\t<' + elementPrefix + 'VFActionFunction/> \n' +
                            '</apex:page>';
                    }

                    $scope.textarea = $scope.makeVFTemplateForLayout($scope.embedLayout);
                }
            });
            modal.$promise.then(modal.show)
                .then(function (done) {
                    $timeout(function () {
                        var clipboard = new Clipboard('.copy-btn');
                        clipboard.on('success', function (e) {
                            showTooltip(e.trigger, 'Copied!');
                        });

                        function showTooltip(elem, msg) {
                            $(elem).addClass('tooltipped tooltipped-s');
                            elem.setAttribute('aria-label', msg);
                            $(elem).on('mouseleave', function (e) {
                                $(elem).removeClass('tooltipped tooltipped-s');
                                elem.removeAttribute('aria-label');
                            });
                        }
                    });
                });
        };

        $scope.viewFullDataJson = function () {
            var modal = $modal({
                title: $localizable('OmniDesFullDataJsonModalTitle'),
                templateUrl: 'modal-view-full-data-json.tpl.html',
                show: false,
                html: true,
                controller: function ($scope, $timeout) {
                    $scope.initFullDataJson = function () {
                        $scope.loading = true;
                        var scriptId = window.location ? window.location.href.split(/[?&]/).find(function (item) {
                            return /^id\=/.test(item);
                        }) : null;
                        if (scriptId) {
                            scriptId = scriptId.replace(/^id=/, '');
                            remoteActions.viewFullDataJson(scriptId)
                                .then(function (omniScriptResult) {
                                    $scope.loading = false;
                                    $scope.dataJson = omniScriptResult.replace(/&quot;/g, '"');
                                    $scope.dataJson = JSON.stringify(JSON.parse($scope.dataJson), null, 4);
                                });
                        }
                    }
                }
            });

            modal.$promise.then(modal.show)
                .then(function (done) {
                    $timeout(function () {
                        var clipboard = new Clipboard('.copy-btn');
                        clipboard.on('success', function (e) {
                            showTooltip(e.trigger, 'Copied!');
                        });

                        function showTooltip(elem, msg) {
                            $(elem).addClass('tooltipped tooltipped-s');
                            elem.setAttribute('aria-label', msg);
                            $(elem).on('mouseleave', function (e) {
                                $(elem).removeClass('tooltipped tooltipped-s');
                                elem.removeAttribute('aria-label');
                            });
                        }
                    });
                });
        };
    });

},{"../../oui/util/CanvasElement.js":91,"../../oui/util/ScriptElement.js":94,"../../oui/util/fieldsMappingUtils.js":95}],51:[function(require,module,exports){
/* globals _, VOUINS */
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');

(function () {
    'use strict';
    var angular = window.angular;

    angular.module('omniscriptDesigner')
        .controller('propertiesController', function ($rootScope, $scope, save, $timeout) {
            $scope.showJsonEditor = false;
            $scope.propertySetAsText = '';

            $scope.toggleJsonEditor = function () {
                $scope.showJsonEditor = !$scope.showJsonEditor;
            };

            $scope.onJsonChange = function (propSetAsText) {
                $scope.propertySetAsText = propSetAsText;
            };

            $scope.$watch('propertySetAsText', function (newValue, oldValue) {
                try {
                    if ($scope.showJsonEditor) {
                        $scope.activeElement.PropertySet__c = JSON.parse($scope.propertySetAsText);
                        $scope.propertySetInvalid = false;
                    }
                } catch (exp) {
                    $scope.propertySetInvalid = true;
                }
            });

            $rootScope.$on('activeElementInCanvas', function (event, args) {
                if (angular.isString(args)) {
                    $scope.activeElement = CanvasElement.getById(args);
                } else {
                    $scope.activeElement = args;
                }
                if (!$scope.activeElement) {
                    $scope.activeElement = $rootScope.scriptElement;
                }

                $scope.showJsonEditor = false;
            });

            function without(obj, keys) {
                return Object.keys(obj).filter(function (key) {
                    return keys.indexOf(key) === -1;
                }).reduce(function (result, key) {
                    result[key] = obj[key];
                    return result;
                }, {});
            }

            // save changes on every call
            var timeouts = {};
            $scope.$watch(function () {
                if ($scope.activeElement) {
                    return without($scope.activeElement, ['parent', 'children', 'saving', 'collapse',
                        'errors', 'allowDrop', 'originalJson', 'filter', 'deleted', 'deleting'
                    ]);
                } else {
                    return [];
                }
            }, _.debounce(function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    var elementToSave = $scope.activeElement;
                    if (elementToSave &&
                        // only autosave script element if it has an ID,
                        //i.e. it has been explicitly saved already
                        !(elementToSave instanceof ScriptElement && !elementToSave.Id)) {
                        if (elementToSave.Id && timeouts[elementToSave.Id]) {
                            $timeout.cancel(timeouts[elementToSave.Id]);
                        }
                        timeouts[elementToSave.Id] = $timeout(function () {
                            save(elementToSave);
                            $rootScope.$broadcast('elementPropertyChanged');
                        }, 750);
                        $scope.propertySetAsText = JSON.stringify($scope.activeElement.PropertySet__c, null, 4);
                    }
                }
            }, 250), true);

        });
}());

},{"../../oui/util/CanvasElement.js":91,"../../oui/util/ScriptElement.js":94}],52:[function(require,module,exports){
/* globals vlocityVFActionFunctionControllerHandlers */
angular.module('omniscriptDesigner')
    .controller('scriptFormController', function ($scope, $rootScope, $window, $modal, remoteActions, $localizable, $drvExport, backcompatExport, isIntegrationProcedure, $injector) {
        'use strict';

        let compilerService = null,
            toolingService = null,
            bpService = null;

        if (!isIntegrationProcedure) {
            compilerService = $injector.get('compilerService');
            toolingService = $injector.get('toolingService');
            bpService = $injector.get('bpService');
        }

        $scope.createVersion = function () {
            $rootScope.scriptElement.saving = true;
            $rootScope.scriptElement.activating = true;
            var input = angular.toJson({
                Id: $rootScope.scriptElement.Id
            });
            var options = angular.toJson({
                url: isIntegrationProcedure ? 'integrationproceduredesigner' : 'omniscriptdesigner'
            });
            var className = fileNsPrefixDot() + 'BusinessProcessController.BusinessProcessControllerOpen';

            vlocityVFActionFunctionControllerHandlers.runServerMethod(className, 'CreateVersion',
                input, options, false)
                .then(function (response) {
                    var responseObj = JSON.parse(response);
                    if ($window.top !== $window && $window.sforce.console.isInConsole()) {
                        sforce.console.getEnclosingPrimaryTabId(function (parentTabResponse) {
                            sforce.console.getEnclosingTabId(function (response) {
                                if (response.id === parentTabResponse.id) {
                                    sforce.console.openPrimaryTab(null, fixUpUrlWithParams(responseObj.url), true);
                                } else {
                                    sforce.console.openSubtab(parentTabResponse.id, fixUpUrlWithParams(responseObj.url), true, '');
                                }
                                sforce.console.closeTab(response.id);
                            });
                        });
                    } else {
                        window.location = fixUpUrlWithParams(responseObj.url);
                    }
                });
        };

        $scope.activateVersion = function () {

            // Validate we have ALL 3 elements in order to allow activate when LWC is enabled
            if (!isIntegrationProcedure && $rootScope.scriptElement.IsLwcEnabled__c) {
                const type = $rootScope.scriptElement.Type__c,
                    subType = $rootScope.scriptElement.SubType__c,
                    language = $rootScope.scriptElement.Language__c;

                compilerService.validate(type, subType, language)
                    .then(() => {
                        var modalScope = $scope.$new();
                        modalScope.ok = () => preActivateVersion(true);
                        $modal({
                            title: 'Activation',
                            templateUrl: 'confirmationModal.tpl.html',
                            content: $localizable('OmniDesConfirmActivationWithLwc'),
                            scope: modalScope,
                            show: true
                        });
                    })
                    .catch(() => {
                        $rootScope.scriptElement.saving = false;
                        $rootScope.scriptElement.activating = false;
                    });

            } else {
                preActivateVersion(true);
            }
        };

        function fixUpUrlWithParams(url) {
            var searchParams = window.location.search.substr(1).split('&');
            var hrefEl = document.createElement('a');
            hrefEl.href = url;
            var newSearchParams = hrefEl.search.substr(1).split('&');
            var combinedSearchParams = searchParams.reduce(function (obj, param) {
                var keyValue = decodeURI(param).split('=');
                obj[encodeURIComponent(keyValue[0])] = encodeURIComponent(keyValue[1]);
                return obj;
            }, {});
            newSearchParams.forEach(function (param) {
                var keyValue = decodeURI(param).split('=');
                combinedSearchParams[encodeURIComponent(keyValue[0])] = encodeURIComponent(keyValue[1]);
            });
            combinedSearchParams.cb = Date.now();
            return hrefEl.pathname + '?' + Object.keys(combinedSearchParams).reduce(function (str, paramKey) {
                if (paramKey && paramKey.length > 0 && combinedSearchParams[paramKey] !== undefined) {
                    str += '&' + paramKey + '=' + combinedSearchParams[paramKey];
                }
                return str;
            }, '');
        }

        $scope.deactivateVersion = () => preActivateVersion(false);

        $scope.delete = function () {
            var modalScope = $scope.$new();
            modalScope.ok = function () {
                remoteActions.deleteOmniScript($rootScope.scriptElement.Id)
                    .then(function (response) {
                        if ($window.top !== $window && $window.sforce.console.isInConsole()) {
                            sforce.console.getEnclosingTabId(function (response) {
                                sforce.console.closeTab(response.id);
                            });
                        } else {
                            window.vlocityOpenUrl(response);
                        }
                    });
            };
            $modal({
                title: $localizable('OmniDesConfirmDeleteTitle'),
                template: 'confirmationModal.tpl.html',
                content: $localizable(isIntegrationProcedure ?
                    'IntDesConfirmDeleteContent' : 'OmniDesConfirmDeleteContent'),
                scope: modalScope,
                show: true
            });
        };

        $scope.export = function ($event) {
            if ($event.altKey) {
                backcompatExport($rootScope.scriptElement);
                return;
            }
            $drvExport({
                scope: $scope,
                drvExport: $rootScope.scriptElement.Id,
                drvSuggestedName: $rootScope.scriptElement.Name,
                drvDataPackType: isIntegrationProcedure ? 'IntegrationProcedure' : 'OmniScript'
            });
        };

        $scope.disableOpenInLwcDesigner = function() {
            return $rootScope.scriptElement.IsLwcEnabled__c && compilerService.getLwcErrors($rootScope.scriptElement.Type__c, $rootScope.scriptElement.SubType__c, $rootScope.scriptElement.Language__c).length > 0;
        }

        function preActivateVersion(isActivate) {

            // Enable spinners
            $rootScope.scriptElement.saving = true;
            $rootScope.scriptElement.activating = true;

            executeActivation(isActivate)
                .then(responseObj => {

                    if (isIntegrationProcedure || !$rootScope.scriptElement.IsLwcEnabled__c || /redirectTo/.test(responseObj.url)) {
                        postActivation(responseObj);
                    } else {
                        let promise = Promise.resolve();
                        if (isActivate) {
                            // Process the LWC
                            promise = processLwc(isActivate);
                        }
                        promise.then(() => postActivation(responseObj));
                    }
                });
        }

        function executeActivation(isActivate) {
            return new Promise((resolve, reject) => {
                // Create the request
                var input = angular.toJson({
                    Id: $rootScope.scriptElement.Id
                });
                var options = angular.toJson({
                    url: isIntegrationProcedure ? 'integrationproceduredesigner' : 'omniscriptdesigner'
                });
                var className = fileNsPrefixDot() + 'BusinessProcessController.BusinessProcessControllerOpen';
                const method = isActivate ? 'ActivateVersion' : 'DeactivateVersion';

                // Execute the request
                vlocityVFActionFunctionControllerHandlers.runServerMethod(className, method,
                    input, options, false)
                    .then(response => resolve(JSON.parse(response)))
                    .catch(reject);
            });
        }

        function postActivation(responseObj) {
            // Disable spinners
            $rootScope.scriptElement.saving = false;
            $rootScope.scriptElement.activating = false;

            // Complete the activation
            var url = responseObj.url;
            if ($window.top !== $window && $window.sforce.console.isInConsole()) {
                sforce.console.getEnclosingPrimaryTabId(function (parentTabResponse) {
                    sforce.console.getEnclosingTabId(function (response) {
                        if (response.id === parentTabResponse.id) {
                            sforce.console.openPrimaryTab(null, fixUpUrlWithParams(url), true);
                        } else {
                            sforce.console.openSubtab(parentTabResponse.id, fixUpUrlWithParams(url), true);
                        }
                        sforce.console.closeTab(response.id);
                    });
                });
            } else {
                window.location = fixUpUrlWithParams(url);
            }
        }

        /**
         * If a component exists, re-deploys the LWC in order to overwrite the "Not found" component
         */
        function processLwc(isActivate) {
            return new Promise((resolve, reject) => {

                const type = $rootScope.scriptElement.Type__c,
                    subType = $rootScope.scriptElement.SubType__c,
                    language = $rootScope.scriptElement.Language__c,
                    sId = $rootScope.scriptElement.Id,
                    addRuntimeNamespace = window.omniLwcCompilerConfig.isInsidePckg,
                    namespace = window.omniLwcCompilerConfig.namespacePrefix;

                if (isActivate) {

                    const lwcName = compilerService.getLwcName(type, subType, language);
                    bpService.loadActiveLwc(type, subType, language)
                        .then(jsonObj => compilerService.compileActivated(lwcName, jsonObj, addRuntimeNamespace, namespace))
                        .then(resources => toolingService.deployResources(lwcName, resources, sId, compilerService.getPackageMetaXmlAsJson(type, subType, language, sId, lwcName, addRuntimeNamespace, namespace)))
                        .then(resolve)
                        .catch(error => compilerService.showDeploymentError(error, $localizable('OmniDesLwcDeployError')).then((resolve)));
                } else {

                    compilerService.deactivateLwc(type, subType, language, sId, addRuntimeNamespace, namespace)
                        .then(resolve)
                        .catch(error => {

                            // Re-activate the OS, we were not able to deploy. Notify the user that needs to verify the LWC manually.
                            executeActivation(true)
                                .finally(() => {
                                    compilerService.showDeploymentError(error, $localizable('OmniDesLwcDeactivateDeployError'))
                                        .then(resolve);
                                });
                        });
                }
            });
        }
    });

},{}],53:[function(require,module,exports){
var PaletteElement = require('../../oui/util/PaletteElement.js');
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');

angular.module('omniscriptDesigner')
  .controller('structureCanvas', function ($rootScope, $scope, $q, remoteActions, save,
    deleteElement, $timeout, $interval, $modal, $localizable, NotSupportedElmService, IsFoundation) {
    'use strict';

    $scope.notDispOnTmltObj = NotSupportedElmService.getList();

    $scope.onDNDDrop = function (event, index, item, external, type, allowedType, eleParent) {
      var elementBeingDragged, parent;
      var eleParentIsActionBlock = eleParent && eleParent.Type__c && eleParent.Type__c.type === 'action-block';
      // we're moving an existing element
      if (angular.isString(item)) {
        elementBeingDragged = CanvasElement.getById(item);
        if (elementBeingDragged.saving) {
          return false;
        }

        parent = elementBeingDragged.parent();
        var oldIndex = parent.children.indexOf(elementBeingDragged);
        var newParentId = $(event.currentTarget).data('elementId');
        // check we're not dropping something on to itself
        if (newParentId === item) {
          return false;
        }

        // Prevent existing actions from being dropped inside an action-block when max number of children
        // in action block >= 4 and prevent existing Set Values and Set Errors from being dragged in
        if (newParentId !== parent.Id && eleParentIsActionBlock &&
            (eleParent.children.length >= 4 || elementBeingDragged.Type__c.label === 'Set Values' ||
                elementBeingDragged.Type__c.label === 'Set Errors')) {
          return false;
        }

        // Prevent existing Custom LWC from being dropped into a Block whose direct parent is not a Step
        if (newParentId !== parent.Id && elementBeingDragged.Type__c.label === 'Custom Lightning Web Component' && eleParent.Type__c.label === 'Block' && eleParent.parent().Type__c.label !== 'Step') {
            return false;
        }

        if (newParentId === parent.Id) {
          // if the oldIndex is the same as the newIndex then this element was moved upwards
          // therefore we need to find a copy of it at the end of the list.
          if (oldIndex === index) {
            oldIndex = parent.children.lastIndexOf(elementBeingDragged);
            var removed = parent.children.splice(oldIndex, 1);
            if (removed.length === 0) {
              console.log('Could not delete element');
            }
            return elementBeingDragged;
          }
        }

        // if we've moved the element lower in the same parent
        // then we need to defer the removal to prevent the new element
        // being inserted in the wrong place - this is because
        // when this function returns the angular-drap-and-drop-lists
        // library will do the actual move of the element into `index`
        // but if we've removed something earlier in the list `index` will be
        // off by one.
        if (oldIndex < index && parent.Id === newParentId) {
          $timeout(function () {
            var removed = parent.children.splice(oldIndex, 1);
            if (removed.length === 0) {
              console.log('Could not delete element');
            }
          });
        } else {
          // we can't do the others in a timeout (e.g. if moving up
          // or to a different parent) because the logic causes duplicate
          // elements to appear and/or disappear completely. It's only
          // safe to do the timeout option in the same parent.
          var removed = parent.children.splice(oldIndex, 1);
          if (removed.length === 0) {
            console.log('Could not delete element');
          }
        }
        elementBeingDragged.ParentElementId__c = null;
      } else {
        // Prevent new action elements from being dropped from the palette when the number of childrens
        // in an existing action-block is >= 4. Also prevents Set Values and Set Errors from being dropped into an Action Block
        if (eleParentIsActionBlock && (eleParent.children.length >= 4 || item.label === 'Set Values' || item.label === 'Set Errors')) {
          return false;
        }
        // Prevent Custom LWC from being dropped into a Block whose direct parent is not a Step
        if (item.label === 'Custom Lightning Web Component' && eleParent.Type__c.label === 'Block' && eleParent.parent().Type__c.label !== 'Step') {
          return false;
        }
        var paletteElementBeingDragged = PaletteElement.getPaletteElement(item.label, item.scriptElement ? {
          Type: item.scriptElement.Type__c,
          'Sub Type': item.scriptElement.SubType__c,
          'Language': item.scriptElement.Language__c
        } : {}, item.scriptElement);
        elementBeingDragged = new CanvasElement(paletteElementBeingDragged, IsFoundation);
      }
      $timeout(function () {
        // in addition any elements we've dropped it in front of
        // need their Order__c updated so we need to save them too
        var parentOfDraggedEl = elementBeingDragged.parent();
        // we'll go through all the children because if some came with an existing
        // Order__c which was using base 10 or 100 they will be completely out of place now
        // - there's logic in Save to avoid resending unchanged data which will avoid
        //   the performance hit of unnecessary requests
        for (var i = 0; i < parentOfDraggedEl.children.length; i++) {
          save(parentOfDraggedEl.children[i]);
        }

        $rootScope.$broadcast('activeElementInCanvas', elementBeingDragged);
        $scope.setDisOnTpltPrp(elementBeingDragged);
      }, 200);

      return elementBeingDragged;
    };

    var debounce = null;
    $scope.onDNDMove = function (event, index, type, external, allowedType, eleParent) {
      // prevent DnD actions from being moved inside an action-block when max number of children in action block > 4
      if (eleParent && eleParent.Type__c && eleParent.Type__c.type === 'action-block' && eleParent.children.length > 4) {
        return;
      }

      // scroll the structure panel if we need to on mouse over while dragging
      var lastMouseEvent = null;
      var config = {
        activationDistance: 30,
        scrollDistance: 50,
        scrollInterval: 250
      };

      if (debounce) {
        $timeout.cancel(debounce);
      }
      debounce = $timeout(function () {
        if (!lastMouseEvent) return;
        var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        var scrollY = 0;
        if (lastMouseEvent.clientY < config.activationDistance) {
          // If the mouse is on the top of the viewport within the activation distance.
          scrollY = -config.scrollDistance;
        } else if (lastMouseEvent.clientY > viewportHeight - config.activationDistance) {
          // If the mouse is on the bottom of the viewport within the activation distance.
          scrollY = config.scrollDistance;
        }

        if (scrollY !== 0) {
          var structureCanvas = angular.element('.structureCanvas')[0];
          structureCanvas.scrollTop += scrollY;
        }
      }, 250);

      lastMouseEvent = event;
      return true; // always return true because we can always drop here
    };

    $scope.onCanvasElementClick = function (element, $event) {
      $rootScope.$broadcast('activeElementInCanvas', element);
      if ($event) {
        $event.stopPropagation();
      }
    };

    /**
     * [onCanvasCheckboxElementClick save the updated element based on updated value of disOnTplt]
     * @param  {[type]} element [checked element which is dragged element from omniscript component to Script Configuration ]
     * @param  {[type]} evnt  [event after clicking on element]
     * @return {[type]}         [None]
     */
    $scope.onCanvasCheckboxElementClick = function (element, evnt) {
      save(element);
      $rootScope.$broadcast('elementPropertyChanged');
      if (evnt) {
        evnt.stopPropagation();
      }
    };


    /**
     * [setDisOnTpltPrp Initialize checkbox model value based disOnTplt and non-supported element list]
     * @param {[type]} element [element of editBlock]
     */
    $scope.setDisOnTpltPrp = function (element) {
      if (element.PropertySet__c.disOnTplt === undefined) {
        element.PropertySet__c.disOnTplt = false;
        save(element);
        return;
      }
    };


    $scope.delete = function (element) {
      return $q(function (resolve, reject) {
        var modalScope = $scope.$new();
          modalScope.ok = function () {
            var parent = element.parent();
            deleteElement(element)
                .then(function () {
                    parent.each(function (child) {
                        save(child);
                    });
                })
                .then(function () {
                    $rootScope.$broadcast('activeElementInCanvas', element.ParentElementId__c || element.OmniScriptId__c);
                    resolve(true);
                });
        };
        return $modal({
          title: $localizable('OmniDesConfirmDeleteTitle'),
          templateUrl: 'confirmationModal.tpl.html',
          content: $localizable('OmniDesConfirmDeleteElContent'),
          scope: modalScope,
          show: true
        });
      });
    };

    $scope.clone = function (element) {
      var clone = element.clone(IsFoundation);
      var parent = clone.parent();

      // prevent cloning of actions inside an action-block when max number of children in action block >= 4
      if (parent && parent.Type__c && parent.Type__c.type === 'action-block' && parent.children.length >= 4) {
          return;
      }

      parent.children.splice(parent.children.indexOf(element) + 1, 0, clone);
      // we'll go through all the children because if some came with an existing
      // Order__c which was using base 10 or 100 they will be completely out of place now
      // - there's logic in Save to avoid resending unchanged data which will avoid
      //   the performance hit of unnecessary requests
      var promises = [];
      for (var i = 0; i < parent.children.length; i++) {
        promises.push(save(parent.children[i]));
      }
      $q.all(promises).then(function () {
        $rootScope.$broadcast('activeElementInCanvas', clone);
      });
    };

    $rootScope.$on('activeElementInCanvas', function (event, args) {
      if (angular.isString(args)) {
        $scope.activeElement = CanvasElement.getById(args);
      } else {
        $scope.activeElement = args;
      }
      if (!$scope.activeElement) {
        $scope.activeElement = $rootScope.scriptElement;
      }
    });

    var getNextColor = (function () {
      var colors = ['pink', 'orange', '#008ab3', '#f65327', '#05a6df', '#eac438', '#58a300'];
      var index = 0,
        mapOfKeysToColor = {};
      return function (key) {
        if (!mapOfKeysToColor[key]) {
          if (index === colors.length) {
            index = 0;
          }
          mapOfKeysToColor[key] = colors[index++];
        }
        return mapOfKeysToColor[key];
      };
    })();

    function compileShowGroup(group, element) {
      var evalString = ['('],
        evalStringIfUndefined = ['('];
      var colorMap = $scope.popover.controllingElementsColors;
      for (var i = 0; i < group.rules.length; i++) {
        if (i > 0) {
          if (group.rules[i].group || group.rules[i].field) {
            evalString.push(group.operator === 'AND' ? '&&\n' : '||\n');
          }
          if (group.rules[i].field) {
            evalStringIfUndefined.push(group.operator === 'AND' ? '&&\n' : '||\n');
          }
        }
        if (group.rules[i].group) {
          evalString.push(compileShowGroup(group.rules[i].group, element));
        } else if (group.rules[i].field) {
          var fieldName = group.rules[i].field.split('|')[0];
          var key = '$scope[\'' + fieldName + '\']',
            nextColor = getNextColor(fieldName);
          if (colorMap[fieldName]) {
            if (colorMap[fieldName].indexOf(nextColor) < 0) {
              colorMap[fieldName].push(nextColor);
            }
            if (!colorMap[element.Name]) {
              colorMap[element.Name] = [nextColor];
            } else if (colorMap[element.Name].indexOf(nextColor) < 0) {
              colorMap[element.Name].push(nextColor);
            }
            evalString.push(key);
            var condition = group.rules[i].condition;
            evalStringIfUndefined.push(key + ' != undefined');
            evalString.push(condition === '=' ? '==' : (condition === '<>' ? '!=' : condition));
            evalString.push('\'' + group.rules[i].data + '\'');
          }
        }
      }
      evalString.push(')');
      evalStringIfUndefined.push(')');
      if (evalStringIfUndefined.length < 3) {
        return evalString.join(' ');
      }
      return '(' + evalString.join(' ') + '&&' + evalStringIfUndefined.join(' ') + ')';
    }

    function compileShow(element) {
      if (element.PropertySet__c && element.PropertySet__c.show) {
        var evalString = compileShowGroup(element.PropertySet__c.show.group, element);
        evalString = evalString.replace(/(\|\||\&\&)*\s*\(\s*\)/g, '');
        if (!/^(\(\s*\)|\(\(\s*\)(\|\|\(\s*\))*\)|)$/.test(evalString)) {
          /*jshint evil:true */
          try {
            return new Function('$scope', 'return ' + evalString + ';');
          } catch (e) {
            console.log('Could not compile show rules into function', e,
              'function($scope) {\n\treturn ' + evalString + ';\n}');
          }
        }
      }
      return function () {
        return true;
      };
    }

    function evaluateShowRules(rules) {
      var scope = {},
        noRules = true;
      for (var i = 0; i < rules.length; i++) {
        if (rules[i].element) {
          noRules = false;
          scope[rules[i].element] = rules[i].value;
        }
      }
      if ($rootScope.scriptElement) {
        Object.keys($scope.popover.controllingElementsColors).forEach(function (key) {
          $scope.popover.controllingElementsColors[key] = [];
        });
        // filter the Structure Element and it's children to hide filtered out rules
        $rootScope.scriptElement.each(function (element) {
          if (element instanceof CanvasElement) {
            if (noRules) {
              element.filter = false;
              compileShow(element)(scope);
              if (angular.isObject(element.collapse) && element.collapse.automated) {
                element.collapse = false;
              }
            } else {
              var dontCollapseAgain = false;
              if (element.filter === true) {
                dontCollapseAgain = true;
              }
              element.filter = !compileShow(element)(scope);
              if (element.filter === true && !dontCollapseAgain) {
                element.collapse = {
                  automated: true
                };
              } else if (angular.isObject(element.collapse) && element.collapse.automated) {
                element.collapse = false;
              }
            }
          }
        });
      }
    }

    $scope.$watch('popover.rules', evaluateShowRules, true);

    $rootScope.$on('elementPropertyChanged', function (event, args) {
      $scope.popover.controllingEntities();
      evaluateShowRules($scope.popover.rules);
    });

    $scope.popover = {
      rules: [{
        element: null,
        value: ''
      }],
      controllingElementsColors: {},
      addRule: function () {
        $scope.popover.rules.push({
          element: null,
          value: ''
        });
      },
      clear: function () {
        $scope.popover.rules = [{
          element: null,
          value: ''
        }];
      },
      deleteRule: function (rule) {
        var indexToRemove = $scope.popover.rules.indexOf(rule);
        $scope.popover.rules.splice(indexToRemove, 1);
        if ($scope.popover.rules.length === 0) {
          $scope.popover.clear();
        }
      },
      controllingEntities: function () {
        function getAllEntitiesForGroup(group) {
          var names = [];
          if (group.rules) {
            for (var i = 0; i < group.rules.length; i++) {
              if (group.rules[i].group) {
                names = names.concat(getAllEntitiesForGroup(group.rules[i].group));
              }
              if (group.rules[i].field) {
                names.push(group.rules[i].field.split('|')[0]);
              }
            }
          }
          return names;
        }

        function getAllNamesForElement(element) {
          var controllingEntityNames = element.PropertySet__c &&
            element.PropertySet__c.show ? getAllEntitiesForGroup(element.PropertySet__c.show.group) : [];
          var children = element.children;
          for (var i = 0; i < children.length; i++) {
            controllingEntityNames = controllingEntityNames.concat(getAllNamesForElement(children[i]));
          }
          return controllingEntityNames;
        }
        var allNames = getAllNamesForElement($rootScope.scriptElement);

        for (var i = 0; i < allNames.length; i++) {
          var nextColor = getNextColor(allNames[i]);
          if (!$scope.popover.controllingElementsColors[allNames[i]]) {
            $scope.popover.controllingElementsColors[allNames[i]] = [nextColor];
          } else if ($scope.popover.controllingElementsColors[allNames[i]].indexOf(nextColor) < 0) {
            $scope.popover.controllingElementsColors[allNames[i]].push(nextColor);
          }
          var existingIndex = allNames.indexOf(allNames[i]);
          if (existingIndex !== i && existingIndex > -1) {
            allNames.splice(i--, 1);
          }
        }
        return allNames;
      }
    };

    $scope.collapseAll = function () {
      $rootScope.scriptElement.each(function (element) {
        element.collapse = true;
      });
    };

    $scope.expandAll = function () {
      $rootScope.scriptElement.each(function (element) {
        element.collapse = false;
      });
    };

    $scope.allExpanded = function () {
      var allExpanded = true;
      if ($rootScope.scriptElement) {
        $rootScope.scriptElement.each(function (element) {
          if (element.collapse) {
            allExpanded = false;
          }
        });
      }
      return allExpanded;
    };

  });

},{"../../oui/util/CanvasElement.js":91,"../../oui/util/PaletteElement.js":93,"../../oui/util/ScriptElement.js":94}],54:[function(require,module,exports){
angular.module('omniscriptDesigner')
    .controller('intProcedureTabbedController', function($rootScope, $scope, $localizable) {
        'use strict';

        $scope.tabs = [{title:$localizable('OmniDesTabProperties'), content: ''}];
        $scope.tabs.activeTab = 0;

        $scope.$watch(function() {
            return $scope.tabs.activeTab;
        }, function(newValue, oldValue) {
            if (newValue === 1 && $rootScope.scriptElement.Id) {
                $rootScope.collapsePalette = $rootScope.fullScreen = true;
            } else {
                $rootScope.collapsePalette = $rootScope.fullScreen = false;
            }
        });

        $rootScope.$on('activeElementInCanvas', function(event, element, skipTabChange) {
            if ($scope.tabs.activeTab !== 0 && !skipTabChange) {
                $scope.tabs.activeTab = 0;
            }
        });

        $scope.$watch('scriptElement.Id', function(id) {
            if (id && $scope.tabs.length < 2) {
                $scope.tabs.push({
                    title: $localizable('OmniDesTabPreview'),
                    content: ''
                });
            }
        });

    });

},{}],55:[function(require,module,exports){
angular.module("omniscriptDesigner")
.directive('input', function () {
    return {
        restrict: 'E',
        require: '?ngModel',
        link: function (scope, elem, attrs, ctrl) {
            if (attrs.type.toLowerCase() !== 'number') {
                return;
            } //only augment number input!
            ctrl.$formatters.push(function (value) {
                return !isNaN(value) ? parseFloat(value) : null;
            });
        }
    };
});
},{}],56:[function(require,module,exports){
angular.module("omniscriptDesigner")
.directive("paletteGroup", function() {
  return {
    restrict: 'E',
    replace: true,
    scope: {
      group: "=elements",
      grouptitle: "=",
      expanded: '=?'
    },
    templateUrl: 'paleteElementGroup.tpl.html',
    link: function($scope) {
      $scope.model = {
        expand: $scope.expanded == true
      };
    }
  };
});
},{}],57:[function(require,module,exports){
angular.module("omniscriptDesigner")
.directive("preventDeleteBack", function($window){
    return function (scope, element, attrs) {
      /*
       * this swallows backspace keys on any non-input element.
       * stops backspace -> back
       */
      var rx = /INPUT|SELECT|TEXTAREA/i;

      angular.element(document).bind("keydown keypress", function(e){
        if( e.which == 8 ){ // 8 == backspace
          if(!rx.test(e.target.tagName) || e.target.disabled || e.target.readOnly ){
            e.preventDefault();
          }
        }
      });
    };
  });
},{}],58:[function(require,module,exports){
angular.module("omniscriptDesigner")
.directive("viaAffix", function($window){
    if ($window.parent && $window.parent !== $window) {
      return {};
    }
    return function (scope, element, attrs) {
      var stickyTop = $(element).offset().top; 
      $(window).scroll(function() {
        var windowTop = $(window).scrollTop();
        if (stickyTop < windowTop) {
          $(element).parent().height($(window).height());
          $(element).css({ position: 'fixed', top: 0, width: "calc(100% - 20px)" });
          $(element).addClass("viaAffix");
        } else {
          $(element).removeClass("viaAffix");
          $(element).css({'position':'static', width: '100%'});
        }
      });
    };
  });
},{}],59:[function(require,module,exports){
angular.module('omniscriptDesigner')
    .directive('intProcedurePreviewPanel', function($q, $location, remoteActions) {
        'use strict';
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                jsonParams: '=initialJson',
                omniscript: '=',
            },
            bindToController: true,
            templateUrl: 'previewIntProcedure.tpl.html',
            controllerAs: 'vm',
            controller: function($rootScope, $scope, remoteActions, vkbeautify) {
                var vm = this;

                this.jsonMode = false;
                this.requesting = false;
                this.hostPrefix = $location.protocol() + '://' + $location.host();
                this.serviceUrl = this.hostPrefix + this.url;

                this.toggleJsonMode = toggleJsonMode;
                this.submitRequest = submitRequest;
                this.addParam = addParam;
                this.deleteParam = deleteParam;
                this.reset = reset;
                this.toggleAccordian = toggleAccordian;
                this.getDebugType = getDebugType;
                this.currentSection = 'debug';
                this.optionsJson = '{"isDebug":true, "chainable":false, "resetCache":false, "ignoreCache":true, "queueableChainable":false, "useQueueableApexRemoting":false}';
                this.isDebug = true;

                // public functions
                function toggleJsonMode() {
                    vm.jsonMode = !vm.jsonMode;
                    if (vm.jsonMode) {
                        if (vm.params) {
                            vm.jsonParams = JSON.stringify(vm.params.reduce(function(obj, param) {
                                obj[param.key] = param.value;
                                return obj;
                            }, {}), null, 4);
                        }
                    } else {
                        var params = JSON.parse(vm.jsonParams);
                        vm.params = Object.keys(params).reduce(function(arr, key) {
                            arr.push({key: key, value: params[key]});
                            return arr;
                        }, []);
                        vm.invalidJSON = false;
                    }
                }

                var unwatch = $scope.$watch('vm.omniscript', function(omni) {
                    if (omni && !vm.jsonParams) {
                        vm.jsonParams = '{}';
                        unwatch();
                    }
                });

                $scope.$watch('vm.jsonParams', function(json) {
                    try {
                        JSON.parse(vm.jsonParams);
                        if (!vm.params) {
                            var params;
                            if (vm.jsonParams) {
                                params = JSON.parse(vm.jsonParams);
                            }
                            vm.params = Object.keys(params).reduce(function(arr, key) {
                                arr.push({key: key, value: params[key]});
                                return arr;
                            }, []);
                        }
                        vm.invalidJSON = false;
                    } catch (e) {
                        vm.invalidJSON = true;
                    }
                });

                $scope.$watch('vm.params', function(params) {
                    if (vm.omniscript && vm.omniscript.Id) {
                        vm.jsonParams = JSON.stringify(vm.params.reduce(function(obj, param) {
                            obj[param.key] = param.value;
                            return obj;
                        }, {}), null, 4);
                    }
                }, true);

                $scope.$watch('vm.optionsJson', function(optionsJson) {
                    try {
                        JSON.parse(vm.optionsJson);

                        var options;

                        if (vm.optionsJson) {
                            options = JSON.parse(vm.optionsJson);
                        }

                        vm.inputOptions = Object.keys(options).reduce(function(obj, key) {
                            obj[key] = options[key];
                            return obj;
                        }, {});

                        vm.isDebug = vm.inputOptions.isDebug;
                        vm.validJson = true;
                    } catch (e) {
                        vm.validJson = false;
                    }
                 });

                function reset() {
                    vm.params = [];
                }

                function addParam() {
                    vm.params.push({key:'',value:''});
                }

                function deleteParam(param) {
                    vm.params.forEach(function(param_, i) {
                        if (param_ == param) {
                            vm.params.splice(i, 1);
                        }
                    });
                }

                function runChainable(response) {
                    var options = {
                        'vlcIPData' : response.vlcIPData,
                        'isDebug': vm.inputOptions.isDebug,
                        'useQueueableApexRemoting': response.vlcUseQueueableApexRemoting
                    };

                    submitRequest(options);
                }

                function responseHandler(response) {
                    if (typeof(response) === 'string') {
                        response = JSON.parse(response);
                    }

                    if (response
                     && response.vlcIPData
                     && response.vlcStatus === 'InProgress') {
                        runChainable(response);
                    } else {
                        vm.requesting = false;
                        vm.elapsedTimeActual = response.elapsedTimeActual;
                        vm.elapsedTimeCPU = response.elapsedTimeCPU;
                        vm.vlcCacheResult = !!response.vlcCacheResult;

                        if (response.response) {
                           vm.response.returnResultsData = response.response;
                        } else if (response && !vm.isDebug) {
                            vm.response.returnResultsData = response;
                        } else if (response && response.responseText) {
                            vm.response.errors = JSON.parse(response.responseText);
                        } else {
                            vm.response.errors = [response || 'Request Failed'];
                        }

                        vm.outputDropdown = [{
                                name: 'Debug Response Full',
                                response: response
                            },
                            {
                                name: 'Debug Log',
                                response: response.debugLog
                            },
                            {
                                name: 'Full DataJSON',
                                response: response.fullDataJson
                            },
                            {
                                name: 'Response',
                                response: response.response
                            },
                            {
                                name: 'Original Input',
                                response: response.originalInput
                            },
                            {
                                name: 'Execution Sequence',
                                response: response.executionSequence
                            }
                        ];

                        (response.executionSequence || []).forEach(function(key) {
                            if (response[key] !== null) {
                                var language = getDebugType(response[key]);
                                var config = {
                                    name: key,
                                    response: response[key],
                                    language: language
                                };
                                if (language === 'xml') {
                                    config.response = vkbeautify.xml(config.response);
                                }

                                vm.outputDropdown.push(config);

                                if (response[key + 'Debug']) {
                                    vm.outputDropdown.push({
                                        name: key + 'Debug',
                                        response: response[key + 'Debug'],
                                        language: 'json'
                                    });
                                }

                            }
                        });

                        vm.selectedOption = vm.outputDropdown[0];
                    }
                }

                function submitRequest(options) {
                    vm.requesting = true;
                    var startTime = Date.now();
                    vm.response = {};
                    vm.response.errors = [];
                    vm.response.debugLog = {};
                    vm.outputDropdown = [];
                    var vlcResponse = {};
                    var timeoutIsSet = false;

                    if (!options) {
                        options = vm.inputOptions;
                    }

                    remoteActions.testIntegrationProcedure(vm.omniscript.Id, vm.jsonParams, options).then(function(response) {
                        if (typeof(response) === 'string') {
                            vlcResponse = JSON.parse(response);
                        }

                        if (vlcResponse
                            && vlcResponse.vlcIPData
                            && vlcResponse.vlcStatus === 'InProgress'
                            && vlcResponse.vlcAsync)
                        {
                            timeoutIsSet = true;

                            setTimeout(function()
                            {
                                timeoutIsSet = false;
                                responseHandler(response);
                            }, 5000);
                        }
                        else
                        {
                            responseHandler(response);
                        }
                    })
                    .catch(function(response) {
                        if (response.responseText) {
                            vm.response.errors = JSON.parse(response.responseText);
                        } else if (response.message) {
                            vm.response.errors = [ response.message, response ];
                        } else {
                            vm.response.errors = [response || 'Request Failed'];
                        }
                    })
                    .finally(function() {
                        if (!timeoutIsSet)
                        {
                            vm.requesting = false;

                            if (vlcResponse.vlcIPData && vlcResponse.vlcStatus == 'InProgress') {
                                vm.requesting = true;
                            }

                            var doneTime = Date.now();
                            vm.requestTime = doneTime - startTime;
                            vm.sidebarOpen = true;
                            if (!_.isEmpty(vm.response.errors)) {
                                if (!angular.isArray(vm.response.errors)) {
                                    vm.response.errors = [vm.response.errors];
                                }
                                vm.response.errors = vm.response.errors.map(function(error) {
                                    return error.errorCode ? error.errorCode + ' - ' + error.message : error;
                                });
                                vm.currentSection = 'errors';
                            } else {
                                vm.currentSection = 'debug';
                            }
                        }
                    })
                }

                function toggleAccordian(openIfClosed, openIfOpen) {
                    if (vm.currentSection === openIfClosed) {
                        vm.currentSection = openIfOpen;
                    } else {
                        vm.currentSection = openIfClosed;
                    }
                }

                function getDebugType(data) {
                    if (angular.isString(data)) {
                        try {
                            JSON.parse(data);
                            return 'json';
                        } catch (e) {}
                        try {
                            if (window.DOMParser)
                            {
                                var parser = new DOMParser();
                                parser.parseFromString(data,"text/xml");
                                return 'xml';
                            } else { // Internet Explorer
                                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                                xmlDoc.async = "false";
                                xmlDoc.loadXML(data);
                                return 'xml';
                            }
                        } catch (e) {}
                        return 'yaml';
                    }
                    return 'json';
                }
            }

        };
    });

},{}],60:[function(require,module,exports){
(function(){
    'use strict';
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('enableLogging', ['tObjectFactory', function(tObjectFactory){
        return{
            restrict: 'A',
            link: function(scope, element, attrs){
                element.on('click', function() {
                    scope.$apply(function() {
                        tObjectFactory.visible = !tObjectFactory.visible;
                    });
                });
            }
        };
    }]);
    
}());

},{}],61:[function(require,module,exports){
// https://github.com/fmquaglia/ngOrderObjectBy
'use strict';
(
  function(angular) {
    return angular
      .module('ngOrderObjectBy', [])
      .filter('orderObjectBy', function() {
        return function (items, field, reverse) {

          function isNumeric(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
          }
          
          var filtered = [];

          angular.forEach(items, function(item, key) {
            if (angular.isString(item)) {
                item = {
                    key: key,
                    value: item
                };
            } else {
                item.key = key;
            }      
            filtered.push(item);
          });

          function index(obj, i) {
            return obj[i];
          }

          filtered.sort(function (a, b) {
            var comparator;
            var reducedA = field.split('.').reduce(index, a);
            var reducedB = field.split('.').reduce(index, b);

            if (isNumeric(reducedA) && isNumeric(reducedB)) {
              reducedA = Number(reducedA);
              reducedB = Number(reducedB);
            } else if (angular.isString(reducedA) && angular.isString(reducedB)) {
                reducedA = reducedA.toLowerCase();
                reducedB = reducedB.toLowerCase();
            }

            if (reducedA === reducedB) {
              comparator = 0;
            } else {
              comparator = reducedA > reducedB ? 1 : -1;
            }

            return comparator;
          });

          if (reverse) {
            filtered.reverse();
          }

          return filtered;
        };
      });
  }
)(angular);
},{}],62:[function(require,module,exports){
(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .directive('showHideRule', ShowHideRuleDirective);

    ShowHideRuleDirective.$inject = [];
    function ShowHideRuleDirective() {
        var directive = {
            bindToController: true,
            controller: ShowHideRuleController,
            controllerAs: 'vm',
            restrict: 'A',
            replace: true,
            templateUrl: 'show-rule-property-template.tpl.html',
            scope: {
                rule: '=',
                isDisabled: '=',
                rootRule: '=?',
                parent: '=?',
                elementNames: '='
            }
        };
        return directive;
    }
    
    ShowHideRuleController.$inject = ['$localizable'];
    function ShowHideRuleController ($localizable) {
        var vm = this;

        vm.operators = [{
            value: 'AND',
            label: $localizable('OmniDesAnd')
        }, {
            value: 'OR',
            label: $localizable('OmniDesOr')
        }];

        vm.conditions = [{
            value: '=',
            label: $localizable('OmniDesIsEqualTo')
        }, {
            value: '<>',
            label: $localizable('OmniDesDoesNotEqual')
        }, {
            value: '<',
            label: $localizable('OmniDesIsLessThan')
        }, {
            value: '>',
            label: $localizable('OmniDesIsGreaterThan')
        }, {
            value: '<=',
            label: $localizable('OmniDesIsLessThanEqual')
        }, {
            value: '>=',
            label: $localizable('OmniDesIsGreaterThanEqual')
        }];

        
        vm.addCondition = function (group) {
            group.rules.push({
                'condition': '=',
                'field': null,
                'data': null
            });
        };

        vm.addGroup = function (group) {
            group.rules.push({
                'group': {
                    operator: 'AND',
                    'rules': [{
                        'condition': '=',
                        'field': null,
                        'data': null
                    }]
                }
            });
        };

        vm.deleteRule = function (rule) {
            var resolvedRuleSet = (vm.parent.rule ? vm.parent.rule.group.rules :  vm.parent.group.rules);
            for (var i = 0; i < resolvedRuleSet.length; i++) {
                if (resolvedRuleSet[i] === rule) {
                    resolvedRuleSet.splice(i, 1);
                    return;
                } else if (resolvedRuleSet[i].group) {
                    vm.deleteRule(rule, resolvedRuleSet[i].group.rules);
                }
            }
        };

        vm.deleteGroup = function (group) {
            vm.deleteRule(group);
        };

    }
})();
},{}],63:[function(require,module,exports){
(function(){
    /*jshint -W030 */
    'use strict';
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcDebugJsonTreeView', ['$compile', 'tObjectFactory', function($compile, tObjectFactory){
        return {
            restrict: 'E',
            scope:{
                jsonData: '=',
            },
            transclude: true,
            controller: function($scope, $element) {
                $scope.clear = function() {
                    tObjectFactory.clearTObjects();
                    $scope.jsonData = tObjectFactory.tObjects();
                };
                
                $scope.tPanel = function(tObject, flag) {
                    if (flag) {
                        tObject.visible = !tObject.visible;
                    }
                };

                //close the debug panel based on this switch
                $scope.toggleVisibility = function() {
                    tObjectFactory.visible = false;
                    $scope.$broadcast('eScroll'); //OMNI-2176
                };

                $scope.getClass = function(tObject) {
                    if (tObject.visible) {
                        return 'spreadOut';
                    }else {
                        return '';
                    }
                };

                //property on scope displays the prop based on the json object
                $scope.display = function(key) {
                    if(key === 'stage' || key === 'visible' || key === 'created' || key === 'name') {
                        return false;
                    }
                    return true;
                };

                //pre formatting the json 
                $scope.beautify = function(value,innerObject){
                    if (!innerObject.oneLineItem){
                        return '<pre>' + angular.toJson(value, true) + '</pre>';
                    }else{
                        return angular.toJson(value); 
                    }
                };
            },
            template: //comment
            '<div class="vlc-debug-panel modal-content" ng-if=visible vlc-modal-draggable vlc-bubble-canceller>'+
                '<div class="hexpand" vlc-expand-collapse prop="width"></div>'+
                '<div class="modal-header">'+
                '  <button type="button" class="close" aria-label="Close" ng-click="toggleVisibility()">'+
                '    X'+
                '  </button>'+
                '  <h4 class="modal-title vlc-debug-console-header"><strong>Omniscript Debug Console</strong></h4>'+
                '  <div class="vlc-debug-controls">'+
                '    <input type="text" class="form-control" ng-model="input.search" placeholder="Search"/>'+
                '  </div>'+
                '</div>'+
                '<div class="modal-body">'+
                '    <ul class="debug-object-list">' +
                '      <li ng-repeat="tObject in jsonData | filter:{name:input.search}" ng-click="tPanel(tObject,true)" ng-class="getClass(tObject)">'+
                '        <strong>{{tObject.name}}</strong>( {{tObject.stage}}{{tObject.created | date:"yyyy-MM-dd HH:mm:ss Z"}} )'+
                '        <button style="background:none;padding:0;margin:0" class="btn" vlc-clipboard="{}" vlc-clipboard-value="tObject">'+
                '        <span style="position:relative;top: -1px" class="glyphicon icon-v-copy" aria-hidden="true"></span>'+
                '        </button>'+
                '        <ul ng-show="tObject.visible" class="sublist">'+
                '          <li ng-repeat="(key,value) in tObject" ng-if="display(key)" vlc-collapsible>'+
                '            <strong>{{key}}</strong>'+
                '            <button ng-hide="innerObject.oneLineItem" obj=innerObject style="background:none;padding:0;margin:0" class="btn"'+
                '              vlc-clipboard="{}" vlc-clipboard-value="value">'+
                '              <span style="position:relative;top: -1px" class="glyphicon icon-v-copy" aria-hidden="true"></span>'+
                '            </button>'+
                '            <div ng-class=innerObject.oneLineItem?"li-flat":"" ng-show="innerObject.visible" class="sublist">'+
                '              <span vlc-bubble-canceller click="true" ng-bind-html="beautify(value, innerObject)"></span>'+ 
                '            </div>'+
                '          </li>'+
                '        </ul>'+
                '      </li>'+
                '    </ul>'+
                '</div>'+
                '<div class="modal-footer">'+
                '  <button ng-click="clear()" class="btn btn-default">Clear</button>' +
                '  <div class="expand" vlc-expand-collapse="" classes="vlc-debug-panel, modal-body" prop="min-height">'+
                '  </div>'+
                '</div>'+
                '</div>', //div ends for modal content
                compile: function(element, attrs, transclude){
                    var contents = element.contents().remove();
                    var compiledContents;
                    
                    return function(scope, iElement, iAttrs){
                        scope.visible = tObjectFactory.visible;
                        
                        //this watch toggles  the modal window
                        scope.$watch(function(){
                            return tObjectFactory.visible;
                        },function(newValue, oldValue){
                            if (newValue !== oldValue){
                                scope.visible = tObjectFactory.visible;
                            }
                        });

                        //puts the objects into the queue - would only work in ie 9 and above 
                        window.addEventListener && (function(){
                            window.addEventListener('message', function(event){
                                try {
                                    tObjectFactory.createNetTransObject(angular.fromJson(event.data));
                                    //view only needs to be updated if the console is up
                                    if (scope.visible){
                                        scope.$apply(); //will fire the watchers on the updated flag
                                    }
                                } catch (e) {
                                    // swallow unparsable data
                                }
                            }, false);
                        }());

                        //preveent scroll bubbling
                        /*angular.element(iElement).bind('mouseenter', function(e){
                            angular.element('body').addClass('noScroll');
                        });

                        angular.element(iElement).bind('mouseleave', function(e){
                            angular.element('body').removeClass('noScroll');
                        });*/

                        //watches the queue to repaint the tree
                        scope.$watch(function(){
                            return tObjectFactory.factoryUpdated();
                        },function(newValue, oldValue){
                            scope.jsonData = tObjectFactory.tObjects();
                        });
                        
                        if(!compiledContents) {
                            compiledContents = $compile(contents, transclude);
                        }
                        compiledContents(scope, function(clone, scope) {
                            iElement.append(clone); 
                        });
                    };

                }
        };

    }]);
}());

},{}],64:[function(require,module,exports){
(function(){
    'use strict';
    /*the purpose of this directive is to cancel the bubbling of scrolling events
      this could be extended for other events in the future by passing attributes*/
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcBubbleCanceller', function(){
        return {
            restrict: 'A',
            scope:false,
            link: function(scope, elem, attrs){

                if (attrs.click){
                    elem.bind('click', function(e){
                        return false;
                    });
                    elem.bind('mouseenter', function(e){
                        return false;
                    });
                    return;
                }
                //preveent scroll bubbling
                angular.element(elem).bind('mouseenter', function(e){
                    angular.element('body').addClass('noScroll');
                });

                angular.element(elem).bind('mouseleave', function(e){
                    angular.element('body').removeClass('noScroll');
                });

                //OMNI-2176
                scope.$on('eScroll', function(){
                     angular.element('body').removeClass('noScroll');
                });

            }
        };
    });
}());

},{}],65:[function(require,module,exports){
(function(){
    /*the purpose of this directive is to drag elements with position fixed across the screen
      dnd draggable requires the position to be relative */
    'use strict';
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcModalDraggable', ['$compile', '$document', function($compile, $document){
        return {
            restrict: 'A',
            scope:false,
            link: function(scope, elem){
                var startX, startY, x, y;
                var width = elem[0].offsetWidth;
                var height = elem[0].offsetHeight;
                var header = elem.find('.modal-header');
                header.on('mousedown', function(e){
                    startX = e.clientX - elem[0].offsetLeft;
                    startY = e.clientY - elem[0].offsetTop;
                    $document.on('mousemove', mousemove);
                    $document.on('mouseup', mouseup);

                });

                // Handle drag event
                function mousemove(e) {
                    y = e.clientY - startY;
                    x = e.clientX - startX;
                    setPosition();
                }

                // Unbind drag events
                function mouseup(e) {
                    $document.unbind('mousemove', mousemove);
                    $document.unbind('mouseup', mouseup);
                }

                function setPosition(){
                    elem.css({
                        top: y + 'px',
                        left:  x + 'px'
                    });
                }
                
            }
        };
    }]);
}());

},{}],66:[function(require,module,exports){
(function(){
    /*jshint -W030 */
    'use strict';
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcExpandCollapse', ['$document', 'tObjectFactory', function($document, tObjectFactory){
        var startX, startY, x, deltaX;
        return {
            restrict:'A',
            scope:'false',
            link: function(scope, element, attrs){
                element.bind('mousedown', function(event){
                    event.stopPropagation();
                    event.preventDefault();
                    $document.on('mousemove', mousemove);
                    $document.on('mouseup', mouseup);
                });

                function mousemove($event) {

                    //whenever there is a mouse down event deactivate the iframe
                    $('.iframe-holder').css({
                        'opacity': 0.3,//
                        'z-index':-1
                    });
                    
                    if (attrs.prop === 'width'){
                        //calculates  the start X and Y and calculates
                        //the dist travelled by the mouse and adds to the width
                        x = $event.pageX;
                        startX = element.offset().left;
                        startX = parseInt(startX);
                        deltaX = x  - startX;
                        var top = element.parent();
                    
                        top.css({
                            'width': parseInt(top.css('width')) + deltaX + 'px'
                        });
                        
                    }else{
                        //calculates the height of parent div - vlc-debug-modal
                        //cals mouse position , then dist moved by the mouse and adds it to the initial height
                        //diagonal drag

                        x = $event.pageX;
                        startX = element.offset().left;
                        startX = parseInt(startX);
                        deltaX = x  - startX;
                        
                        var y = $event.pageY;
                        startY = element.offset().top;
                        startY = parseInt(startY); //
                        var delta = y - startY;
                        var topP = element.parent().parent();
                        topP.css({
                            'width': parseInt(topP.css('width')) + deltaX + 'px',
                            'height': parseInt(topP.css('height')) + delta + 'px'
                        });

                        //120 is the min height of the parent div
                        var mBody = element.parent().parent().find('.modal-body');
                        mBody.css({
                            'height': parseInt(topP.css('height')) - 120 + 'px'
                        });
                    } 
                }

                function mouseup($event){
                    $document.unbind('mousemove', mousemove);
                    $document.unbind('mouseup', mouseup);

                    //whenever there is a mouse down event deactivate the iframe
                    $('.iframe-holder').css({
                        'opacity': 'initial',
                        'z-index':'auto'
                    });
                    
                }

            }
        };
    }]);
}());

},{}],67:[function(require,module,exports){
(function(){
    'use strict';
    var Clipboard = window.Clipboard;

    
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcClipboard', function() {
        console.log('inside the clipboard directive');
        return {
            restrict: 'A',
            scope:{
                vlcClipboardValue: '='
            },
            controller: function($scope){
                $scope.select  = function(element){
                    if (Clipboard.selectedElement){ //this stores the previous selection
                        Clipboard.selectedElement.nextElementSibling.firstElementChild.style = '';
                    }
                    element.nextElementSibling.firstElementChild.style = 'background:#dedede';
                    Clipboard.selectedElement = element;
                };
            },
            link: function(scope, element, attr, ctrl) {
                var clipboard = new Clipboard(element[0], {
                    text: function(trigger) {
                        return '' + JSON.stringify(scope.vlcClipboardValue);
                    }
                });
                var btn = angular.element;

                //this will make click event not bubbble thereby not toggling the sublist
                element.bind('click', function(){
                    return false;
                });

                clipboard.on('success', function(e) {
                    var elem = e.trigger;
                    scope.select(elem);
                    

                    /* this is for the tooltip to show up on the right */
                    $(elem).addClass('tooltipped tooltipped-e');
                    elem.setAttribute('aria-label', 'copied to clipboard');
                    
                    $(elem).on('mouseleave', function(e) {
                        $(elem).removeClass('tooltipped tooltipped-e');
                        elem.removeAttribute('aria-label');
                    });

                    console.log('copy success');
                });

                clipboard.on('error', function(e) {
                    var payloadCharLimit = 200000;

                    // This will notify user that the clipboard errored due too large of a data load
                    if (JSON.stringify(scope.vlcClipboardValue).length > payloadCharLimit) {
                        var elem = e.trigger;
                        scope.select(elem);
                        
                        /* this is for the tooltip to show up on the right */
                        $(elem).addClass('tooltipped tooltipped-e');
                        elem.setAttribute('aria-label', 'copy error - payload too large\nplease manually copy');
                        
                        $(elem).on('mouseleave', function(e) {
                            $(elem).removeClass('tooltipped tooltipped-e');
                            elem.removeAttribute('aria-label');
                        });
                    }

                    console.log('copy error');
                });

            }
        };
    });
    
}());

},{}],68:[function(require,module,exports){
(function() {
    'use strict';
    var dModule = angular.module('omniscriptDesigner');
    dModule.directive('vlcCollapsible', ['$compile', function($compile) {
        var keys = ['remoteClass', 'remoteMethod', 'apexRestPath' ,
                    'apexRestMethod','extRestUrl', 'httpVerb']; 
        // these keys will not toggle should refactor them to be attributes
        return {
            restrict: 'A',
            scope:false,
            link: function($scope, element, attr) {
                //new comment which is added
                element.addClass('collapsible');
                $scope.innerObject = {};

                if (keys.indexOf($scope.key || '') !== -1) {
                    //disable the toggle behaviour
                    $scope.innerObject.visible = true;
                    $scope.innerObject.oneLineItem = true;
                    element.bind('click', function(event) {
                        if (!event.spanClicked) {
                            event.stopPropagation();
                        }
                    });
                    return;
                }

                element.bind('click', function(event) {
                    if (!event.spanClicked) {
                        element.toggleClass('spreadOut');
                        event.stopPropagation();
                        $scope.$apply();
                    }
                });

                $scope.$watch(function() {
                    return /spreadOut/.test(element.attr('class'));
                }, function(newValue, oldValue) {
                    if (newValue !== oldValue) {
                        $scope.innerObject.toggle(); // new o
                    }
                });

                $scope.innerObject.visible =  false;
                $scope.innerObject.toggle =  function() {
                    $scope.innerObject.visible = !$scope.innerObject.visible;
                };
            }
        };
    }]);
}());

},{}],69:[function(require,module,exports){
var ScriptElement = require('../../oui/util/ScriptElement.js');

angular.module("omniscriptDesigner")
.factory('deleteElement', function($q, remoteActions, $rootScope) {
  return function deleteVisitor(element) {
    if ($rootScope.scriptElement.isDisabled()) {
      return $q(function(resolve, reject){
        reject();
      });
    }
    element.deleting = true;
    element.setSaving();
    $rootScope.$broadcast("delete", element);

    var allPromises = [];
    if (element.children.length > 0) {
      for (var i = 0; i < element.children.length; i++) {
        allPromises.push(deleteVisitor(element.children[i]));
      }
    }

    if (allPromises.length === 0) {
      allPromises.push($q.when(true));
    }
    return $q.all(allPromises).then(function() {
      return remoteActions.deleteElement(element.Id);
    }).then(function(result) {
      element.saving = false;
      if (angular.isArray(result) && (result.length === 0 || result[0].success))  {
        $rootScope.$broadcast("deleted", element);
        element.deleting = true;
        element.delete();
      } else {
        element.setErrors(result.errors);
      }
      return element;
    });
  };
});
},{"../../oui/util/ScriptElement.js":94}],70:[function(require,module,exports){
(function() {
    'use strict';
    angular.module('omniscriptDesigner')
        .factory('interTabMsgBus', function($q, $rootScope) {
            var listeners = {};
            var tabKey = Date.now().toString();
            var keysAdded = [];
            var objKeys = []; //adding the custom view layout

            //$(window).on('storage', handleStorageEvent);
            $(window).on('beforeunload', emptySessionStorage);
            $(window).on('message', handlePostMessageEvent);

            function handleStorageEvent(e) {
                e = e.originalEvent;
                var keyParts = e.key.split('.');
                if (keyParts[0] === tabKey) {
                    if (listeners[keyParts[1]]) {
                        listeners[keyParts[1]].forEach(function(callbackConfig) {
                            callbackConfig.fn.apply(callbackConfig.scope, [e.newValue, e.oldValue, wasDelete]);
                        });
                    }
                }
                wasDelete = false;
            }

            function handlePostMessageEvent(e) {
                e = e.originalEvent;
                var data = e.data;
                if (angular.isString(data)) {
                    try {
                        data = JSON.parse(data);
                    } catch (e) {
                        // swallow exception if can't be parsed
                        return;
                    }
                }
                if (!data.key) {
                    return;
                }
                var keyParts = data.key.split('.');
                if (keyParts[0] === tabKey) {
                    if (listeners[keyParts[1]]) {
                        listeners[keyParts[1]].forEach(function(callbackConfig) {
                            callbackConfig.fn.apply(callbackConfig.scope, [data.newValue, data.oldValue, wasDelete]);
                        });
                    }
                }
            }

            function emptySessionStorage() {
                keysAdded.forEach(function(key) {
                    localStorage.removeItem(tabKey + '.' + key);
                });

                //deleting the obj containing window layout details
                objKeys.forEach(function(key) {
                    localStorage.removeItem(key);
                });
            }

            var wasDelete = false,
                targetWindow = null;

            return {
                setTarget: function(_targetWindow) {
                    targetWindow = _targetWindow;
                },
                tabKey: function() {
                    return tabKey;
                },
                on: function(key, listener, scope) {
                    if (!listeners[key]) {
                        listeners[key] = [];
                    }
                    listeners[key].push({
                        fn: listener,
                        scope: scope
                    });
                },
                set: function(key, value, isObject) {
                    keysAdded.push(key);
                    if (isObject === true) {
                        //localStorage.setItem(tabKey + '.' + key, JSON.stringify(value));
                        targetWindow.postMessage({
                            key: tabKey + '.' + key,
                            newValue: JSON.stringify(value)
                        }, '*');
                    }else {
                        //localStorage.setItem(tabKey + '.' + key, value);
                        targetWindow.postMessage({
                            key: tabKey + '.' + key,
                            newValue: value
                        }, '*');
                    }
                },
                get: function(key, isObject) {
                    if (isObject === true) {
                        return JSON.parse(localStorage.getItem(tabKey + '.' + key));
                    }else {
                        return localStorage.getItem(tabKey + '.' + key);
                    }
                },
                delete: function(key) {
                    // if (localStorage.getItem(tabKey + '.' + key)) {
                    //     wasDelete = true;
                    // }
                    // localStorage.removeItem(tabKey + '.' + key);
                }
            };
        });
}());

},{}],71:[function(require,module,exports){
/* globals VOUINS */
var osLabelSet = require('../../common/shared/osLabelSet.js');

(function () {
    // Usage:
    // To provide a base constructor and utils for Property Components
    angular.module("omniscriptDesigner")
        .factory('propCompUtil', propCompUtil);

    propCompUtil.$inject = [];

    function propCompUtil() {
        var names = [],
            namesAsObjects = [];


        var service = {
            baseConstructor: basePropCompConstructor
        };

        return service;

        ////

        function basePropCompConstructor() {
            angular.extend(this, {
                elementNames: elementNames,
                elementNamesAsObject: elementNamesAsObject,
                elementPath: elementPath,
                updateDefaultProperties: updateDefaultProperties,
                getElementType: getElementType
            });
        }

        function updateDefaultProperties(defaultProperties, propertySet, type) {
            if (this.element && this.element.scriptElement().Language__c === 'Multi-Language') {
                defaultProperties = fixDefaultPropertiesForMultiLanguage(type, defaultProperties)
            }
            return Object.assign({}, _.cloneDeep(defaultProperties), propertySet);
        }

        function elementNamesAsObject() {
            namesAsObjects.splice(0, namesAsObjects.length);
            const scriptEl = this.scriptElement;
            this.scriptElement.each(function (element) {
                if (element !== scriptEl) {
                    namesAsObjects.push({
                        label: element.Name
                    });
                }
            });
            return namesAsObjects;

        }

        function elementNames(asObject) {
            if (asObject) {
                return this.elementNamesAsObject();
            }

            names.splice(0, names.length);
            const scriptEl = this.scriptElement;
            scriptEl.each(function (element) {
                if (element !== scriptEl) {
                    names.push(element.Name);
                }
            });
            return names;
        }

        function elementPath() {
            names = [];
            const scriptEl = this.scriptElement;
            // root
            if (scriptEl.children) {
                for (var i = 0; i < scriptEl.children.length; i++) {
                    var elem = scriptEl.children[i];
                    getElementPath(elem, elem.Name, names);
                }
            }
            return names;
        }

        function getElementPath(element, path, names) {
            names.push(path);
            if (element.children) {
                for (var i = 0; i < element.children.length; i++) {
                    var elem = element.children[i];
                    getElementPath(elem, path + '.' + elem.Name, names);
                }
            }
        }

        function getElementType(element) {
            return element.Type__c.type === 'OmniScript' ? element.Type__c.type : element.type();
        }

        function resolveType(type) {
            switch (type) {
                case 'Script Configuration':
                    return 'Script';
                default:
                    return type;
            }
        }

        function fixDefaultPropertiesForMultiLanguage(type, defaultProperties) {
            var knownLabels = VOUINS.ootbLabelMap[resolveType(type)];
            if (!knownLabels) {
                return defaultProperties;
            }
            knownLabels.forEach(function (key) {
                if (key.indexOf('|n') > -1) {
                    // handle array property
                    var keyPart = key.substring(0, key.indexOf('|n'));
                    var subKeyPart = key.substring(key.indexOf('|n:') + 3);
                    var prop = defaultProperties[keyPart];
                    if (Array.isArray(prop)) {
                        prop.forEach(function (childProp) {
                            childProp[subKeyPart] = '';
                        });
                    } else if (prop && prop[subKeyPart]) {
                        prop[subKeyPart] = '';
                    }
                } else {
                    // clear out value for multi-lang
                    defaultProperties[key] = '';
                }
            });
            return defaultProperties;
        }

    }

})();

},{"../../common/shared/osLabelSet.js":4}],72:[function(require,module,exports){
(function() {
    /*jshint -W030 */
    'use strict';
    angular.module('omniscriptDesigner')
        .factory('tObjectFactory', function() {
            /*
              input: arguement object passed from the bpService decorator
            */

            var classNamesToBeHidden = ['invokeInboundDR',
                                        'invokeTransformDR',
                                        'invokeOutboundDR',
                                       ];

            var containsString = function(sString){
                for(var i = 0 ; i < this.length; i++){
                    if (this[i].indexOf(sString) !== -1){
                        return true;
                    }
                }
                return false;
            };

            var tObjectsMap = [];
            var _factoryUpdated = false;

            function isValidObject(input) {
                if (input.response && input.response.name && input.response.type) {
                    return false;
                }

                if (input.args && input.args.name && input.args.type) {
                    return false;
                }

                return true;
            }

            function beautify(input){
                var request;
                try{
                    var test  = input && input[2] && input[2].replace(/\\\"/g,'\"');

                    if(test === input[2]){
                        request = (input && input[2] && angular.fromJson(input[2])) || {} ;
                        return request;
                    }
                    
                    test = test.replace(/\"{/g,'{');
                    test = test.replace(/}\"/g,'}'); 
                    request = angular.fromJson(test);

                } catch(err){
                    console.log('error in json parser ' + err);
                    request = (input && input[2] && angular.fromJson(input[2])) || {} ;
                }

                return request;
            }

            function CreateTObject(input, element) {
                var path = (input && input[0]) || 'anonymous';
                var restMethod = (input && input[1]) || 'anonymous';
                var self = this;

                //these names should be visible in the window
                !containsString.call(classNamesToBeHidden, restMethod) && (function(){
                    (element.type === 'web') && (function() {
                        self.extRestUrl = path;
                        self.httpVerb = restMethod;
                    }());
                    (element.type === 'apex') && (function() {
                        self.apexRestPath = path;
                        self.apexRestMethod = restMethod;
                    }());
                    (!element.type) && (function() {
                        self.remoteClass = (input && input[0]) || 'anonymous';
                        self.remoteMethod = (input && input[1]) || 'anonymous';
                    }());
                }());
                
                this.remoteOptions = (input && input[3] && angular.fromJson(input[3])) || {} ;

                //replaces the escaped json with beautified one 
                this.request = beautify(input);

                this.response = {};
                this.stage = (element.stage && element.stage + '-') || '';
                this.name = element.label || 'anonymous';
                this.created = Date.now();
            }

            //takes out the non display properties before copying the clipboard
            CreateTObject.prototype.toJSON = function() {
                var copy = {};
                angular.copy(this,copy);
                delete copy.visible;
                delete copy.stage;
                delete copy.name;
                delete copy.created;
                return copy;
            };

            function createRequestObject(input, element) {
                var tObject = new CreateTObject(input, element);
                //tObjectsMap.unshift(tObject);
                tObjectsMap.push(tObject);
                
            }

            function createResponseObject(input, element) {

                var tObject ;
                //check the element name of the last object matches
                /* jshint -W030 */
                var output = (tObject = tObjectsMap[tObjectsMap.length-1]) && (function() {
                    //stage has been lower cased in the above if clause
                    tObject.response  = input;
                    return true;
                }());

                if (!output) {
                    console.log('orphan response : something is wrong');
                }

            }

            function remoteCallObject(input) {

                //the step and type calls are also getting logged thats why - this check
                if (!(isValidObject(input))) {
                    return {
                        invalidObject: true
                    };
                }

                //this is a request object
                if (input.args) {
                    createRequestObject(input.args, input.element);
                }

                if (input.response) {
                    createResponseObject(input.response, input.element);
                }

                _factoryUpdated = !_factoryUpdated;

            }

            return {
                createNetTransObject: function(input) {
                    remoteCallObject(input);
                    _factoryUpdated = _factoryUpdated;
                },

                clearTObjects: function() {
                    tObjectsMap = [];
                    _factoryUpdated = _factoryUpdated;
                },

                factoryUpdated: function() {
                    return _factoryUpdated;
                },

                tObjects: function() {
                    return tObjectsMap;
                }

            };

        });

}());

},{}],73:[function(require,module,exports){
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');

angular.module("omniscriptDesigner")
.filter("activeElementTitle", function($localizable, isIntegrationProcedure) {
    return function(canvasElement) {
      if (!canvasElement) {
        return "";
      }
      if (canvasElement instanceof ScriptElement) {
        if (isIntegrationProcedure) {
          return $localizable('IntProcHeaderProps');
        }
        return $localizable("OmniDesScriptHeaderProps", "Script Header Properties");
      }
      return canvasElement.CanvasType ? canvasElement.CanvasType : canvasElement.Name;
    };
  });
},{"../../oui/util/CanvasElement.js":91,"../../oui/util/ScriptElement.js":94}],74:[function(require,module,exports){
var CanvasElement = require('../../oui/util/CanvasElement.js');
var ScriptElement = require('../../oui/util/ScriptElement.js');

angular.module("omniscriptDesigner")
.filter("className", function() {
  return function(canvasElement) {
    if (!canvasElement) {
      return "";
    }
    if (!(canvasElement instanceof CanvasElement) && !(canvasElement instanceof ScriptElement)) {
      if (angular.isString(canvasElement)) {
        canvasElement = CanvasElement.getById(canvasElement);
      } else {
        canvasElement = CanvasElement.getById(canvasElement.Id);
      }
    }
    var className = '';
    if (canvasElement instanceof CanvasElement) {
      className = canvasElement.type().replace(/ /gi, "").toLowerCase() + "Element" + (canvasElement.isInput() ? " inputElement" : "");
    } else {
      className = canvasElement.CanvasType;
    }
    if (canvasElement.hasErrors()) {
      className += " bg-danger";
    }
    if (!canvasElement.Active__c && (canvasElement instanceof CanvasElement)) {
      className += " inactive";
    }
    return className;
  };
});
},{"../../oui/util/CanvasElement.js":91,"../../oui/util/ScriptElement.js":94}],75:[function(require,module,exports){
var PaletteElement = require('../../oui/util/PaletteElement.js');

angular.module("omniscriptDesigner")
.filter("controlType", function() {
  function isInGroup(element) {
    return /Cache Block|Try Catch Block|Loop Block|Conditional Block/.test(element.label) || /Step/.test(element.label) || /filterblock|inputblock|selectable-items|typeahead-block|edit-block|action-block|radiogroup/.test(element.type) || element.isGroupedControl();
  }

  function isInInput(element) {
    return !/Submit/.test(element.label) && (/Filter/.test(element.label) || element.isInput()) &&
           !isInFunction(element) && !isInDisplay(element) && !isInGroup(element);
  }

  function isInDisplay(element) {
    return /Headline|Text Block|Line Break/.test(element.label);
  }

  function isInFunction(element) {
    return /Aggregate|Formula|Geolocation|Validation/.test(element.label);
  }

  function isInAction(element) {
    return /Submit/.test(element.label) || (!/OmniScript/.test(element.label) && !isInInput(element) &&
           !isInGroup(element) && !isInDisplay(element) && !isInFunction(element));
  }

  var funcs = {
    group: isInGroup,
    input: isInInput,
    action: isInAction,
    display: isInDisplay,
    func: isInFunction
  };

  var arrayCache = {
    empty: []
  };

  return function(elements, type) {
    if (!arrayCache[type]) {
      arrayCache[type] = [];
    } else {
      arrayCache[type].splice(0, arrayCache[type].length);
    }
    if (elements) {
      elements.forEach(function(element) {
        if (funcs[type](element)) {
          arrayCache[type].push(element);
        }
      });
      return arrayCache[type];
    } else {
      return arrayCache.empty;
    }
  };
});

},{"../../oui/util/PaletteElement.js":93}],76:[function(require,module,exports){
angular.module("omniscriptDesigner")
.filter("elementLabel", function(IsFoundation) {
    return function(paletteElement, showOmniIfReUsable) {
      if (!paletteElement) {
        return "";
      }
      if (showOmniIfReUsable && paletteElement.type === 'OmniScript') {
        return 'OmniScript';
      }
      if (IsFoundation && /Matrix Action/i.test(paletteElement.label)) {
        return 'Decision Matrix Action';
      }
      if (IsFoundation && /Calculation Action/i.test(paletteElement.label)) {
        return 'Expression Set Action';
      }
      if (paletteElement.prettyName) {
        return paletteElement.prettyName(false, IsFoundation);
      }
      if (/Rest/i.test(this.label)) {
        if (/^rest action$/i.test(this.label))
            return this.label.replace(/\brest\b/i, 'HTTP');
        else
            return this.label.replace(/\brest\b/i, 'REST');
      } else if (/^Validation$/.test(paletteElement.label)) {
        return "Messaging";
      // OMNI-2769
      } else if (/^Custom Lightning Web Component$/.test(paletteElement.label)) {
        return "Custom LWC";
      } else if (/^Date\/Time \(Local\)$/.test(paletteElement.label)) {
        return "Date\/Time";
      } else {
        return paletteElement.label;
      }
    };
  });

},{}],77:[function(require,module,exports){
// jscs:disable requireCamelCaseOrUpperCaseIdentifiers
var CanvasElement = require('../../oui/util/CanvasElement.js');
var requiredProperties = require('../../oui/util/requiredProperties.js');

angular.module('omniscriptDesigner')
    .filter('fixMissingProperties', function ($rootScope, remoteActions, save) {
        'use strict';
        var pendingPropertySetPromises = {};
        return function (canvasElement) {
            if (!canvasElement) {
                return '';
            }
            if (requiredProperties[canvasElement.type()]) {
                if (!pendingPropertySetPromises[canvasElement.type()]) {
                    pendingPropertySetPromises[canvasElement.type()] = remoteActions.loadPropertySetForElement(canvasElement.type(), $rootScope.scriptElement.IsProcedure__c);
                }
                pendingPropertySetPromises[canvasElement.type()].then(function (textJson) {
                    if (!textJson || textJson.result === '') {
                        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
                        textJson = JSON.stringify(canvasElement.PropertySet__c);
                    }
                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
                    var defaultProperties = JSON.parse(textJson.replace(/\&quot;/gi, '\"'));
                    var needsSaving = false;
                    requiredProperties[canvasElement.type()].forEach(function (requiredPropName) {
                        /* jshint eqnull:true */
                        if (canvasElement.PropertySet__c[requiredPropName] == null) {
                            canvasElement.PropertySet__c[requiredPropName] = defaultProperties[requiredPropName];
                            needsSaving = true;
                        }
                    });
                    if (needsSaving) {
                        // this is to help with batching
                        setTimeout(function () {
                            save(canvasElement);
                        }, 1000 * (Math.floor((Math.random() * 10) + 1)));
                    }
                });
            }
            return canvasElement;
        };
    });
},{"../../oui/util/CanvasElement.js":91,"../../oui/util/requiredProperties.js":97}],78:[function(require,module,exports){
angular.module("omniscriptDesigner")
.filter("getTypeForElement", function($localizable, $rootScope, elementLabelFilter) {
    return function(elementName) {
      var matchingElement = null;
      $rootScope.scriptElement.each(function(element){
        if (element.Name === elementName) {
          matchingElement = element;
        }
      });
      if (matchingElement) {
        return elementLabelFilter(matchingElement.Type__c);
      } else if (elementName !== '') {
        return 'JSON Node';
      } else {
        return '';
      }
    };
  });
},{}],79:[function(require,module,exports){
var ScriptElement = require('../../oui/util/ScriptElement.js');

angular.module('omniscriptDesigner')
.filter('readablePropertyName', function() {
    var transforms = {
        'label': 'Label',
        'Name' : 'Element Name',
        'controlWidth': 'Control Width',
        'required': 'Required?',
        'help': 'Help text active?',
        'showInputWidth': 'Label outside of field',
        'inputWidth': 'Field Width',
        'helpText': 'Help Text',
        'show': 'Hide Element If False',
        'mask': 'Mask',
        'maskCurrency': 'Decimal Places',
        'pattern': 'Pattern',
        'ptrnErrText': 'Error Text',
        'Active__c': 'Active?',
        'IsReusable__c': 'Reusable?',
        'Type__c': 'Type',
        'SubType__c': 'SubType',
        'Language__c': 'Language',
        'bundle': 'DataRaptor Interface',
        'preTransformBundle': 'Pre-Transform DataRaptor Interface',
        'postTransformBundle': 'Post-Transform DataRaptor Interface',
        'xmlPreTransformBundle': 'XML Pre-Transform DataRaptor Interface',
        'xmlPostTransformBundle': 'XML Post-Transform DataRaptor Interface',
        'transformBundle' : 'Transform DataRaptor Interface',
        'remoteTimeout': 'Remote Timeout (ms)',
        'instruction': 'Instruction (Horizontal and Lightning Mode Only)',
        'URIEncode': 'Encode URI',
        'docuSignReturnUrl': 'DocuSign Return Url',
        'AdditionalInformation__c' : 'Description',
        'InternalNotes__c' : 'Internal Notes',
        'callFrequency' : 'Call Frequency (ms)',
        'fileAttachments' : 'File Attachments from OmniScript',
        'staticDocList' : 'Document Attachments',
        'contentVersionList' : 'Content Versions',
        'docList' : 'Document Attachments from OmniScript',
        'wpm': 'Window Post Message?',
        'ssm': 'Session Storage Message?',
        'allowCancel': 'Allow Cancel',
        'docuSignTemplatesGroup': 'DocuSign Templates Group',
        'docuSignTemplatesGroupSig': 'DocuSign Templates Group',
        'horizontalMode':'Display Mode',
        'type':'Option Source',
        'padding': 'Additonal Padding (px)',
        'svgSprite':'Default Svg Sprite',
        'svgIcon':'Default Svg Icon',
        'elementName':'Svg Controlling Element',
        'selectCheckBox':'Checkbox Element Name',
        'valueSvgMap':'Svg Controlling Element Map',
        'advancedMergeMap':'Advanced Merge Map',
        'deleteSObject':'Delete SObject',
        'columnsPropertyMap':'Columns Property Map',
        'linkToExternalObject' : 'External Objects Page',
        'labelSingular':'Singular Label',
        'labelPlural':'Plural Label',
        'nameColumn':'Column Name',
        'disOnTplt': 'Display On Template',
        'allowMergeNulls': 'NULL is a Valid Matching Value when Merging',
        'remoteConfirmMsg':'Confirmation Dialog Message',
        'subLabel':'Confirm Label',
        'timeTracking':'Enable Tracking',
        'rtpSeed':'Fetch Picklist Values at Script Load',
        'hideStepChart':'Hide Step Chart',
        'uploadContDoc':'Upload To Content Document',
        'vlcResponseHeaders':'Response Headers',
        'updateFieldValue':'Update Field Value',
        'dynamicOutputFields':'Dynamic Output Fields',
        'enableKnowledge' : 'Enable Knowledge',
        'bLK': 'Lightning Knowledge',
        'lkObjName' : 'Lightning Knowledge Object API Name',
        'knowledgeArticleTypeQueryFieldsMap' : 'Article/Record Type Query Fields Map',
        'typeFilter' : 'Record Type Filter (Lightning Knowledge Only)',
        'chartLabel' : 'Step Chart Label',
        'accessibleInFutureSteps':'Available for prefill when hidden',
        'chainableCpuLimit':'Chainable CPU Limit (ms)',
        'chainableSoslQueriesLimit':'Chainable SOSL Query Limit',
        'chainableHeapSizeLimit':'Chainable Heap Size Limit (MB)',
        'maxDisplay': 'Max Elements to be Displayed inside Edit Block'
    };

    // creates String acronyms = '(JSON|XML|URL|...)' for use in regex patterns
    acronyms = (function (acArr){
            var pattern = "";
            acArr.forEach(function(item){
                pattern = pattern +'|'+ item;
            });
            return pattern.replace(/^\|/,"(?:")+')';
        })([
        // Array of acronyms to be handled by regex. Replace will capitalize these so don't include lower case
        'JSON','REST','HTTP','HTML','XML','URL','URI'
    ]);

    var elementSpecificTransforms = {
        'PDF Action': {
            'templateName': 'Document'
        },
        'Script Configuration': {
            'Name': 'OmniScript name'
        },
        'Procedure Configuration': {
            'Name': 'Integration Procedure Name'
        },
        'Headline': {
            'label': 'Headline',
            'labelKey': 'Headline Key'
        }
    };

    return function readablePropertyName(propertyName, element) {
        if (propertyName) {
            var parts = propertyName.split('.');
            if (propertyName.indexOf('|') > -1 || propertyName.indexOf(':') > -1) {
                return propertyName.replace(/[|:]/g,'.');
            }
            if (/^showPersistentComponent$/.test(parts[0]) && parts.length > 1) {
                return parts[1];
            }

            //changing label name from mask to decimal places for currency
            // var typeC = element['Type__c'];
            // if (typeC && /Mask/i.test(propertyName) && /Currency/i.test(typeC.label)) {
            //     return transforms['maskCurrency'];
            // }

            var lastPropName = parts[parts.length - 1];
            if (element && elementSpecificTransforms[element.type()]) {
                if (elementSpecificTransforms[element.type()][lastPropName]) {
                    return elementSpecificTransforms[element.type()][lastPropName];
                }
            } else if (/^\d+$/.test(lastPropName)) {
                return +lastPropName + 1;
            }
            if (transforms[propertyName]) {
                return transforms[propertyName];
            } else if (transforms[lastPropName]) {
                return transforms[lastPropName];
            }
            if (/Rest Action/i.test((element.Type__c||{label:""}).label||""))
                lastPropName = lastPropName.replace(/[Rr]est([A-Z])/, 'http$1');
            return lastPropName
                  // puts space before words, capitalized acronyms and numbers
                  .replace(/[A-Z][a-z]+|[A-Z]+(?=[A-Z][a-z]|$)|[0-9]+/g,' $&')
                  // Capitalizes recognized acronyms and first character
                  .replace(new RegExp('\\b'+acronyms+'\\b\|^.','ig'), v => v = v.toUpperCase())
                  .trim();
        }
        return '';
    };
});

},{"../../oui/util/ScriptElement.js":94}],80:[function(require,module,exports){
(function() {
    /*jshint -W030 */
    'use strict';

    window.tinymce.PluginManager.add('smartLink', function(editor, url) {

        editor.ui.registry.addButton('example', {
            icon: 'bookmark',
            tooltip: 'Add Link To Article',
            onAction: function() {
                editor.editorCommands.execCommand('openSmartLinkWindow');
            }
        });

        editor.addCommand('openSmartLinkWindow', function () {
            let matchingArticles = [];

            const smartLinkWindow = {
                title: 'Smart Link Article',
                initialData: {
                    langCode: 'en_US',
                    publishStatus: 'online'
                },
                body: {
                    type: 'panel',
                    items: [
                        {
                            type: 'selectbox',
                            label: 'Publish Status',
                            name: 'publishStatus',
                            items: [
                                {text: 'Publish', value: 'online'},
                                {text: 'Draft', value: 'draft'},
                                {text: 'Draft Translation', value: 'archived'},
                            ]
                        },{
                            type: 'selectbox',
                            name: 'langCode',
                            label: 'Language',
                            items: window.tinymce.getLanguageCodeMap()
                        },{
                            type: 'input',
                            label: 'Article Name',
                            name: 'name'
                        },{
                            type: 'button',
                            text: 'Search For Matching Articles',
                            primary: true,
                            name: 'searchForArticles'
                        }, {
                            type: 'selectbox',
                            label: 'Matching Articles',
                            name: 'articles',
                            items: matchingArticles
                        }
                    ]
                },
                buttons: [{
                    type: 'cancel',
                    text: 'Cancel'
                }, {
                    type: 'submit',
                    text: 'Save',
                    primary: true
                }],
                onAction: function(api) {
                    const data = api.getData();
                    api.block('Searching....');
                    window.tinymce.remoteCall(data.name, data.publishStatus, data.langCode)
                        .then(results => {
                            const articles = JSON.parse(results.replace(/&quot;/g,'"'));

                            if (!articles.error) {
                                matchingArticles = articles.map(article => {
                                    const displayName = article.urlName;
                                    return {
                                        value: `/articles/${article.articleType}/${article.urlName}?popup=true`,
                                        text: displayName
                                    };
                                });
                            } else {
                                matchingArticles = [];
                            }

                            api.redial(Object.assign(smartLinkWindow, {
                                initialData: data
                            }));
                            api.focus('articles');
                            api.unblock();
                        })
                        .catch(err => {
                            matchingArticles = [];
                            api.redial(Object.assign(smartLinkWindow, {
                                initialData: data
                            }));
                            api.unblock();
                        })
                },
                onSubmit: function(api) {
                    const data = api.getData();

                    if (!data.articles) {
                        return;
                    }

                    window.activeEditor.execCommand('mceInsertContent', false, `<a class=mce-anchor href="${data.value}" target="_blank">${data.value}</a>&nbsp;`);
                    api.close();
                }

            };

            editor.windowManager.open(smartLinkWindow);
        });
    });

}());

},{}],81:[function(require,module,exports){
/* globals VOUINS */
var osLabelSet = require('../../common/shared/osLabelSet.js');

(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .service('customLabelService', CustomLabelService);

    CustomLabelService.$inject = ['remoteActions', '$q', '$timeout'];

    // increase the polling timeout to 5 minutes
    window.conn.metadata.pollTimeout = 5 * 60 * 1000;

    function CustomLabelService(remoteActions, $q, $timeout) {
        var self = this,
            allUnmanagedLabels = {},
            ns = fileNsPrefix();

        this.currentEditLanguage = 'en_US';
        this.getLabelValue = getLabelValue;
        this.isValidLabelName = isValidLabelName;
        this.getLanguageCodeFor = getLanguageCodeFor;
        this.getLabelsForElement = getLabelsForElement;
        this.loadAllCustomLabelsInOrg = loadAllCustomLabelsInOrg;
        this.saveAll = saveAll;

        this.translations = [
            {
                value: 'zh_CN',
                label: 'Chinese (Simplified)'
            }, {
                value: 'zh_TW',
                label: 'Chinese (Traditional)'
            }, {
                value: 'da',
                label: 'Danish'
            }, {
                value: 'nl_NL',
                label: 'Dutch'
            }, {
                value: 'en_US',
                label: 'English (US)'
            }, {
                value: 'fi',
                label: 'Finnish'
            }, {
                value: 'fr',
                label: 'French'
            }, {
                value: 'de',
                label: 'German'
            }, {
                value: 'it',
                label: 'Italian'
            }, {
                value: 'ja',
                label: 'Japanese'
            }, {
                value: 'ko',
                label: 'Korean',
            }, {
                value: 'no',
                label: 'Norwegian'
            }, {
                value: 'pt_BR',
                label: 'Portuguese (Brazil)'
            }, {
                value: 'ru',
                label: 'Russian'
            }, {
                value: 'es',
                label: 'Spanish'
            }, {
                value: 'es_MX',
                label: 'Spanish (Mexico)'
            }, {
                value: 'sv',
                label: 'Swedish'
            }, {
                value: 'th',
                label: 'Thai'
            }, {
                value: 'ar',
                label: 'Arabic'
            }, {
                value: 'bg',
                label: 'Bulgarian'
            }, {
                value: 'hr',
                label: 'Croatian'
            }, {
                value: 'cs',
                label: 'Czech'
            }, {
                value: 'en_GB',
                label: 'English (UK)'
            }, {
                value: 'el',
                label: 'Greek'
            }, {
                value: 'iw',
                label: 'Hebrew'
            }, {
                value: 'hu',
                label: 'Hungarian'
            }, {
                value: 'in',
                label: 'Indonesian'
            }, {
                value: 'pl',
                label: 'Polish'
            }, {
                value: 'pt_PT',
                label: 'Portuguese (European)'
            }, {
                value: 'ro',
                label: 'Romanian'
            }, {
                value: 'sk',
                label: 'Slovak'
            }, {
                value: 'sl',
                label: 'Slovenian'
            }, {
                value: 'tr',
                label: 'Turkish'
            }, {
                value: 'uk',
                label: 'Ukrainian'
            }, {
                value: 'vi',
                label: 'Vietnamese'
            }
        ].sort(function(a, b) {
            var nameA = a.label.toUpperCase(); // ignore upper and lowercase
            var nameB = b.label.toUpperCase(); // ignore upper and lowercase
            if (nameA < nameB) {
                return -1;
            }
            if (nameA > nameB) {
                return 1;
            }

            // names must be equal
            return 0;
        });

        this.defaultValuesToLabelNames = {
            'previousLabel': ns + 'OmnipreviousLabel',
            'nextLabel': ns + 'OmninextLabel',
            'cancelLabel': ns + 'OmnicancelLabel',
            'saveLabel': ns + 'OmnisaveLabel',
            'completeLabel': ns + 'OmnicompleteLabel',
            'submitLabel': ns + 'OmnisubmitLabel',
            'summaryLabel': ns + 'OmnisummaryLabel',
            'reviseLabel': ns + 'OmnireviseLabel',
            'failureNextLabel': ns + 'OmnifailureNextLabel',
            'failureAbortLabel': ns + 'OmnifailureAbortLabel',
            'failureGoBackLabel': ns + 'OmnifailureGoBackLabel',
            'redirectNextLabel': ns + 'OmniredirectNextLabel',
            'redirectPreviousLabel': ns + 'OmniredirectPreviousLabel',
            'consoleTabLabel': ns + 'OmniconsoleTabLabel',
            'newItemLabel': ns + 'OmninewItemLabel',
            'newLabel': ns + 'OmninewLabel',
            'editLabel': ns + 'OmnieditLabel',
            'cancelMessage': ns + 'OmnicancelMessage',
            'saveMessage': ns + 'OmnisaveMessage',
            'completeMessage': ns + 'OmnicompleteMessage',
            'inProgressMessage': ns + 'OmniinProgressMessage',
            'postMessage': ns + 'OmnipostMessage',
            'failureAbortMessage': ns + 'OmnifailureAbortMessage',
            'subLabel': ns + 'OmniDelete',
            'remoteConfirmMsg': ns + 'OmniremoteActionConfirm'
        };

        this.omniInbuiltLangsToSFDCCode = null;
        ////////////////

        function getLabelValue(labelName, language) {
            return makeRequestForLabelIfNotInflight(labelName, language);
        }

        var mapOfInflightRequests = {};

        function makeRequestForLabelIfNotInflight(labelName, language) {
            if (!mapOfInflightRequests[labelName + '-' + language]) {
                mapOfInflightRequests[labelName + '-' + language] =
                getLabelFromApexHack(labelName, language)
                        .finally(function () {
                            mapOfInflightRequests[labelName + '-' + language] = null;
                        });
            }
            return mapOfInflightRequests[labelName + '-' + language];
        }

        function getLabelFromApexHack(labelName, languageCode) {
            return $q(function(resolve, reject) {
                    remoteActions.getCustomLabels([labelName], languageCode)
                        .then(function (allLabels) {
                            var labelResult = JSON.parse(allLabels) || {};
                            if (labelResult.messages && labelResult.messages.length > 0) {
                                labelResult.messages.forEach(function (message) {
                                    if (message.severity === 'ERROR') {
                                        throw new Error(message.message);
                                    }
                                });
                            }
                            if (labelResult.data && labelResult.data.dataMap) {
                                labelResult = labelResult.data.dataMap;
                            }
                            var map = {};
                            Object.keys(labelResult).forEach(function (returnedLabelName) {
                                if (returnedLabelName !== 'language' &&
                                    returnedLabelName === labelName) {
                                    resolve(labelResult[returnedLabelName]);
                                    return;
                                }
                            });
                            reject('No translation of "' + labelName + '" in ' + languageCode);
                        })
                        .catch(function(err) {
                            reject(err);
                        });
                });
        }

        function isValidLabelName(labelName) {
            if (labelName && /__/.test(labelName)) {
                return isValidLabelName(labelName.split('__')[1]);
            }

            // The name must begin with a letter
            // and use only alphanumeric characters and underscores.
            // The name cannot end with an underscore
            // or have two consecutive underscores.
            // from https://unix.stackexchange.com/a/78524
            return labelName && /^[A-Za-z][0-9A-Za-z]*(_[0-9A-Za-z]+)*$/.test(labelName);
        }

        function saveAll(arrayOfLabels) {
            if (!allUnmanagedLabels) {
                return $q(function(resolve, reject) {
                    setTimeout(function() {
                        resolve(saveAll(arrayOfLabels));
                    }, 1000);
                });
            }

            var arrayToUpsert = [],
                arrayToDeploy = [];
            arrayOfLabels.forEach(function(label) {
                if (label.value === null ||
                    label.value === undefined) {
                    return;
                }

                // Do a metadata deploy instead of upsert if this label is from a managed
                // package.
                if (/__/.test(label.name)) {
                    arrayToDeploy.push(label);
                    return;
                }

                var existingLabel = allUnmanagedLabels[label.name.toLowerCase()];

                // change the name to match the case sensitive version of the existing one
                // otherwise we'll get a duplicate error
                if (existingLabel) {
                    label.name = existingLabel.originalName;
                }

                // Do a metadata deploy instead of upsert if the label exists
                // but this is a different language.
                if (existingLabel &&
                    existingLabel.originalLanguage !== label.language) {
                    arrayToDeploy.push(label);
                    return;
                }

                // Don't do anything if the language and label value are the same
                if (existingLabel &&
                    existingLabel.originalLanguage === label.language &&
                    existingLabel.value === label.value) {
                    return;
                }

                arrayToUpsert.push(label);
            });

            var promiseToUpsert = upsertAll(_.uniqBy(arrayToUpsert, 'name'));
            var promiseToDeploy = deployAll(_.uniqBy(arrayToDeploy, 'name'));

            return $q.all([promiseToUpsert, promiseToDeploy]);
        }

        function upsertAll(arrayOfLabels) {
            if (!arrayOfLabels ||
                arrayOfLabels.length === 0) {
                return $q.when(true);
            }

            // Metadata api only accepts 10 inserts at a time, so split
            // up larger arrays into multiple smaller ones and submit individually
            if (arrayOfLabels.length > 10) {
                var maxSizeTenArrays = [];
                while (arrayOfLabels.length > 0) {
                    maxSizeTenArrays.push(arrayOfLabels.splice(0, 10));
                }

                return $q.all(maxSizeTenArrays.map(function(arrayOfLabels) {
                    return upsertAll(arrayOfLabels);
                }));
            }

            var metadata = arrayOfLabels.map(function(label) {
                return {
                    fullName: label.name,
                    language: label.language,
                    protected: false,
                    shortDescription: label.shortDescription,
                    value: label.value
                };
            });
            return $q(function (resolve, reject) {
                window.conn.metadata.upsert('CustomLabel', metadata, function (err, results) {
                    if (err) {
                        reject(err);
                        return;
                    }
                    if (!Array.isArray(results)) {
                        results = [results];
                    }
                    var errors = results.filter(function(result) {
                        return result.errors;
                    }).map(function(result) {
                        return result.errors;
                    });
                    if (errors.length > 0) {
                        reject(errors);
                        return;
                    }
                    resolve(results[0]);
                });
            });
        }

        function deployAll(arrayOfLabels) {
            if (!arrayOfLabels ||
                arrayOfLabels.length === 0) {
                return $q.when(true);
            }

            return createZipOfAll(arrayOfLabels)
                .then(function(zipStream) {
                    return $q(function(resolve, reject) {
                        window.conn.metadata.deploy(zipStream, {
                                singlePackage: true
                            })
                            .complete(function(err, deployResult) {
                                if (err) {
                                    reject(err);
                                    return;
                                }

                                if (deployResult.success === false) {
                                    window.conn.metadata.checkDeployStatus(deployResult.id, true,
                                            function(err, result) {
                                                console.log(err);
                                                console.log(result);
                                            });
                                    reject(deployResult);
                                    return;
                                }

                                resolve(deployResult);
                            });
                    });
                });
        }

        function createZipOfAll(arrayOfLabels) {
            return $q(function(resolve, reject) {
                var zip = new window.JSZip();

                var langToLabelsMap = arrayOfLabels.reduce(function(map, label) {
                    if (!map[label.language]) {
                        map[label.language] = [];
                    }

                    map[label.language].push(label);

                    return map;
                }, {});

                zip.file(
                    'package.xml',
                    '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +
                    '<Package xmlns=\"http://soap.sforce.com/2006/04/metadata\">' +
                        '<types>' +
                            '<members>*</members>' +
                            '<name>CustomLabels</name>' +
                        '</types>' +
                        '<types>' +
                            Object.keys(langToLabelsMap)
                                    .map(function(language) {
                                        return '<members>' + language + '</members>';
                                    })
                                    .join('') +
                            '<name>Translations</name>' +
                        '</types>' +
                        '<version>42.0</version>' +
                    '</Package>'
                );

                Object.keys(langToLabelsMap)
                    .forEach(function(language) {
                        var languageLabels = langToLabelsMap[language];

                        var languageLabelsXml = arrayOfLabels.map(function(label) {
                            return '<customLabels>' +
                                        '<label>' + label.value + '</label>' +
                                        '<name>' + label.name + '</name>' +
                                    '</customLabels>';
                        });

                        // translation file
                        zip.file(
                            'translations/' + language + '.translation',
                            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +
                            '<Translations xmlns=\"http://soap.sforce.com/2006/04/metadata\">' +
                                languageLabelsXml +
                            '</Translations>'
                        );
                    });

                var content = zip.generateAsync({type: 'base64'})
                    .then(function(content) {
                        resolve(content);
                    });
            });
        }

        function loadOmniLanguages() {
            return remoteActions.getLanguageCodeMap()
                .then(function (langCodeMap) {
                    self.omniInbuiltLangsToSFDCCode = langCodeMap;
                    return self.omniInbuiltLangsToSFDCCode;
                });
        }

        function getLanguageCodeFor(language) {
            if (!self.omniInbuiltLangsToSFDCCode) {
                return loadOmniLanguages()
                    .then(function (languages) {
                        return self.omniInbuiltLangsToSFDCCode[language];
                    });
            } else {
                return $q.when(self.omniInbuiltLangsToSFDCCode[language]);
            }
        }

        function xmlToJson(xmlString) {
            var xml = xmlString;
            if (xml == null) {
                return {};
            }
            if (angular.isString(xmlString)) {
                var oParser = new DOMParser();
                xml = oParser.parseFromString(xmlString, 'text/xml');
                if (isParseError(xml)) {
                    return {};
                }
            }

            // Create the return object
            var obj = {};
            if (xml.nodeType === 1) { // element
                processXmlAttributes(xml, obj);
            } else if (xml.nodeType === 3) { // text
                obj = xml.nodeValue;
            }

            // do children
            if (xml.hasChildNodes()) {
                processChildNodes(xml, obj);
            }
            return obj;
        }

        function processXmlAttributes(xml, obj) {
            // do attributes
            if (xml.attributes.length > 0) {
                for (var j = 0; j < xml.attributes.length; j++) {
                    var attribute = xml.attributes.item(j);
                    obj['@' + attribute.nodeName] = attribute.nodeValue;
                }
            }
        }

        function processChildNodes(xml, obj) {
            for (var i = 0; i < xml.childNodes.length; i++) {
                var item = xml.childNodes.item(i);
                var nodeName = item.nodeName;
                if (typeof (obj[nodeName]) === 'undefined') {
                    obj[nodeName] = xmlToJson(item);
                } else {
                    if (typeof (obj[nodeName].push) === 'undefined') {
                        var old = obj[nodeName];
                        obj[nodeName] = [];
                        obj[nodeName].push(old);
                    }
                    obj[nodeName].push(xmlToJson(item));
                }
            }
        }

        function isParseError(parsedDocument) {
            // parser and parsererrorNS could be cached on startup for efficiency
            var parser = new DOMParser(),
                errorneousParse = parser.parseFromString('<', 'text/xml'),
                parsererrorNS = errorneousParse.getElementsByTagName('parsererror')[0].namespaceURI;

            if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {
                // In PhantomJS the parseerror element doesn't seem to have a special
                // namespace, so we are just guessing here :(
                return parsedDocument.getElementsByTagName('parsererror').length > 0;
            }

            return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
        }

        function resolveType(type) {
            switch (type) {
                case 'Script Configuration': return 'Script';
                default: return type;
            }
        }

        function getLabelsForElement(element) {
            var labels = VOUINS.ootbLabelMap[resolveType(element.type())];
            if (!labels) {
                labels = [];
            }

            switch(element.type()) {
                case 'Step': labels.push('instruction');
                    break;
                case 'Text Block': // text block and disclosure to be treated the same
                case 'Disclosure': labels.push('text');
                    break;
                default: break;
            }

            if (element.PropertySet__c &&
                element.PropertySet__c.label !== undefined &&
                element.type() !== 'Line Break') {
                labels.push('label');
            }
            return labels.reduce(function(array, key) {
                if (key.indexOf('|n') > -1 || key.indexOf(':') > -1) {

                    var prop = element.PropertySet__c;
                    var paths = VOUINS.createPropPaths(prop, key);
                    array = array.concat(paths);

                } else {
                    array.push(key);
                }
                return array;
            }, []).filter(function(label) {
                return !!label;
            }).filter(function onlyUnique(value, index, self) {
                return self.indexOf(value) === index;
            });
        }

        function loadAllCustomLabelsInOrg() {
            allUnmanagedLabels = null;
            window.conn.metadata.retrieve({
                unpackaged: {
                    'types': {
                        'members': '*',
                        'name': 'CustomLabel'
                    },
                    'version': '42.0'
                }
            }).complete(function (err, result) {
                window.JSZip.loadAsync(result.zipFile, {base64: true})
                    .then(function (zip) {
                        var customLabelsFile = $q.when('<?xml version=\"1.0\" ' +
                        'encoding=\"UTF-8\"?><CustomLabels xmlns=\"http://soap.sforce.com/2006/04/metadata\">' +
                        '</CustomLabels>');
                        if (zip.files['unpackaged/labels/CustomLabels.labels']) {
                            var outputFile = zip.file('unpackaged/labels/CustomLabels.labels');
                            if (outputFile) {
                                customLabelsFile = outputFile.async('string');
                            }
                        }
                        return customLabelsFile;
                    }).then(function (text) {
                        var jsonResponse = xmlToJson(text);

                        var labels = jsonResponse.CustomLabels.labels;
                        if (!Array.isArray(labels) && labels) {
                            labels = [labels];
                        }
                        if (!labels) {
                            allUnmanagedLabels = {};
                            return;
                        }
                        allUnmanagedLabels = labels.reduce(function (obj, label) {
                            if (!obj[label.fullName['#text'].toLowerCase()]) {
                                obj[label.fullName['#text'].toLowerCase()] = {};
                            }
                            obj[label.fullName['#text'].toLowerCase()] = {
                                originalName: label.fullName['#text'],
                                originalLanguage: label.language['#text'],
                                isDefault: true,
                                value: label.value['#text']
                            };
                            return obj;
                        }, {});
                    });
            });
        }
    }
})();

},{"../../common/shared/osLabelSet.js":4}],82:[function(require,module,exports){
(function() {
    /* jshint -W030 */
    'use strict';
    window.angular.module('omniscriptDesigner').
        service('customViewModalService', ['$modal', 'interTabMsgBus', function($modal, interTabMsgBus){

            this.getCustomViewModalWindow = function(pScope, newValue, oldValue, pageToMode, callback){
                
                var self = this;

                //gets the layout and the view name from the localStorage
                this.config = (function(){
                    return interTabMsgBus.get('config', true) ; //this can be a valid object or an empty object
                }());

                
                //if nothing was written to the localStorage
                (!this.config) && (function(){
                    self.config = {};
                    self.config.layout = self.config.layout || 'false';
                }());

                return $modal ({
                    title: 'Custom Visual Force Page Setup',
                    templateUrl: 'custom-VF-modal.tpl.html',
                    backdrop: 'static',
                    keyboard: false,
                    controller: function($scope, $http){
                        $scope.customViewModal = self.config;

                        $scope.submit = function(){

                            //newValue is custom
                            pageToMode[newValue] = $scope.customViewModal.pageName;
                            
                            var sucessCallback = function(result){
                                //this is a hack - since salesforce always the header as 200 no matter what happens
                                if (/Visualforce Error/.test(result.data)){
                                    $scope.errorMessage = $scope.customViewModal.pageName + ' is not a valid page';
                                } else {
                                    $scope.$hide();

                                    window.setTimeout(function(){
                                        //writing to the session no matter what
                                        interTabMsgBus.set('config', self.config, true);
                                    },0);
                                    
                                    callback && (function(){
                                        callback(function(){
                                            //replace this with an object
                                            return {
                                                verticalMode: '&verticalMode='+ $scope.customViewModal.layout,
                                            };
                                        });
                                    }());
                                    
                                    $scope.errorMessage = '';
                                }
                            };

                            var failureCallback = function(error){
                                //notify the user that the page is invalid
                                $scope.errorMessage = $scope.customViewModal.pageName + ' is not a valid page';
                            };

                            //check the page for 404s 
                            $http.get('/apex/' + $scope.customViewModal.pageName).then(sucessCallback,
                                                                                       failureCallback);

                        };

                        $scope.cancel = function() {
                            //flips the select to the oldervalue when we cancel the modal
                            pScope.previewMode = oldValue;
                            $scope.$hide();
                        };
                    }
                });
            };
        }]);
}());

},{}],83:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .service('dataraptorBundleService', dataraptorBundleService);

    dataraptorBundleService.$inject = ['remoteActions'];

    function dataraptorBundleService(remoteActions) {
        this.getMatchingDRBundles = getMatchingDRBundles;

        ////////////////

        function getMatchingDRBundles(name, types) {
            return remoteActions.getMatchingDRBundles(name, types);
        }

    }
})();

},{}],84:[function(require,module,exports){
(function(){
    window.angular.module('omniscriptDesigner')
        .service('propertyEditorModalService', ['$timeout', '$modal', 'remoteActions',function($timeout, $modal, remoteActions){

            this.imgDocs = [];

            this.supportedFormats = ['png', 'gif', 'jpeg', 'jpg'];

            var self = this;

            this.init = function(documents) {
                this.documents = documents.map(function(document) {
                        ((document.IsPublic && document.Type && document.Type.indexOf('image') !== -1) ||  self.supportedFormats.includes(document.Type)) &&
                            (function() {
                                self.imgDocs.push(document);
                            }());

                        return document ;
                });
            };

            this.loadDocs = function(){
                remoteActions.getAllDocuments().then(function(documents) {
                    self.init(documents);
                });
            };

            this.loadDocs();

            this.prepDocInsert = function(parentObject, tgtProp, imageInsert) {
                var input = {};
                input.filePicker = false;
                input.fileUpload = null;
                input.selDocuments = null;
                input.imageInsert = imageInsert;
                input.currentValue = parentObject[tgtProp];

                input.callback = function(bstring, name) {
                    return remoteActions.uploadDocument(btoa(bstring),name, 'image'); //this returns a promise
                };

                input.getTest = function(){
                    return self.names;
                };

                input.getDocs = function(imageInsert) {
                    if (imageInsert)
                        return self.imgDocs;
                    else return self.documents;
                };

                input.loadDocs = function(){return self.loadDocs();};

                        if (input.currentValue){
                            input.filePicker = true;
                            input.selDocuments = input.getDocs(imageInsert).find(function(doc){
                                if (doc.Id == input.currentValue.match(/[^=&;]+(?=(?:&(?:amp;?)?){1,2}(?:docName|oid=))/)[0])
                                    return doc;
                            });
                        }

                        this.openDocInsert(function(){
                            return input;
                        }, parentObject, tgtProp);
            };

            this.openDocInsert = function(callback, parentObject, tgtProp) {

                return $modal({
                        title: (callback().imageInsert ? 'Image' : 'Document') + ' Insert',
                        templateUrl: 'modal-doc-insert.tpl.html',
                        controller: function($scope){
                            $scope.obj = callback();

                            var MAX_SIZE = 750000;

                            var FILE_SIZE_WARNING = 'File exceeds the 1mb Remote Action upload limit. Please go' +
                                                    ' to the Documents tab to upload the file (up to 5mb).';
                            var FAILED_UPLOAD = 'The file could not be uploaded';

                            function isSmallEnough(file) {
                                return file.size < MAX_SIZE ;
                            }



                            $scope.cancel = function(){
                                $scope.$hide();
                            };

                            $scope.delete = function(){
                                parentObject[tgtProp] = null;
                                $scope.$hide();
                            };

                            $scope.submit = function(){

                                var basePath = ($scope.obj.imageInsert ? '../servlet/servlet.ImageServer?' : '../servlet/servlet.FileDownload?file=');

                                if($scope.obj.filePicker && $scope.obj.selDocuments !== null){
                                    if ($scope.obj.imageInsert) {
                                        parentObject[tgtProp] = basePath + 
                                                                'id=' + $scope.obj.selDocuments.Id +
                                                                '&&docName=' + $scope.obj.selDocuments.DeveloperName +
                                                                '&&oid=' + window.oid;
                                    } else {
                                        parentObject[tgtProp] = basePath + $scope.obj.selDocuments.Id +
                                                                '&&docName=' + $scope.obj.selDocuments.DeveloperName;
                                    }

                                    $scope.obj.callback = false;
                                    $scope.cancel();


                                }else if(!($scope.obj.filePicker || document.getElementById('filePicker').files === null)){
                                    //Submit UPLOADED docId
                                    var file = document.getElementById('filePicker').files[0];
                                    var reader = new FileReader();

                                    reader.readAsBinaryString(file);

                                    reader.onerror = function(e) {
                                        document.getElementById('docSelModalFile').value =  file.name;
                                    };

                                    reader.onload = function(e) {
                                        if (!isSmallEnough(file)) {
                                            $('#errorLabel').text(FILE_SIZE_WARNING);
                                            return false;
                                        }

                                        document.getElementById('docSelModalFile').value =  'uploading ' + file.name + '...';

                                        var bstring = e.target.result;
                                        var result = $scope.obj.callback(bstring,file.name, file.type);

                                        result.then && result.then(function(result) {
                                            if ($scope.obj.imageInsert){
                                                parentObject[tgtProp] = basePath + 
                                                                        'id=' + result[0].Id +
                                                                        '&&docName=' + result[0].DeveloperName+
                                                                        '&&oid=' + window.oid;
                                            } else{
                                                parentObject[tgtProp] = basePath + result[0].Id +
                                                                        '&&docName=' + result[0].DeveloperName;
                                            }

                                            $scope.obj.loadDocs();
                                            $scope.cancel();
                                        }, function(fail) {
                                            $('#errorLabel').text(FAILED_UPLOAD + (fail.message ? 'Error message: ' + fail.message : '.'));
                                        });
                                    };


                                }
                            };

                            $scope.clearError = function(){
                                $('#errorLabel').text('');
                            };

                        }                    
                });
            };

            this.prepExpressionEditor = function(elementNames,parentObject, tgtProp, expressionOnly){
                var input = {};
                input.currentVal = parentObject[tgtProp];
                if (typeof input.currentVal == 'undefined'){
                    input.currentVal='';
                }
                input.elementNames = elementNames;

                // delete leading '=' token
                if (!expressionOnly) {
                    input.currentVal = String(input.currentVal).replace(/(?:^\s*=)|(?:\s*$)/g,'');
                }

                this.openExpressionEditor(function(){
                    return input;
                },parentObject, tgtProp);
            };

            this.openExpressionEditor = function(callback, parentObject, tgtProp) {

                return $modal({
                    title: 'Expression Editor',
                    templateUrl: 'modal-edit-expression.tpl.html',
                    backdrop:'static',
                    controller: function($scope) {
                        $scope.obj = callback();

                        $scope.obj.newVal = $scope.obj.currentVal;

                        $scope.cancel = function(){
                            $scope.$hide();
                        };

                        $scope.submit = function(){
                            if($scope.obj.newVal || $scope.obj.newVal == 'false'){
                                parentObject[tgtProp] = '='+$scope.obj.newVal;
                                if(parentObject.hasOwnProperty('$parentProperty') && parentObject.$parentProperty){
                                    parentObject.$parentProperty.update();
                                } else {
                                    parentObject.update();
                                }
                            }
                            $scope.cancel();
                        };
                    }
                });
            };
        }
    ]);
}());
},{}],85:[function(require,module,exports){
(function () {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .service('sObjectService', sObjectService);

        sObjectService.$inject = ['remoteActions'];

    function sObjectService(remoteActions) {
        this.getSObjects = getSObjects;

        var cachedSObjects = undefined;


        // call to get them straight away since this is slow
        getSObjects();

        ////////////////

        function getSObjects() {
            var fetchPromise = fetchSObjects()
                                .then(function (sObjects) {
                                    cachedSObjects = sObjects;
                                    return cachedSObjects;
                                });

            // to ensure we get fresh sObjects we'll always return the latest set but then update the
            // result. So on first call to this function we return undefined which let's Angular know
            // there's no results yet.
            if (!cachedSObjects) {
                return fetchPromise;
            }
            return Promise.resolve(cachedSObjects);
        }

        function fetchSObjects() {
            return remoteActions.getAllObjects().then(function (allObjects) {
                return allObjects.sort(function (a, b) {
                    return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
                });
            });
        }

    }
})();

},{}],86:[function(require,module,exports){
(function () {
    /* jshint -W030 */
    'use strict';
    window.angular.module('omniscriptDesigner')
        .service('tinyMCEService', ['remoteActions',function(remoteActions) {

            //var MAX_SIZE = 5048576;
            var MAX_SIZE = 750000; /* 1 000 000 * 3/4 to account for base64 */
            //var FILE_SIZE_WARNING = 'file size exceeds the limit';
            var FILE_SIZE_WARNING = 'File exceeds the 1mb Remote Action upload limit. Please go' +
                ' to the Documents tab to upload the file (up to 5mb).';

            function isSmallEnough(file) {
                return file.size < MAX_SIZE ;
            }

            var self = this;

            var stylesheetref = $('link[rel=stylesheet]').filter(function () {
                return /vlocity\.css/.test(this.getAttribute('href'));
            });

            this.plugins = (function() {
                return 'smartLink';
            }());
            this.imageDocs = [];

            this.supportedFormats = ['png', 'gif', 'jpeg', 'jpg'];

            this.tinymceOptions = {
                body_class: 'vlocity',
                menubar: true,
                //relative_urls: false,
                elementpath: false,
                plugins: [
                    'code advlist autolink lists link image charmap preview hr anchor pagebreak',
                    'searchreplace wordcount visualblocks visualchars code fullscreen',
                    'insertdatetime table media nonbreaking contextmenu directionality',
                    'template paste textcolor colorpicker textpattern imagetools ' + this.plugins
                ],
                imagetools_toolbar: 'imageoptions',
                menu: {
                    edit: {
                        title: 'Edit',
                        items: 'undo redo | cut copy paste pastetext | selectall'
                    },
                    insert: {
                        title: 'Insert',
                        items: 'link image | anchor hr charmap insertdatetime'
                    },
                    view: {
                        title: 'View',
                        items: 'visualaid preview '
                    },
                    format: {
                        title: 'Format',
                        items: 'bold italic underline strikethrough superscript subscript | formats | removeformat'
                    },
                    table: {
                        title: 'Table',
                        items: 'inserttable tableprops deletetable | cell row column'
                    },
                    tools: {
                        title: 'Tools',
                        items: 'spellchecker code'
                    }
                },
                default_link_target: '_blank',
                image_list: function(success) {
                    success(self.imageDocs);
                },
                link_list: function (success) {
                    success(self.documents);
                },
                toolbar1: 'undo redo | styleselect | bold italic |' +
                ' alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
                toolbar2: 'preview | forecolor backcolor | code | example | ltr rtl',
                content_css: stylesheetref[0].getAttribute('href'),
                extended_valid_elements: 'button[*],a[*],p[*],ul[*],input[*],li[*],' +
                'nav[*],script[language|type|src|defer],select[*]',
                forced_root_block: 'p',
                images_upload_handler:function (blobInfo, success, failure) {
                    remoteActions.uploadDocument(blobInfo.base64(), blobInfo.filename(), blobInfo.blob().type)
                        .then(function(result) {
                            success(`https://${window.location.hostname}/servlet/servlet.ImageServer?id=${result[0].Id}&docName=${result[0].DeveloperName}&oid=${window.oid}`);
                        }).catch(function(fail) {
                            failure(fail.message ? `Unexpected Error:  ${fail.message}` : '.');
                        });
                },
                file_picker_callback: function (cb, value, meta) {
                    var input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    if (meta.filetype === 'image') {
                        input.setAttribute('accept', 'image/*');
                    }

                    input.onchange = function () {
                        var file = this.files[0];

                        var reader = new FileReader();
                        reader.readAsBinaryString(file);

                        reader.onerror = function(e) {
                            console.log(e);
                        };

                        reader.onload = function (e) {
                            if (!isSmallEnough(file)) {
                                alert(FILE_SIZE_WARNING);
                                return false;
                            }

                            var bstring = e.target.result;

                            remoteActions.uploadDocument(btoa(bstring), file.name, file.type)
                                .then(function (result) {
                                    if (meta.filetype === 'image') {
                                        cb(`https://${window.location.hostname}/servlet/servlet.ImageServer?id=${result[0].Id}&docName=${result[0].DeveloperName}&oid=${window.oid}`)
                                    } else {
                                        cb(`https://${window.location.hostname}/servlet/servlet.FileDownload?id=${result[0].Id}&docName=${result[0].DeveloperName}&oid=${window.oid}`);
                                    }
                                }).catch(function(fail) {
                                    failure(fail.message ? `Unexpected Error: ${fail.message}` : '.');
                                });
                        };
                    };

                    input.click();
                },
                image_uploadtab: true
            };

            this.init = function(documents) {
                self.documents = documents.map(function(document) {
                    ((document.Type && document.Type.indexOf('image') !== -1) ||  self.supportedFormats.includes(document.Type)) &&
                        (function() {
                            if (document.IsPublic){
                                self.imageDocs.push({
                                    value: `https://${window.location.hostname}/servlet/servlet.ImageServer?id=${document.Id}&docName=${document.DeveloperName}&oid=${window.oid}`,
                                    text: document.Name
                                });
                            }
                        }());

                    return {
                        value: `https://${window.location.hostname}/servlet/servlet.ImageServer?id=${document.Id}&docName=${document.DeveloperName}&oid=${window.oid}`,
                        text: document.Name
                    } ;
                });
            };

            remoteActions.getAllDocuments().then(function(documents) {
                self.init(documents);
            });

            remoteActions.getLanguageCodeMap().then(function(langCodeMap){
                var langMap = [];

                angular.forEach(langCodeMap, function(key, value){
                    langMap.push({text: value, value: key });
                });

                window.tinymce.getLanguageCodeMap = function(){
                    return langMap;
                };
            });

            window.tinyMCE.remoteCall = function(searchKey, status, langCode) {
                searchKey = searchKey || '';
                status = status || '' ;
                langCode = langCode || '';
                return remoteActions.getKnowledgeArticles(searchKey, status, langCode);
            };

        }]);

}());

},{}],87:[function(require,module,exports){
var templateMgr = require('../../oui/util/vlcUiTempMgr.js');

(function() {
    'use strict';

    angular
        .module('omniscriptDesigner')
        .service('vlocityUiTemplateService', VlocityUiTemplateService);

    VlocityUiTemplateService.$inject = ['remoteActions', '$q'];
    function VlocityUiTemplateService(remoteActions, $q) {
        var templates;
        function loadTemplates() {
            return remoteActions.loadVlocityUITemplates().then(function(uiTemplates) {
                templates = uiTemplates.map(function(uiTemplate) {
                    return {
                        Id: uiTemplate.Id,
                        Name: uiTemplate.Name,
                        Type__c: uiTemplate[ns + 'Type__c']
                    };
                });
                return templates = _.sortBy(templates, [function(o) { return o.Name.toLowerCase() }]);
            });
        }
        this.getGeneralTemplates = function getGeneralTemplates() {
            if (!templates) {
                return loadTemplates()
                    .then(function() {
                        return getGeneralTemplates();
                    });
            }
            return $q.resolve(templateMgr.getGenTemplates(templates));
        };
    }
})();

},{"../../oui/util/vlcUiTempMgr.js":98}],88:[function(require,module,exports){
angular.module("omniscriptDesigner").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("custom-VF-modal.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n    <div class="modal-dialog" style="display:inline-block;width:auto;position:fixed;top:40%;left:50%">\n        <div class="modal-content" style="display:inline-block">\n            <div class="modal-header">\n                <h4 class="modal-title">{{::title}}</h4>\n            </div>\n            <div class="modal-body">\n                <form>\n                    <div class="form-group form-inline text-center">\n                        <label>Visual Force Page Name\n                            <input ng-model="customViewModal.pageName" type="text" class="form-control"/>\n                        </label>\n                    </div>\n                    <div class="form-group form-inline text-center">\n                        <p class="pull-left">Mode</p>\n                        <div class="input-group pull-right">\n                          <span style="position:relative;left:-20px"><input ng-model="customViewModal.layout" type="radio" value="false"/> Horizontal&nbsp;</span>\n                          <input ng-model="customViewModal.layout" type="radio" value="true" /> Vertical\n                        </div>\n                    </div>\n                    \x3c!-- mugatu clearfix did not work for me in this case --\x3e\n                    <div class="form-group text-center" style="clear:both">\n                        <div class="row">\n                            <button ng-click="submit()" class="btn btn-primary">Launch</button>\n                            <button ng-click="cancel()" class="btn btn-default">Cancel</button>\n                        </div>\n                    </div>\n                    <div class="form-group text-center">\n                        <p style="color:red">{{errorMessage}}</p>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n</div>\n'),$templateCache.put("modal-view-full-data-json.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true" ng-init=\'initFullDataJson()\'>\n  <div class=\'spinner\' ng-show=\'loading\' style=\'position: relative; top: 280px; left: 49%; z-index: 9999;\'></div>\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" aria-label="Close" ng-click="$hide()"><span aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" ng-bind="title"></h4>\n      </div>\n      <div class="modal-body">\n        <button class="btn btn-default copy-btn pull-right" type="button" data-clipboard-target="#vf">Copy to clipboard</button>\n        <textarea id="vf" class="form-control modal-textarea" rows="17" ng-model="dataJson">\n        </textarea>\n        <p></p>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok();$hide()">{{ ::\'OmniDesOk\' | localize }}</button>\n      </div>\n    </div>\n  </div>\n</div>'),$templateCache.put("paleteElementGroup.tpl.html",'<div class="paletteElementGroup" >\n    <h5 ng-click="model.expand = !model.expand">\n        <span class="pull-left">{{grouptitle}}</span>\n        <i class="icon icon-v-right-arrow pull-right"\n            ng-show="!model.expand"></i>\n        <i class="icon icon-v-down-arrow pull-right"\n            ng-show="model.expand"></i>\n    </h5>\n    <ul class="collapse" ng-class="{in: model.expand}">\n        <li ng-show="group.length == 0">\n            <h6>{{ ::\'OmniDesPaletteEmpty\' | localize:\'There are no available {1}\':grouptitle }}</h6>\n        </li>\n        <li class="paletteElementType"\n            ng-show="group.length > 0"\n            ng-repeat="element in group"\n            dnd-disable-if="$parent.$parent.scriptElement.isDisabled()"\n            dnd-type="element.type"\n            dnd-effect-allowed="move"\n            dnd-draggable="element">\n            <span class="paletteElementTypeLabel">\n                <span>{{element | elementLabel}}</span>\n                <svg ng-if="element.lwcEnabled && $parent.$parent.scriptElement.IsLwcEnabled__c" width="16" height="16" viewBox="0 0 221 357" fill="none" stroke="#16325c" stroke-linejoin="round" stroke-width="8">\n                    <path fill="transparent" d="M51 4L4 177h68L30 353l187-228h-73L198 4z"></path>\n                    <path d="M75 43l-24 90 24-90z"></path>\n                </svg>\n                <i class="icon icon-v-grip"></i>\n            </span>\n        </li>\n    </ul>\n</div>'),$templateCache.put("tabs.tpl.html",'<ul class="nav" ng-class="$navClass" role="tablist">\n  <li role="presentation" ng-repeat="$pane in $panes track by $index" ng-class="[ $isActive($pane, $index) ? $activeClass : \'\', $pane.disabled ? \'disabled\' : \'\' ]">\n    <a role="tab" data-toggle="tab" ng-click="!$pane.disabled && $setActive($pane.name || $index)" data-index="{{ $index }}" ng-bind-html="$pane.title" aria-controls="$pane.title">\n    </a>\n    <i class="icon icon-v-close"></i>\n  </li>\n</ul>\n<div ng-transclude class="tab-content">\n</div>'),$templateCache.put("omniTranslateModal.tpl.html",'<div id="omni-translation-modal"  class="slds-modal slds-modal_large slds-fade-in-open" dir="ltr">\n    <style>\n      #omni-translation-modal .slds-modal__content,\n      #omni-translation-modal .slds-modal__content > preview-extract-transform > div {\n        min-height: calc(75vh - 5rem);\n      }\n    </style>\n\n        <convert-omni-to-multi-lang-modal \n                script-element="$root.scriptElement"\n                ng-if="convertToNewMultiLang"\n                on-cancel="$hide()"\n                on-save="$hide()"></convert-omni-to-multi-lang-modal>\n        <translation-edit-modal \n                script-element="$root.scriptElement"\n                ng-if="!convertToNewMultiLang"\n                on-cancel="$hide()"\n                on-save="$hide()"></translation-edit-modal>\n      \n</div>'),$templateCache.put("propertysets/common/key-value-small.tpl.html",'<div class="row propertyRow">\n    <div class="col-md-12">\n        <label>\n            <span ng-bind="vm.label"></span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="vm.helpText"\n               data-container=".container"\n               ng-if="vm.helpText"\n               data-type="info"></i>\n        </label>\n        <div ng-transclude></div>\n        <ul style="min-height: 0px"\n            ng-if="vm.map.length > 0">\n            <li class="row">\n                <div class="col-md-5 text-center"\n                     ng-bind="vm.keyLabel"></div>\n                <div class="col-md-5 text-center"\n                     ng-bind="vm.valueLabel"></div>\n                <div class="col-md-2"></div>\n            </li>\n        </ul>\n        <ul ng-if="vm.map.length > 0">\n            <li class="optionProperty row"\n                ng-repeat="option in vm.map track by $index">\n                <div class="col-md-5">\n                    <input ng-attr-id="{{vm.idPrefix + \'_\' + $index + \'_key\'}}"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="option.key" />\n                </div>\n                <div class="col-lg-5 faux-field"\n                     ng-if="vm.renderExpressionCell"\n                     ng-class="{ divDisabled: vm.scriptElement.isDisabled() }">\n                    <button type="button"\n                            class="btn btn-default faux-field"\n                            ng-disabled="(option.type == \'object\' ||option.type == \'array\') || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editAsExpression(option, false)">\n                        <i>fx</i>\n                    </button>\n                    <input type="text"\n                           class="form-control faux-field"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="option.value"\n                           ng-if="option.type !== \'object\' && option.type !== \'array\'" />\n                    <input type="text"\n                           class="form-control faux-field"\n                           value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                           ng-if="option.type == \'object\' || option.type == \'array\'"\n                           disabled="disabled"\n                           readonly="readonly" />\n                </div>\n                <div class="col-md-5"\n                     ng-if="!vm.renderTemplateCell && !vm.renderExpressionCell">\n                    <div class=\'inline-control\'\n                         ng-class="{divDisabled: vm.ngDisabled}">\n                        <input ng-attr-id="{{vm.idPrefix + \'_\' + $index+\'_value\'}}"\n                               type="text"\n                               class="form-control"\n                               ng-if="option.type != \'object\' && option.type != \'array\'"\n                               ng-disabled="vm.ngDisabled"\n                               ng-change="vm.updateKeyValueProperty()"\n                               ng-model="option.value" />\n                        <input type="text"\n                               class="form-control faux-field"\n                               value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                               ng-if="option.type == \'object\' || option.type == \'array\'"\n                               disabled="disabled"\n                               readonly="readonly" />\n                    </div>\n                </div>\n                <div class="col-md-5"\n                     ng-if="vm.renderTemplateCell && !vm.renderExpressionCell">\n                    <html-template-id-prop\n                        ng-model="option.value"\n                        ng-change="vm.updateKeyValueProperty()"\n                        script-element="vm.scriptElement"\n                        ng-disabled="vm.ngDisabled"\n                        hide-label="true"\n                        ng-if"option.type != \'object\' && option.type != \'array\'"></html-template-id-prop>\n                    <div class=\'inline-control\'\n                         ng-class="{divDisabled: vm.ngDisabled}"\n                         ng-if="option.type == \'object\' || option.type == \'array\'">\n                        <input type="text"\n                               class="form-control faux-field"\n                               value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                               disabled="disabled"\n                               readonly="readonly" />\n                    </div>\n                </div>\n                <div class="col-md-2">\n                    <button ng-attr-id="{{vm.idPrefix + \'_\' + $index+\'_deleteBtn\'}}"\n                            type="button"\n                            class="btn btn-link"\n                            ng-if="!vm.ngDisabled"\n                            ng-click="vm.deleteKeyValue(option)">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </li>\n        </ul>\n        <button ng-attr-id="{{vm.idPrefix + \'_addBtn\'}}"\n                type="button"\n                class="btn btn-default add-new"\n                ng-disabled="vm.ngDisabled"\n                ng-click="vm.addNewKeyValue()"\n                ng-bind="vm.addBtnLabel"></button>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/text.tpl.html",'<label>\n    <span ng-bind="::vm.label"></span>\n    <i class="icon icon-v-information-line"\n       ng-if="::vm.helpText"\n       data-html="true"\n       bs-tooltip="vm.helpText"\n       data-container=".container"\n       data-type="info"></i>\n       <a ng-href="{{::vm.documentation}}" ng-if="vm.documentation" target="_blank">Documentation</a>\n</label>\n<div>\n    <input type="text"\n           class="form-control"\n           ng-disabled="vm.ngDisabled"\n           ng-model="vm.ngModel"\n           ng-if="vm.type != \'object\' && vm.type != \'array\'"\n           placeholder={{vm.placeholder}}\n           ng-change="vm.ngModelChange()"\n           autocomplete="new-password" />\n    <input type="text"\n           class="form-control faux-field"\n'+"           value=\"{{(vm.type == 'object') ? 'Object' : 'Array'}} (click 'Edit as JSON' to modify)\"\n           ng-if=\"vm.type == 'object' || vm.type == 'array'\"\n           placeholder={{placeholder}}\n           disabled=\"disabled\"\n           readonly=\"readonly\" />\n</div>\n"),$templateCache.put("propertysets/common/errormessage-handler.tpl.html",'<div class="row propertyRow">\n  <div ng-if="vm.errorMessages.default !== undefined" class="col-md-6">\n    <label>\n      <span>Default Error Message</span>\n      <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Default error message will be displayed when no other custom error messages match.\'" data-container=".container" data-type="info"></i>\n    </label>\n    <div>\n      <input id="OmniScript__c_Name"\n      type="text"\n      class="form-control"\n      ng-disabled="vm.ngDisabled"\n      ng-model="vm.errorMessages.default" />\n    </div>\n  </div>\n  <div class="col-md-12">\n    <label>\n      <span>Custom Error Messages</span>\n      <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'A list of custom error messages that will be used instead of the default OmniScript error messages\'" data-container=".container" data-type="info"></i>\n    </label>\n    <div class="group-rows">\n      <div class="row propertyRow">\n        <div class="optionProperty col-md-11" ng-if="vm.errorMessages.custom.length > 0">\n          <div class="row propertyRow">\n            <div class="col-md-3 text-center">\n              <label>\n                <span>Path</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'A merge field path (key1:key2|index) to locate the default error message inside an error object. If the error is a string, leave this field empty\'" data-container=".container" data-type="info"></i>\n              </label>\n            </div>          \n            <div class="col-md-4 text-center">\n              <label>\n                <span>Value</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The default error message (based on the path) that will be matched exactly (including spaces) and replaced with the custom message\'" data-container=".container" data-type="info"></i>\n              </label>\n            </div>          \n            <div class="col-md-4 text-center">\n              <label>\n                <span>Message</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The custom message that will replace the default error message\'" data-container=".container" data-type="info"></i>\n              </label>\n            </div>\n          </div>\n        </div>\n        <div class="optionProperty col-md-12" ng-repeat="errMsg in vm.errorMessages.custom track by $index">\n          <div class="row propertyRow">\n            <div class="col-md-11">\n              <div class="row propertyRow">\n                <div class="col-md-3">\n                  <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-model="errMsg.path" />\n                  </div>\n                </div>\n                <div class="col-md-4">\n                  <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-model="errMsg.value" />\n                  </div>\n                </div>\n                <div class="col-md-4">\n                  <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-model="errMsg.message" />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class="col-md-1">\n              <div class="row propertyRow">\n                <button type="button" class="btn btn-link" ng-disabled="vm.ngDisabled" ng-click="vm.deleteErrorMessage(errMsg)">\n                  <span class="icon icon-v-trash"></span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class="optionProperty col-md-12">\n          <button type="button" class="btn btn-default add-new" ng-disabled="vm.ngDisabled" ng-click="vm.addNewErrorMessage()" > Add Custom Error Message\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n'),$templateCache.put("propertysets/common/array-list.tpl.html",'<div class="panel panel-default vlc-docusign-list">\n    <div class="panel-heading"\n         style="overflow: auto;">\n        {{::vm.label}}\n        <button class="btn btn-default"\n                type="button"\n                ng-disabled="vm.ngDisabled"\n                ng-click="vm.add()"\n                style="float: right;">\n            <i class="icon icon-v-plus-line"></i>{{::vm.addBtnLabel}}\n        </button>\n    </div>\n    <table class="table">\n        <tbody class="vlc-docusign-tbody-omni">\n            <tr ng-repeat="value in vm.ngModel track by $index">\n                <td>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-change="vm.ngModelChange()"\n                           ng-model="vm.ngModel[$index]">\n                </td>\n                <td width="50px">\n                    <span class="trash-icon icon-v-trash"\n                          ng-class="{ \'is-disabled\': vm.ngDisabled }"\n                          ng-click="vm.remove($index)"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),$templateCache.put("propertysets/common/lwc-override.tpl.html",'<div class="row propertyRow">\n    <div class="col-md-12">\n        <label>\n            <span ng-bind="vm.label"></span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="vm.helpText"\n               data-container=".container"\n               ng-if="vm.helpText"\n               data-type="info"></i>\n        </label>\n        <ul style="min-height: 0px"\n            ng-if="vm.map.length > 0">\n            <li class="row">\n                <div class="col-md-6 text-center"\n                     ng-bind="vm.keyLabel"></div>\n                <div class="col-md-5 text-center"\n                     ng-bind="vm.valueLabel"></div>\n                <div class="col-md-1"></div>\n            </li>\n        </ul>\n        <ul ng-if="vm.map.length > 0">\n            <li class="optionProperty row"\n                ng-repeat="option in vm.map track by $index">\n                <div class="col-md-6">\n                    <input ng-attr-id="{{vm.idPrefix + \'_\' + $index + \'_key\'}}"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="option.key" />\n                </div>\n                <div class="col-md-5">\n                    <input \n                      g-attr-id="{{vm.idPrefix + \'_\' + $index+\'_value\'}}"\n                      type="text"\n                      class="form-control"\n                      ng-disabled="vm.ngDisabled"\n                      ng-model="option.value"\n                      ng-change="vm.updateKeyValueProperty()"\n                      data-min-length="0"\n                      bs-options="lwc for lwc in vm.lwcList"\n                      watch-options="true"\n                      bs-typeahead />\n                </div>\n                <div class="col-md-1">\n                    <button ng-attr-id="{{vm.idPrefix + \'_\' + $index+\'_deleteBtn\'}}"\n                            type="button"\n                            class="btn btn-link"\n                            ng-if="!vm.ngDisabled"\n                            ng-click="vm.deleteKeyValue(option)">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </li>\n        </ul>\n        <div>\n          <button ng-attr-id="{{vm.idPrefix + \'_addBtn\'}}"\n                  type="button"\n                  class="btn btn-default add-new"\n                  ng-disabled="vm.ngDisabled"\n                  ng-click="vm.addNewKeyValue()"\n                  ng-bind="vm.addBtnLabel"></button>\n        </div>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/html-template-id.tpl.html",'<div class="row propertyRow"\n     ng-if="vm.hideLabel !== true">\n    <div class="col-md-12">\n        <label>\n            <span>HTML Template Id</span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="\'To override the template for this specific element, enter the Id of an alternative template here. Templates can be referenced from the Vlocity Template Designer, a Visualforce Page or Component, or the Custom HTML Templates section in Script Configuration.\'"\n               data-container=".container"\n               data-type="info"></i>\n        </label>\n        <div class=\'inline-control\'\n             ng-class="{divDisabled: vm.ngDisabled}">\n            <input type="text"\n                   class="form-control"\n                   ng-model="vm.ngModel"\n                   ng-change="vm.ngModelChange()"\n                   watch-options="true"\n                   bs-options="template.key as template.value for template in vm.templateList"\n                   bs-typeahead\n                   data-min-length="0"\n                   ng-disabled="vm.ngDisabled" />\n            <button id="openTemplateBtn"\n                    class="btn btn-link pull-right"\n                    ng-click="vm.openTemplate($event, vm.ngModel)"\n                    ng-disabled="!vm.templateMap.hasOwnProperty(vm.ngModel)">\n                <i class="icon icon-v-link"></i>\n            </button>\n        </div>\n    </div>\n</div>\n<div class=\'inline-control\'\n     ng-class="{divDisabled: vm.ngDisabled}"\n     ng-if="vm.hideLabel === true">\n    <input type="text"\n           class="form-control"\n           ng-model="vm.ngModel"\n           ng-change="vm.ngModelChange()"\n           watch-options="true"\n           bs-options="template.key as template.value for template in vm.templateList"\n           bs-typeahead\n           data-min-length="0"\n           ng-disabled="vm.ngDisabled" />\n    <button id="openTemplateBtn"\n            class="btn btn-link pull-right"\n            ng-click="vm.openTemplate($event, vm.ngModel)"\n            ng-disabled="!vm.templateMap.hasOwnProperty(vm.ngModel)">\n        <i class="icon icon-v-link"></i>\n    </button>\n</div>\n'),$templateCache.put("propertysets/common/monaco-editor-prop.tpl.html",'<div class="form-group">\n    <label>\n        <span ng-bind="vm.label"></span>\n    </label>\n    <monaco-editor ng-model="vm.ngModel"\n                   ng-attr-readonly="{{vm.ngDisabled ? \'readonly\' : undefined}}"\n                   ng-attr-disabled="{{vm.ngDisabled ? \'disabled\' : undefined}}"\n                   language="vlocity-formula"\n                   style="max-width: 100%; min-height: 7rem; max-height: 7rem; padding: 0; overflow: visible; display: block; border: 1px solid #ccc; border-radius: 4px;"\n                   ng-change="vm.ngModelChange()"></monaco-editor>\n</div>\n'),$templateCache.put("propertysets/common/lwc-selection.tpl.html",'<div class="row propertyRow">\n  <div class="col-md-12">\n      <label>\n          <span>LWC Component Override</span>\n          <i class="icon icon-v-information-line"\n             bs-tooltip="\'The name of the custom LWC that overrides the LWC component\'"\n             data-container=".container"\n             data-type="info"></i>\n      </label>\n      <div>\n        <input \n               type="text"\n               class="form-control"\n               ng-disabled="vm.ngDisabled"\n               ng-model="vm.ngModel"\n               ng-change="vm.updateModel()"\n               data-min-length="0"\n               bs-options="lwc for lwc in vm.lwcList"\n               watch-options="true"\n               bs-typeahead />\n      </div>\n  </div>\n</div>'),$templateCache.put("propertysets/common/show-persistent-component.tpl.html",'<div class="objectGroup">\n    <label>\n        <span>Show Persistent Component</span>\n        <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates whether the shopping cart (vlcCart) or knowledge base (vlcKnowledge) should be shown on this step.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n    </label>\n    <div class="objectProperty"\n         ng-repeat="property in vm.persistentComponent">\n        <div class="checkbox">\n            <div>\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.ngDisabled"\n                           ng-model="vm.ngModel[property.id]"\n                           ng-change="vm.ngModelChange()">\n                    <span ng-bind="property.id"></span>\n                </label>\n            </div>\n        </div>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/key-value.tpl.html",'<div class="row propertyRow">\n    <div class="col-md-12">\n        <label>\n            <span ng-bind="vm.label"></span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="vm.helpText"\n               data-container=".container"\n               ng-if="vm.helpText"\n               data-type="info"></i>\n        </label>\n        <div ng-transclude></div>\n        <ul style="min-height: 0px"\n            ng-if="vm.map.length > 0">\n            <li class="row">\n                <div class="col-md-6 text-center"\n                     ng-bind="vm.keyLabel"></div>\n                <div class="col-md-5 text-center"\n                     ng-bind="vm.valueLabel"></div>\n                <div class="col-md-1"></div>\n            </li>\n        </ul>\n        <ul ng-if="vm.map.length > 0">\n            <li class="optionProperty row"\n                ng-repeat="option in vm.map track by $index">\n                <div class="col-md-6">\n                    <input ng-attr-id="{{vm.idPrefix + \'_\' + $index + \'_key\'}}"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.ngDisabled"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="option.key" />\n                </div>\n                <div class="col-lg-5 faux-field"\n                     ng-if="vm.renderExpressionCell"\n                     ng-class="{ divDisabled: vm.scriptElement.isDisabled() }">\n                    <button type="button"\n                            class="btn btn-default faux-field"\n                            ng-disabled="(option.type == \'object\' ||option.type == \'array\') || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editAsExpression(option, false)">\n                        <i>fx</i>\n                    </button>\n                    <input type="text"\n                           class="form-control faux-field"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="option.value"\n                           ng-if="option.type !== \'object\' && option.type !== \'array\'" />\n                    <input type="text"\n                           class="form-control faux-field"\n                           value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                           ng-if="option.type == \'object\' || option.type == \'array\'"\n                           disabled="disabled"\n                           readonly="readonly" />\n                </div>\n                <div class="col-md-5"\n                     ng-if="!vm.renderTemplateCell && !vm.renderExpressionCell">\n                    <div class=\'inline-control\'\n                         ng-class="{divDisabled: vm.ngDisabled}">\n                        <input ng-attr-id="{{vm.idPrefix + \'_\' + $index+\'_value\'}}"\n                               type="text"\n                               class="form-control"\n                               ng-if="option.type != \'object\' && option.type != \'array\'"\n                               ng-disabled="vm.ngDisabled"\n                               ng-change="vm.updateKeyValueProperty()"\n                               ng-model="option.value" />\n                        <input type="text"\n                               class="form-control faux-field"\n                               value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                               ng-if="option.type == \'object\' || option.type == \'array\'"\n                               disabled="disabled"\n                               readonly="readonly" />\n                    </div>\n                </div>\n                <div class="col-md-5"\n                     ng-if="vm.renderTemplateCell && !vm.renderExpressionCell">\n                    <html-template-id-prop\n                        ng-model="option.value"\n                        ng-change="vm.updateKeyValueProperty()"\n                        script-element="vm.scriptElement"\n                        ng-disabled="vm.ngDisabled"\n                        hide-label="true"\n                        ng-if"option.type != \'object\' && option.type != \'array\'"></html-template-id-prop>\n                    <div class=\'inline-control\'\n                         ng-class="{divDisabled: vm.ngDisabled}"\n                         ng-if="option.type == \'object\' || option.type == \'array\'">\n                        <input type="text"\n                               class="form-control faux-field"\n                               value="{{(option.type == \'object\') ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                               disabled="disabled"\n                               readonly="readonly" />\n                    </div>\n                </div>\n                <div class="col-md-1">\n                    <button ng-attr-id="{{vm.idPrefix + \'_\' + $index+\'_deleteBtn\'}}"\n                            type="button"\n                            class="btn btn-link"\n                            ng-if="!vm.ngDisabled"\n                            ng-click="vm.deleteKeyValue(option)">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </li>\n        </ul>\n        <button ng-attr-id="{{vm.idPrefix + \'_addBtn\'}}"\n                type="button"\n                class="btn btn-default add-new"\n                ng-disabled="vm.ngDisabled"\n                ng-click="vm.addNewKeyValue()"\n                ng-bind="vm.addBtnLabel"></button>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/pattern.tpl.html",'<div ng-class="{ \'has-error\' : vm.ngModelCtrl.$invalid }">\n  <text-prop label="{{vm.label}}"\n             help-text="{{vm.helpText}}"\n             ng-disabled="vm.ngDisabled"\n             ng-model="vm.ngModel"\n             documentation="{{vm.documentation}}"></text-prop>\n\n  <small class="help-text">\n    <div ng-repeat="(error, value) in vm.ngModelCtrl.$error">{{::error}}</div>\n  </small>\n</div>'),$templateCache.put("propertysets/common/element-name.tpl.html",'<div class="col-md-6"\n     ng-class="{\'has-error\': !vm.form.elementname.$valid, \'has-warning\': vm.ngModel.indexOf(\' \') > -1 || !vm.isValidHTMLId}">\n    <label>\n        <span>Element Name</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'This is the internal name of the element, it is used as a JSON node to hold data.  It is best to use a name that is alphanumeric, without spaces, and compact.\'"\n           data-container=".container"\n           data-type="info"></i>\n    </label>\n    <div>\n        <input type="text"\n               class="form-control"\n               name="elementname"\n               ng-disabled="vm.ngDisabled"\n               ng-model="vm.ngModel"\n               ng-change="vm.ngModelChange()"\n               required />\n        <span ng-if="vm.form.elementname.$error.required"\n              class="help-block">You must set an element name.</span>\n        <span ng-if="vm.ngModel.indexOf(\' \') > -1"\n              class="help-block">It is recommended to not use spaces in the Element Name because it is known to have\n            severe performance issues in all browsers.</span>\n        <span ng-if="!vm.isValidHTMLId"\n                class="help-block">Element names should begin with a letter and may be followed by any number of\n                letters, numbers, hyphens ("-") and underscores ("_").</span>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/group.tpl.html",'<div class="group">\n    <h4 ng-click="vm.isOpen = !vm.isOpen">\n        <i class="icon icon-v-right-arrow"\n           ng-show="!vm.isOpen"></i>\n        <i class="icon icon-v-down-arrow"\n           ng-show="vm.isOpen"></i>\n        {{::vm.label}}\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="vm.helpText"\n           data-container=".container"\n           ng-if="vm.helpText"\n           data-type="info"></i>\n    </h4>\n    <div ng-show="vm.isOpen"\n         class="group-rows"\n         ng-transclude>\n    </div>\n</div>\n'),$templateCache.put("propertysets/common/checkbox.tpl.html",'<label>\n    <input type="checkbox"\n           ng-disabled="vm.ngDisabled"\n           ng-model="vm.ngModel"\n           ng-change="vm.ngModelChange()" />\n    <span ng-bind="::vm.label"></span>\n    <i class="icon icon-v-information-line"\n       ng-if="::vm.helpText"\n       data-html="true"\n       bs-tooltip="vm.helpText"\n       data-container=".container"\n       data-type="info"></i>\n</label>\n'),$templateCache.put("propertysets/persistentcomponent.tpl.html",'<div class="group-rows">\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Id</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'id\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model-options="{ updateOn: \'default blur\', debounce: { \'default\': 500, \'blur\': 0 } }"\n                       ng-change="vm.updatePersistentComponentId()"\n                       ng-model="vm.persistentComponentId" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Items Key</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'itemsKey\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.itemsKey" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Label</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'label\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Send JSON Path</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'sendJSONPath\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.sendJSONPath" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Send JSON Node</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'sendJSONNode\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.sendJSONNode" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Pre-Transform DataRaptor Interface</span>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.persistentComponent.preTransformBundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Transform"\n                               include-input-json="true"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Post-Transform DataRaptor Interface</span>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.persistentComponent.postTransformBundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Transform"\n                               include-input-json="true"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Response JSON Path</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'responseJSONPath\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.responseJSONPath" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Response JSON Node</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'responseJSONNode\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.responseJSONNode" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Remote Class</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'remoteClass\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.remoteClass" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Remote Method</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'remoteMethod\'}}"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.remoteMethod" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Remote Timeout (ms)</span>\n            </label>\n            <div>\n                <input ng-attr-id="{{vm.idPrefix + \'remoteTimeout\'}}"\n                       type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.remoteTimeout" />\n            </div>\n        </div>\n        <div class="col-md-6 checkbox">\n            <label>\n                <input ng-attr-id="{{vm.idPrefix + \'render\'}}"\n                       type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.persistentComponent.render" />\n                <span>Render</span>\n            </label>\n\n            <div class="row col-md-12" ng-if="vm.persistentComponentId==\'vlcKnowledge\' && vm.persistentComponent.render">\n              <label>\n                  <input ng-attr-id="{{vm.idPrefix + \'dispOutsideOmni\'}}"\n                         type="checkbox"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.persistentComponent.dispOutsideOmni" />\n                  <span>Display Outside OmniScript</span>\n              </label>\n            </div>\n        </div>\n    </div>\n\n    <key-value-prop label="Remote Options"\n                    ignore-keys="[\'preTransformBundle\', \'postTransformBundle\']"\n                    ng-model="vm.persistentComponent.remoteOptions"\n                    id-prefix="{{::vm.idPrefix + \'_remoteOptions\'}}"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    add-btn-label="Add New Remote Option">\n        <div class="key-value">\n            <div class="optionProperty row form-group col-md-12">\n                <label class="col-md-5">\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row col-md-7"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.persistentComponent.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n        <div class="key-value">\n            <div class="optionProperty row form-group col-md-12">\n                <label class="col-md-5">\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row col-md-7"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.persistentComponent.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n    </key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Modal Configuration Setting</span>\n                </label>\n                <div class="key-value">\n                    <div class="optionProperty row form-group col-md-12">\n                        <label class="col-md-5">\n                            <span>Modal HTML Template Id</span>\n                        </label>\n                        <div class="col-md-7">\n                            <html-template-id-prop ng-model="vm.persistentComponent.modalConfigurationSetting.modalHTMLTemplateId"\n                                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                                   script-element="vm.scriptElement"\n                                                   hide-label="true"></html-template-id-prop>\n                        </div>\n                    </div>\n                    <div class="optionProperty row form-group col-md-12">\n                        <label class="col-md-5">\n                            <span>Modal Controller</span>\n                        </label>\n                        <div class="col-md-7">\n                            <input ng-attr-id="{{vm.idPrefix + \'modalConfigurationSetting_modalController\'}}"\n                                   type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="vm.persistentComponent.modalConfigurationSetting.modalController" />\n                        </div>\n                    </div>\n                    <div class="optionProperty row form-group col-md-12">\n                        <label class="col-md-5">\n                            <span>Modal Size</span>\n                        </label>\n                        <div class="col-md-7">\n                            <input ng-attr-id="{{vm.idPrefix + \'modalConfigurationSetting_modalSize\'}}"\n                                   type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="vm.persistentComponent.modalConfigurationSetting.modalSize" />\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n'),$templateCache.put("propertysets/group/step.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Step Chart Label</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.chartLabel" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Step Instruction (Displays on Lightning player and Classic Horizontal mode only)</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Instruction text that is displayed to the user above the step chart.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <textarea ui-tinymce="vm.tinymceOptions"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.instruction"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop label="Validation Required"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.validationRequired"\n                           help-text="Prevent user from continuing to the next step unless all fields on this step pass validation."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <group-prop label="Button Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.previousLabel"\n                           label="Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.previousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.nextLabel"\n                           label="Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.nextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveLabel"\n                           label="Save Label"\n                           help-text="The text shown for the link that saves the state of the OmniScript.  This is not shown if Allow Save for Later is not checked in the script configuration."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveMessage"\n                           label="Save Message"\n                           help-text="This text is shown in a dialog to confirm that the user wishes to save the state of the OmniScript."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.cancelLabel"\n                           label="Cancel Label"\n                           help-text="The text shown for the link that cancels the OmniScript."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.cancelMessage"\n                           label="Cancel Message"\n                           help-text="This text is shown in a dialog to confirm that the user wishes to cancel the OmniScript."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.completeLabel"\n                           label="Complete Label"\n                           help-text="Only shows on last step of a resumed OmniScript. Sets saved OmniScript to &quot;Completed&quot;"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.completeMessage"\n                           label="Complete Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Knowledge Options"\n    help-text="Create the default Knowledge Query for articles on this step. Select the Article Language, Publish Status, and Keywords. Keywords can include merge fields from the OmniScript. The Data Category criteria should follow the correct syntax, for example Type__c AT (Status__c). See &lt;a href=&quot;https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select_with_datacategory.htm&quot;&gt;https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select_with_datacategory.htm&lt;/a&gt;">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Language</span>\n                </label>\n                <div>\n                    <select class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.knowledgeOptions.language"\n                            ng-options="value as label for (value,label) in vm.languagesMap">\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.knowledgeOptions.publishStatus"\n                           label="Publish Status"\n                           help-text="Online, Draft, or Archived"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.knowledgeOptions.keyword"\n                           label="Keyword"\n                           help-text="The text to search for.  This can be literal text (for example, Service Disconnect), or use the merge fields to search for variable data (for example, a status code from a Select element in the OmniScript"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.knowledgeOptions.dataCategoryCriteria"\n                           label="Data Category Criteria"\n                           help-text="Returns matching records associated with the specificed Data Categories. For example, Product__c AT mobile_phones__c."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.knowledgeOptions.remoteTimeout" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.knowledgeOptions.typeFilter"\n                           label="Record Type Filter (Lightning Knowledge Only)"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Remote Properties" help-text="Optional Apex class that runs upon exiting the step.">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    </group-prop>\n\n    <group-prop label="Save Options"\n                help-text="If enabled, OmniScript data is written to the {{vm.omniScriptInstanceObjectName}} object, including the Data JSON, Full JSON, attachments.">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.allowSaveForLater"\n                 label="Allow Save For Later"\n                 help-text="Controls whether the save link is shown at runtime in the Step"></checkbox-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <group-prop label="Messaging Framework" \n                help-text="Enable and configure messaging">\n        <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.wpm"\n                               label="Window Post Message?"\n                               help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.ssm"\n                               label="Session Storage Message?"\n                               help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n            </div>\n        </div>\n\n        <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" \n                               ng-model="vm.element.PropertySet__c.pubsub"\n                               label="LWC PubSub Message?"\n                               help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n                </checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Message"\n                        ng-model="vm.element.PropertySet__c.message"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n    </group-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()">\n    </html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }} <i class="icon icon-v-information-line"\n        data-html="true"\n        bs-tooltip="\'Evaluates a condition on the element. Select whether the step is hidden if the condition fails, whether it is read only if the condition fails, or whether the step should not enforce validation if the condition fails.  Use conditions and groups to build the expression.\'"\n        data-container=".container"\n        data-type="info"></i></h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-model="vm.element.PropertySet__c.repeatClone"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           label="Repeat Clone"\n                           help-text="Copies the contents of the block into the repeated block"></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.collapse"\n                label="Collapse"\n                help-text="Collapse the block by default (Lightning player only)"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/selectable-items.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.itemsKey"\n                       label="Items Key"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Select Mode</span>\n            </label>\n            <div>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.selectMode">\n                    <option value="Single">Single</option>\n                    <option value="Multi">Multi</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.dataJSON"\n                           label="Data JSON"></checkbox-prop>\n        </div>\n    </div>\n\n    <group-prop label="Modal Compare Settings">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalHTMLTemplateId"\n                           label="Modal HTML Template Id"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalController"\n                           label="Modal Controller"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalSize"\n                           label="Modal Size"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Max Compare Size</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.maxCompareSize" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Modal Configuration Settings">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalConfigurationSetting.modalHTMLTemplateId"\n                           label="Modal HTML Template Id"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalConfigurationSetting.modalController"\n                           label="Modal Controller"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.modalConfigurationSetting.modalSize"\n                           label="Modal Size"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Remote Properties">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'postTransformBundle\', \'preTransformBundle\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n    </group-prop>\n\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/radio-group.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Options"\n                is-open="true">\n        <div class="row propertyRow"\n             ng-switch="vm.element.PropertySet__c.optionSource.type">\n            <div class="col-md-12"\n                 ng-switch-when="SObject|Custom"\n                 ng-switch-when-separator="|">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'When Option Source is &quot;Custom&quot;, this field holds the name of a method to call on a class in the format class.method.  When it Option Source is SObject, the field holds the name of a field on an object in the format SObject.field.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionSource.source">\n                </div>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-when="image">\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="row">\n                        <div class="col-md-1"></div>\n                        <div class="col-md-4 text-center">\n                            Value\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Language-independent value written to the Data JSON\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            Label\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Displayed on UI\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1 text-center">{{ ::\'OmniDesImage\' | localize}}</div>\n                        <div class="col-md-1 text-center">\n                            Set All\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options"\n                    ng-if="vm.element.PropertySet__c.options.length > 0">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1">\n                            <i class="icon icon-v-grip"></i>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true"\n                             style="min-height:28px">\n                            <button type="button"\n                                    class="btn btn-default add-new des-thumb"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click=\'vm.selectImage(option)\'>\n                                <span ng-if="option.imgId === null || !option.imgId">+ {{::\'OmniAdd\' | localize}}</span>\n                                <img ng-if="option.imgId !== null && option.imgId"\n                                     class="des-thumb image-thumb"\n                                     src="{{option.imgId}}"\n                                     alt="External Reference">\n                            </button>\n                            <button type="button"\n                                    class="btn btn-link btn-clear"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click="option.imgId = null"\n                                    ng-if="option.imgId && option.imgId!=null">\n                                <span>x</span>\n                            </button>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <label style="left:50%;position:relative;">\n                                <input type="checkbox"\n                                       ng-model="option.setAll"\n                                       ng-disabled="vm.scriptElement.isDisabled()" />\n                            </label>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-default>\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="row">\n                        <div class="col-md-1"></div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesName\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameName\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesValue\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameValue\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-2 text-center">\n                            Set All\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1">\n                            <i class="icon icon-v-grip"></i>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-2"\n                             dnd-nodrag="true">\n                            <label style="left:50%;position:relative;">\n                                <input type="checkbox"\n                                       ng-model="option.setAll"\n                                       ng-disabled="vm.scriptElement.isDisabled()" />\n                            </label>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Radio Group Questions"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Radio Labels Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.radioLabelsWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n            <div class="col-md-6">\n            </div>\n        </div>\n\n        <div class="col-md-12">\n            <label>\n                <span>Radio Labels</span>\n            </label>\n            <ul style="min-height: 0px">\n                <li class="row">\n                    <div class="col-md-1"></div>\n                    <div class="col-md-4 text-center">\n                        {{ ::\'OmniDesName\' | localize }}\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'OmniDesTipFieldNameName\' | localize"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </div>\n                    <div class="col-md-4 text-center">\n                        {{ ::\'OmniDesValue\' | localize }}\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'OmniDesTipFieldNameValue\' | localize"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </div>\n                    <div class="col-md-1"></div>\n                    <div class="col-md-2"></div>\n                </li>\n            </ul>\n            <ul dnd-list="vm.element.PropertySet__c.radioLabels">\n                <li class="optionProperty row"\n                    ng-repeat="label in vm.element.PropertySet__c.radioLabels"\n                    dnd-draggable="label"\n                    dnd-disable-if="vm.scriptElement.isDisabled()"\n                    dnd-moved="vm.element.PropertySet__c.radioLabels.splice($index, 1)"\n                    dnd-effect-allowed="move">\n                    <div class="col-md-1">\n                        <i class="icon icon-v-grip"></i>\n                    </div>\n                    <div class="col-md-4"\n                         dnd-nodrag="true">\n                        <input type="text"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               class="form-control"\n                               ng-model="label.name" />\n                    </div>\n                    <div class="col-md-4"\n                         dnd-nodrag="true">\n                        <input type="text"\n                               class="form-control"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="label.value" />\n                    </div>\n                    <div class="col-md-1"\n                         dnd-nodrag="true">\n                        <button type="button"\n                                class="btn btn-link"\n                                ng-if="!vm.scriptElement.isDisabled()"\n                                ng-click="vm.element.PropertySet__c.radioLabels.splice(vm.element.PropertySet__c.radioLabels.indexOf(label), 1)">\n                            <span class="icon icon-v-trash"></span>\n                        </button>\n                    </div>\n                    <div class="col-md-2"\n                         dnd-nodrag="true"></div>\n                </li>\n            </ul>\n            <button type="button"\n                    class="btn btn-default add-new"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewRadioLabel()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/action-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  \x3c!-- LWC Only Alert --\x3e\n  <div class="row propertyRow"\n       ng-show="!vm.scriptElement.IsLwcEnabled__c">\n    <div class="col-md-12">\n      <div class="alert alert-info">\n        <svg width="16"\n             height="16"\n             viewBox="0 0 221 357"\n             fill="none"\n             stroke="#16325c"\n             stroke-linejoin="round"\n             stroke-width="8">\n          <path fill="transparent"\n                d="M51 4L4 177h68L30 353l187-228h-73L198 4z"></path>\n          <path d="M75 43l-24 90 24-90z"></path>\n        </svg>\n        <span>For LWC only. In order to use this component, please go to <b>Script Configuration</b> and enable LWC.</span>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    \x3c!-- Element Name --\x3e\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n\n    \x3c!-- Control Width --\x3e\n    <div class="col-md-6">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  \x3c!-- Field Label --\x3e\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Apply if error --\x3e\n  <div class="row propertyRow"\n       ng-show="vm.scriptElement.IsLwcEnabled__c">\n    <div class="col-md-6">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.applyIfError"\n                     help-text="If checked, applies successful responses even if an error is present in the Action Block. <br><br> If unchecked, any error will prevent all responses from being applied."\n                     label="Apply if error"></checkbox-prop>\n    </div>\n  </div>\n\n  \x3c!-- User Messages --\x3e\n  <group-prop label="User Messages"\n              ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureNextLabel"\n                   label="Failure Next Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                   label="Failure Go Back Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableActionMessage"\n                       ng-show="vm.scriptElement.IsLwcEnabled__c"\n                       label="Enable Action Message"\n                       help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.inProgressMessage"\n                   help-text="Message that is displayed along with the spinner when action is in progress."\n                   label="Action Message"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  \x3c!-- Validation Required --\x3e\n  <div class="row propertyRow" ng-if="vm.element.parent() !== vm.scriptElement">\n    <div class="col-md-6">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step">Step</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Invoke Mode --\x3e\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Invoke Mode</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'{{\'OmniDesTipInvokeModeRemote\' | localize}}\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="invokeMode"\n                id="invokeMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.invokeMode"\n                ng-change="vm.unsetInvokeModeIfNeeded()">\n          <option ng-value="undefined">Default</option>\n          <option value="noBlock">Non-Blocking</option>\n          <option value="fireAndForget">Fire and Forget</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- LWC Component Override --\x3e\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  \x3c!-- Internal Notes --\x3e\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Conditional View --\x3e\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <div class="row">\n      <div class="col-xs-6">\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.conditionType">\n          <option value="Hide if False">Hide element if false</option>\n          <option value="Readonly if False">Set element to readonly if false</option>\n          <option value="Optional if False">Set required element to optional if false</option>\n        </select>\n      </div>\n    </div>\n    <br />\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/group/edit-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <checkbox-prop label="Allow New"\n                           help-text="Enables users to create new records."\n                           ng-disabled="vm.element.IsActive__c"\n                           ng-model="vm.element.PropertySet__c.allowNew"></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <checkbox-prop label="Allow Edit"\n                           help-text="Enables users to edit records."\n                           ng-disabled="vm.element.IsActive__c"\n                           ng-model="vm.element.PropertySet__c.allowEdit"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <checkbox-prop label="Allow Delete"\n                           help-text="Enables users to delete records."\n                           ng-disabled="vm.element.IsActive__c"\n                           ng-model="vm.element.PropertySet__c.allowDelete"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.newLabel"\n                       label="New Label"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.editLabel"\n                       label="Edit Label"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.deleteLabel"\n                       label="Delete Label"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.svgSprite"\n                       help-text="{{:: \'OmniDesEditBlockSvgSpriteTooltip\' | localize}}"\n                       label="Default SVG Sprite"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.svgIcon"\n                       label="Default SVG Icon"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       help-text="{{:: \'OmniDesEditBlockElementNameTooltip\' | localize}}"\n                       ng-model="vm.element.PropertySet__c.elementName"\n                       label="SVG Controlling Element"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       help-text="{{ :: \'OmniDesEditBlockSumElementTooltip\' | localize}}"\n                       ng-model="vm.element.PropertySet__c.sumElement"\n                       label="Sum Element"></text-prop>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Select Mode</span>\n            </label>\n            <div>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.selectMode">\n                    <option value="Single">Single</option>\n                    <option value="Multi">Multi</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       help-text="{{ :: \'OmniDesEditBlockSelectCheckBoxTooltip\' | localize}}"\n                       ng-model="vm.element.PropertySet__c.selectCheckBox"\n                       label="Checkbox Element Name"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Svg Controlling Element Map</span>\n            </label>\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    SVG Icon\n                    <button class="btn btn-default"\n                            type="button"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-click="vm.addValueSvgMap()">\n                        <i class="icon icon-v-plus-line"></i>Add Svg Icon\n                    </button>\n                </div>\n                <table class="table">\n                    <thead>\n                        <th>Value</th>\n                        <th>Svg Sprite</th>\n                        <th>Svg Icon</th>\n                        <th width="60px">&nbsp;</th>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat="map in vm.element.PropertySet__c.valueSvgMap track by $index">\n                            <td>\n                                <input type="text"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="map.value" />\n                            </td>\n                            <td>\n                                <input type="text"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="map.svgSprite" />\n                            </td>\n                            <td>\n                                <input type="text"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="map.svgIcon" />\n                            </td>\n                            <td>\n                                <span class=\'trash-icon icon-v-trash\'\n                                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                                      ng-click="vm.deleteValueSvgMap($index)"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="SObject Mapping">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Select sObject</span>\n                </label>\n                <div>\n                    <select class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.selectSobject"\n                            ng-change="vm.loadFieldsFor(vm.element.PropertySet__c.selectSobject)"\n                            ng-options="object.name as object.name for object in vm.sobjectTypes"></select>\n                    </select>\n                </div>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Sobject Mapping</span>\n                </label>\n                <div class="panel panel-default">\n                    <div class="panel-heading">\n                        sObject Field Mapping\n                        <button class="btn btn-default"\n                                type="button"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-click="vm.addsObjectMap()">\n                            <i class="icon icon-v-plus-line"></i>Add Mapping\n                        </button>\n                    </div>\n                    <table class="table">\n                        <thead>\n                            <th>Edit Block Element</th>\n                            <th>sObject Field</th>\n                            <th width="100px">Duplicate Key</th>\n                            <th width="60px">&nbsp;</th>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="map in vm.element.PropertySet__c.sobjectMapping track by $index" ng-init="vm.element.PropertySet__c.selectSobject ? vm.loadFieldsFor(vm.element.PropertySet__c.selectSobject) : \'\'">\n                                <td>\n                                    <input type="text"\n                                           class="form-control"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           ng-model="map.osElement"\n                                           ng-required="true"\n                                           bs-options="option for option in vm.getTypeAheadEleOptions()"\n                                           bs-typeahead\n                                           data-min-length="0" />\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="map.sObjectField"\n                                            ng-required="true"\n                                            ng-options="object for object in vm.allFieldsForObjects[vm.element.PropertySet__c.selectSobject] track by object"></select>\n                                </td>\n                                <td>\n                                    <input type="checkbox"\n                                           class="form-control"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           ng-model="map.duplicateKey" />\n                                </td>\n                                <td>\n                                    <span class="trash-icon icon-v-trash"\n                                          ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                                          ng-click="vm.deletesObjectMap($index)"></span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-if="vm.scriptElement.IsLwcEnabled__c">\n        <div class="col-md-6">\n            <label>\n                <span>Edit Block Mode</span>\n                <i class="icon icon-v-information-line"\n                    bs-tooltip=" :: \'OmniPlaceholderTooltipText\' | localize "\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.mode">\n                    <option value="Inline">Inline</option>\n                    <option value="Table">Table</option>\n                    <option value="FS">FS</option>\n                    <option value="Cards">Cards</option>\n                    <option value="LongCards">LongCards</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.mode === \'Cards\' || vm.element.PropertySet__c.mode === \'LongCards\'"\n         class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Edit Block Label LWC Component Override</span>\n                <i class="icon icon-v-information-line"\n                    bs-tooltip="\'The name of the custom LWC that overrides omniscriptEditBlockLabel\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input\n                    type="text"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.editBlockLabelLwcOverride"\n                    data-min-length="0"\n                    bs-options="lwc for lwc in vm.lwcList"\n                    watch-options="true"\n                    bs-typeahead />\n            </div>\n        </div>\n    </div>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.mode === \'Cards\'"\n         class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Edit Block New LWC Component Override</span>\n                <i class="icon icon-v-information-line"\n                    bs-tooltip="\'The name of the custom LWC that overrides omniscriptEditBlockNew\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input\n                    type="text"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.editBlockNewLwcOverride"\n                    data-min-length="0"\n                    bs-options="lwc for lwc in vm.lwcList"\n                    watch-options="true"\n                    bs-typeahead />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/filter-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Button Label</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.buttonLabel" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Remote Properties">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'postTransformBundle\', \'preTransformBundle\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n    </group-prop>\n\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/input-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Remote Properties">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'postTransformBundle\', \'preTransformBundle\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n    </group-prop>\n\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/group/type-ahead-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                    data-html="true"\n                    bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div range-slider\n                    min="0"\n                    max="12"\n                    disabled="vm.scriptElement.isDisabled()"\n                    model-max="vm.element.PropertySet__c.controlWidth"\n                    pin-handle="min"\n                    show-values\n                    show-labels\n                    attach-handle-values></div>\n            </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6"\n             ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.inputWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Length</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       data-min-length="0"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.minLength" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Length</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.maxLength" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.typeAheadKey"\n                       label="Typeahead Key"\n                       help-text="The JSON node that is returned and displayed as a selectable option."></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dataProcessorFunction"\n                       label="Data Processor Function"\n                       help-text="Optional JavaScript function to parse the response."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.newItemLabel"\n                       label="New Item Label"\n                       help-text="Display label at bottom of results list, enabling user to add a new item. Leave blank to prevent user from adding a new item."></text-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Call Frequency (ms)</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.callFrequency" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.editMode"\n                           label="Edit Mode"\n                           help-text="Displays all fields under the Type Ahead Block by default, enabling the user to edit the data."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.hideEditButton"\n                           label="Hide Edit Button"\n                           help-text="Prevents users from being able to edit the selected Type Ahead response."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.useDataJson"\n                           label="Use Data JSON"\n                           help-text="Typeahead data exists inside of OmniScript Data JSON"></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dataJsonPath"\n                       label="Data JSON Path"\n                       help-text="Path to Type Ahead data in Data JSON"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.enableLookup"\n                           label="Lookup Mode"\n                           help-text="Typeahead behaves like the Lookup Element. The user can only click on the field to trigger the search."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.disableDataFilter"\n                           label="Disable Data Filter"\n                           help-text="By default, the user input will be filtered against a LIKE match. To return unfiltered results, check Disable Data Filter."></checkbox-prop>\n        </div>\n    </div>\n\n    <group-prop label="Google Maps Autocomplete">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableGoogleMapsAutocomplete"\n                               label="Enable Google Maps Autocomplete"></checkbox-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.hideMap"\n                               label="Hide Map"></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.googleMapsAPIKey"\n                           label="Google Maps API Key"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Country Filter</span>\n                </label>\n                <div>\n                    <select class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.googleAddressCountry"\n                            ng-options="option.value as option.name for option in vm.googleCountryOptions">\n                    </select>\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Google Maps Transformation</span>\n                </label>\n                <div class="panel panel-default">\n                    <table class="table">\n                        <thead>\n                            <th>Input JSON</th>\n                            <th>Output JSON</th>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <label>street</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.street"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label>locality</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.locality"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label>administrative_area_level_1</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.administrative_area_level_1"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label>administrative_area_level_2</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.administrative_area_level_2"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label>postal_code</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.postal_code"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    <label>country</label>\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="vm.element.PropertySet__c.googleTransformation.country"\n                                            ng-options="option for option in vm.getGoogleTransOptions()">\n                                            <option value="" ng-if="false"></option>\n                                    </select>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/group/loop-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n          <div class="col-md-6">\n                <text-prop label="{{:: \'IntProcLoopList\' | localize }}"\n                           help-text=""\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.loopList"></text-prop>\n          </div>\n    </div>\n    \n    <key-value-prop label="{{:: \'IntProcLoopOutput\' | localize }}"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.loopOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/group/cache-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n          <div class="col-md-6">\n            <label>\n                <span>Salesforce Platform Cache Type</span>\n            </label>\n            <select name="cacheType"\n                    id="cacheType"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.cacheType"\n                    ng-options="cacheType as cacheType for cacheType in vm.cacheTypes">\n            </select>\n          </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n                    <label>\n                        <span>Time To Live In Minutes</span>\n                        <i class="icon icon-v-information-line"\n                            data-html="true"\n                            bs-tooltip=":: \'IntProcTimeToLiveInMinutesTooltip\' | localize"\n                            data-container=".container"\n                            data-type="info"></i>\n                    </label>\n                    <div>\n                        <input type="number"\n                               class="form-control"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               min="5"\n                               max="2880"\n                               ng-model="vm.element.PropertySet__c.ttlMinutes"/>\n                    </div>\n        </div>\n    </div>\n\n    <key-value-prop label="Cache Keys (Optional)"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.cacheKeys">\n    </key-value-prop>\n\n    <key-value-prop label="Cache Block Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.cacheBlockOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.refreshCacheConditionalFormula"\n                                label="Refresh Cache Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.ignoreCacheConditionalFormula"\n                                label="Ignore Cache Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.addToCacheConditionalFormula"\n                                label="Add To Cache Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/group/conditional-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.isIfElseBlock"\n                           label="Is If Else Block"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/group/try-catch-block.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n    \n    <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n\n    <group-prop label="Custom Failure Response" is-open="true">\n            <div class="row propertyRow">\n                    <div class="col-md-6">\n                          <text-prop label="Remote Class"\n                                     ng-disabled="vm.scriptElement.isDisabled()"\n                                     ng-model="vm.element.PropertySet__c.remoteClass"\n                                     help-text="The Apex Class has to implement a Vlocity Open Interface"></text-prop>\n                    </div>\n                    <div class="col-md-6">\n                            <text-prop label="Remote Method"\n                                       help-text=""\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="vm.element.PropertySet__c.remoteMethod"></text-prop>\n                      </div>\n              </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.failOnBlockError"\n                               label="Fail On Block Error"></checkbox-prop>\n            </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/integration-procedure.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Integration Procedure name</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The name of the Integration Procedure is shown (with Description) in the list view on the Integration Procedure Designer home page.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input id="OmniScript__c_Name"\n               type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.Name" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Type and SubType define the unique identity of the Integration Procedure: there can be only one Integration Procedure with the same Type and SubType active at any time. Special characters are not allowed. Use the Type value &quot;VlocityExternalObject&quot; to handle external objects with this IP.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input id="OmniScript__c_Type__c"\n               type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.Type__c"\n               ng-change="vm.handleTypeChange()"\n               data-min-length="0"\n               bs-options="type.label as type.value for type in vm.types"\n               bs-typeahead />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>SubType</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Type and SubType define the unique identity of the Integration Procedure: there can be only one\n                Integration Procedure with the same Type and SubType active at any time. Special characters are not allowed. Use the\n                Type value &quot;VlocityExternalObject&quot; to handle external objects with this IP.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input id="OmniScript__c_SubType__c"\n               type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()||vm.element.Type__c==null||vm.element.Type__c==\'\'"\n               ng-model="vm.element.SubType__c"\n               data-min-length="0"\n               bs-options="subtype.label as subtype.value for subtype in vm.subtypes"\n               bs-typeahead\n               data-watch-options="true" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Description</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.AdditionalInformation__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-if="vm.element.Type__c === \'VlocityExternalObject\'">\n    <div class="col-md-6 checkbox">\n      <label>\n        <a ng-click="vm.openExternalObjects($event)">View External Objects Page</a>\n      </label>\n    </div>\n  </div>\n\n  <group-prop label="Table Property"\n              ng-if="vm.element.Type__c === \'VlocityExternalObject\'"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.nameColumn"\n                   label="Column Name"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.description"\n                   label="Description"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.labelSingular"\n                   label="Singular Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.labelPlural"\n                   label="Plural Label"></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <div class="row propertyRow"\n       ng-if="vm.element.Type__c === \'VlocityExternalObject\'">\n    <div class="col-md-12">\n      <label>\n        <span>Columns Property Map</span>\n      </label>\n      <div class="panel panel-default">\n        <div class="panel-heading">\n          Columns Property\n          <button class="btn btn-default"\n                  type="button"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-click="vm.addColumnsPropertyMap()">\n            <i class="icon icon-v-plus-line"></i>Add Column Property\n          </button>\n        </div>\n        <table class="table">\n          <thead>\n            <th>Name<span class="required">*</span></th>\n            <th>Label</th>\n            <th>Description</th>\n            <th>Type<span class="required">*</span></th>\n            <th>Length<span class="required">*</span></th>\n            <th>Decimal Places</th>\n            <th width="60px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr ng-repeat="map in vm.element.PropertySet__c.columnsPropertyMap track by $index">\n              <td>\n                <input type="text"\n                       class="form-control"\n                       required\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.name" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.label" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.description" />\n              </td>\n              <td>\n                <select class="form-control"\n                        required\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-options="option for option in vm.columnPropertyTypes"\n                        ng-model="map.type">\n                </select>\n              </td>\n              <td>\n                <input type="number"\n                       class="form-control"\n                       min="1"\n                       max="131072"\n                       step="1"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-if="map.type == \'Long text area\'"\n                       ng-model="map.length" />\n                <input type="number"\n                       class="form-control"\n                       min="1"\n                       max="255"\n                       step="1"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-if="map.type == \'Text\'"\n                       ng-model="map.length" />\n                <input type="number"\n                       class="form-control"\n                       min="1"\n                       max="18"\n                       step="1"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-if="map.type == \'Number\'"\n                       ng-model="map.length" />\n              </td>\n              <td>\n                <input type="number"\n                       class="form-control"\n                       ng-if="map.type === \'Number\'"\n                       ng-disabled="map.type != \'Number\' || vm.scriptElement.isDisabled()"\n                       ng-model="map.decimalPlaces" />\n              </td>\n              <td>\n                <span class="trash-icon icon-v-trash"\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteColumnsPropertyMap($index)"></span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-if="vm.element.Type__c === \'VlocityExternalObject\'">\n    <div class="col-md-12">\n      <label>\n        <span>Relationship Fields Map</span>\n      </label>\n      <div class="panel panel-default">\n        <div class="panel-heading">\n          Relationship Fields\n          <button class="btn btn-default"\n                  type="button"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-click="vm.addRelationshipFieldsMap()">\n            <i class="icon icon-v-plus-line"></i>Add Field\n          </button>\n        </div>\n        <table class="table">\n          <thead>\n            <th>Name<span class="required">*</span></th>\n            <th>Label</th>\n            <th>Description</th>\n            <th>Length<span class="required">*</span></th>\n            <th>Type<span class="required">*</span></th>\n            <th>Reference To<span class="required">*</span></th>\n            <th>Reference Target Field</th>\n            <th width="60px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr ng-repeat="map in vm.element.PropertySet__c.relationshipFieldsMap track by $index">\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.name"\n                       ng-required="true" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.label" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.description" />\n              </td>\n              <td>\n                <input type="number"\n                       class="form-control"\n                       min="1"\n                       max="255"\n                       step="1"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.length" />\n              </td>\n              <td>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-options="option for option in vm.relationshipTypes"\n                        ng-required="true"\n                        ng-model="map.type">\n                  <option value=""\n                          ng-if="true"></option>\n                </select>\n              </td>\n              <td>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="map.type == \'Lookup relationship\'"\n                        ng-options="object.name as object.name for object in vm.sobjectTypes"\n                        ng-required="true"\n                        ng-model="map.referenceTo">\n                  <option value=""\n                          ng-if="true"></option>\n                </select>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="map.type == \'External lookup relationship\'"\n                        ng-options="object.name as object.name for object in vm.externalObjectTypes | orderBy:\'\'"\n                        ng-required="true"\n                        ng-model="map.referenceTo">\n                  <option value=""\n                          ng-if="true"></option>\n                </select>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="map.type == \'Indirect lookup relationship\'"\n                        ng-options="object.name as object.name for object in vm.sobjectTypes"\n                        ng-required="true"\n                        ng-model="map.referenceTo">\n                  <option value=""\n                          ng-if="true"></option>\n                </select>\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-if="map.type == \'Indirect lookup relationship\' && map.referenceTo != \'\'"\n                       ng-required="true"\n                       ng-model="map.referenceTargetField" />\n              </td>\n              <td>\n                <span class=\'trash-icon icon-v-trash\'\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteRelationshipFieldsMap($index)">\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <key-value-prop label="Tracking Custom Data"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-model="vm.element.PropertySet__c.trackingCustomData">\n  </key-value-prop>\n\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop label="Include All Actions In Response"\n                     ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.includeAllActionsInResponse"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop label="Rollback On Error"\n                     ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.rollbackOnError"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Required Permission (Optional)</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The name of the Custom Permission.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input id="OmniScript__c_RequiredPermission"\n               type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.RequiredPermission__c" />\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Chainable Configuration"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Heap Size Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableHeapSizeLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableHeapSizeLimit" />\n        </div>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Queries Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableQueriesLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableQueriesLimit" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Query Rows Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableQueryRowsLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableQueryRowsLimit" />\n        </div>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Chainable DML Statements Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableDMLStatementsLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableDMLStatementsLimit" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Chainable DML Rows Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableDMLRowsLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableDMLRowsLimit" />\n        </div>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Cpu Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableCpuLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableCpuLimit" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Sosl Queries Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableSoslQueriesLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableSoslQueriesLimit" />\n        </div>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Chainable Actual Time Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcChainableActualTimeLimit\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.chainableActualTimeLimit" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-12">\n        <key-value-prop label="Additional Chainable Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n        </key-value-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Cache Configuration"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n          <checkbox-prop label="Disable Definition Cache"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.DisableMetadataCache__c"></checkbox-prop>\n        </div>\n      </div>\n      <div class="row propertyRow">\n        <div class="col-md-6">\n          <label>\n            <span>Salesforce Platform Cache Type</span>\n          </label>\n          <select name="cacheType"\n                  id="cacheType"\n                  class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-model="vm.element.ProcedureResponseCacheType__c"\n                  ng-options="option for option in vm.cacheTypes">\n          </select>\n        </div>\n        <div class="col-md-6">\n          <label>\n            <span>Time To Live In Minutes</span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip=":: \'IntProcTimeToLiveInMinutesTooltip\' | localize"\n               data-container=".container"\n               data-type="info"></i>\n          </label>\n          <div>\n            <input type="number"\n                   min="5"\n                   max="2880"\n                   class="form-control"\n                   ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.ttlMinutes" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Queueable Chainable Limits"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Queueable Chainable Heap Size Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcQueueableChainableHeapSizeLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.queueableChainableHeapSizeLimit" />\n        </div>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Queueable Chainable Queries Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcQueueableChainableQueriesLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.queueableChainableQueriesLimit" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Queueable Chainable Cpu Limit</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip=":: \'IntProcQueueableChainableCpuLimitTooltip\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n        <div>\n          <input type="number"\n                 min="1"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.queueableChainableCpuLimit" />\n        </div>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Test Configuration"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n          <checkbox-prop label="Is Test Procedure"\n                         ng-change="vm.validateIsTestChange()"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.IsTest__c"></checkbox-prop>\n        </div>\n      </div>\n    </div>\n    <key-value-prop label="Mock Responses Map"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.mockResponseMap">\n    </key-value-prop>\n  </group-prop>\n</form>\n'),$templateCache.put("propertysets/ips/action/omni-form.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-4">\n      <label>\n        <span>Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniForm\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.Type"\n                ng-options="type.label as type.value for type in vm.types"></select>\n      </div>\n    </div>\n    <div class="col-md-4">\n      <label>\n        <span>Sub Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniForm\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()||vm.element.PropertySet__c.Type==null||vm.element.PropertySet__c.Type==\'\'"\n                ng-model="vm.element.PropertySet__c[\'Sub Type\']"\n                ng-options="type.label as type.value for type in vm.subtypes"></select>\n      </div>\n    </div>\n    <div class="col-md-4">\n      <label>\n        <span>Language</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniForm\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div class=\'inline-control\'\n           ng-class="{divDisabled: vm.ngDisabled}">\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()||vm.element.PropertySet__c[\'Sub Type\']==null||vm.element.PropertySet__c[\'Sub Type\']==\'\'"\n                ng-model="vm.element.PropertySet__c.Language"\n                ng-options="type.value as type.label for type in vm.languages"></select>\n        <button id="openOmniFormBtn"\n                class="btn btn-link pull-right"\n                ng-click="vm.openOmniForm($event)"\n                ng-disabled="vm.ngDisabled ||vm.id==null||vm.id==\'\'">\n          <i class="icon icon-v-link"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <key-value-prop label="Remote Options"\n                  ng-model="vm.element.PropertySet__c.remoteOptions"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  key-label="Key"\n                  value-label="Value"\n                  add-btn-label="Add New Key/Value Pair"\n                  id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n  <group-prop label="Send/Response Transformations"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONPath"\n                   label="Send JSON Path"\n                   help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONNode"\n                   label="Send JSON Node"\n                   help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Additional Input/Output/Failure Response"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                       label="Send Only Additional Input"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Input"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalInput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                       label="Return Only Additional Output"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Output"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                       label="Return Only Failure Response"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Failure Response"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                          label="Execution Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.failOnStepError"\n                     label="Fail On Step Error"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                          label="Failure Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.chainOnStep"\n                     label="Chain On Step"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.chainOnStep">\n    <div class="col-md-12">\n      <key-value-prop label="Additional Chainable Response"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      render-expression-cell="true"\n                      ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n      </key-value-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.actionMessage"\n                 label="Action Message"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/ips/action/assert-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.assertConditionalFormula"\n                                label="Assert Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.assertFailureMessage"\n                       label="Assert Failure Message"></text-prop>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           help-text="{{:: \'IntProcAssertAction\' | localize }}"\n                           label="Fail Test On Assert"></checkbox-prop>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/set-values.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Element Value Map</span>\n            </label>\n            <div class="row set-error-value">\n                <div class="col-md-4">\n                    <label>Element Name</label>\n                </div>\n                <div class="col-md-3 type-col">\n                    <label>Type</label>\n                </div>\n                <div class="col-md-4">\n                    <label>Value</label>\n                </div>\n                <div class="col-md-1">\n                    <label>&nbsp;</label>\n                </div>\n            </div>\n            <div class="row set-error-value"\n                 ng-repeat="property in vm.elementValueMap track by $index">\n                <div class="col-md-4">\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="property.key"\n                           ng-change="vm.updateKeyValueProperty()"\n                           bs-options="name for name in vm.elementNames()"\n                           bs-typeahead\n                           data-min-length="0" />\n                </div>\n                <div class="col-md-3 type-col">\n                    <span>{{ property.key | getTypeForElement }}</span>\n                </div>\n                <div class="col-md-4 faux-field"\n                     ng-class="{divDisabled: (property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()}">\n                    <button type="button"\n                            class="btn btn-default faux-field"\n                            ng-disabled="(property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editAsExpression(property, false)"><i>fx</i></button>\n                    <input type="text"\n                           class="form-control faux-field"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="property.value"\n                           ng-if="property.type !== \'object\' && property.type !== \'array\'"\n                           data-min-length="0" />\n                    <input type="text"\n                           class="form-control faux-field"\n                           value="{{property.type == \'object\' ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                           ng-if="property.type == \'object\' || property.type == \'array\'"\n                           disabled="disabled"\n                           readonly="readonly" />\n                </div>\n                <div class="col-md-1">\n                    <button type="button"\n                            class="btn btn-link trash"\n                            ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.deleteKeyValue(property)"\n                            title="Delete entire element, type and value">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </div>\n            <button type="button"\n                    class="btn btn-default"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewKeyValue()">{{ ::\'OmniDesSetErrorValuePair\' | localize:\'+ Add New\n                Value\' }}</button>\n        </div>\n    </div>\n    <group-prop label="Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/matrix-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    Matrix Input Parameters\n                    <i class="icon icon-v-information-line"\n                       bs-tooltip=" :: \'OmniDesTipInputParam\' | localize "\n                       data-container=".container"\n                       data-type="info"></i>\n                    <button class="btn btn-default"\n                            type="button"\n                            ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.addNewInputParameter(vm.element.PropertySet__c[\'matrix Input Parameters\'])">\n                        <i class="icon icon-v-plus-line"></i>\n                        {{ ::\'OmniDesAddInputParam\' | localize }}\n                    </button>\n                </div>\n                <table class="table">\n                    <thead>\n                        <th>{{ ::\'OmniDesDataSource\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip=" :: \'OmniDesTipDataSource\' | localize "\n                               data-container=".container"\n                               data-type="info"></i>\n                        </th>\n                        <th>{{ ::\'OmniDesFilterValue\' | localize }}</th>\n                        <th width="50px">&nbsp;</th>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat="inputParam in vm.element.PropertySet__c[\'matrix Input Parameters\'] track by $index">\n                            <td>\n                                <input type="text"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       class="form-control input-sm"\n                                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                       ng-model="inputParam.name"\n                                       bs-options="name for name in vm.elementNames()"\n                                       bs-typeahead\n                                       data-min-length="0" />\n                            </td>\n                            <td>\n                                <input type="text"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       class="form-control input-sm"\n                                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                       ng-model="inputParam.value" />\n                            </td>\n                            <td>\n                                <button type="button"\n                                        class="btn btn-link"\n                                        ng-if="!vm.scriptElement.isDisabled()"\n                                        ng-click="vm.deleteInputParameter(inputParam, vm.element.PropertySet__c[\'matrix Input Parameters\'])">\n                                    <i class="icon icon-v-trash"></i>\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <div class="row">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop  ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-show="vm.showUseDecisionMatrixCheckbox"\n                            ng-model="vm.element.PropertySet__c.useDecisionMatrix"\n                            label="Use Decision Matrix"\n                            ng-change="vm.useDecisionMatrix($event)"></checkbox-prop>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-xs-10" ng-if="!vm.isFoundation">\n            <label>\n                <span>Matrix Name</span>\n            </label>\n            <div>\n                <select name="matrixName"\n                        id="matrixName"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.remoteOptions.matrixName"\n                        ng-options="matrix as matrix for matrix in vm.matrixNames">\n                </select>\n            </div>\n        </div>\n        <div class="col-md-12" ng-if="vm.isFoundation">\n            <label><span>Matrix Name</span></label>\n            <div class="row">\n                <div class="col-xs-10">\n                    <select name="matrixName" id="matrixName" class="form-control" ng-disabled="vm.scriptElement.IsActive__c"\n                        ng-model="vm.element.PropertySet__c.remoteOptions.matrixName" ng-change="vm.matrixNameChange($event)"\n                        ng-options="matrix as matrix for matrix in vm.matrixNames">\n                    </select>\n                    <span class="help-block" ng-if="!vm.matrixId && !vm.loading">No decision matrix action found with this\n                        name.</span>\n                </div>\n                <div ng-if="vm.isFoundation && !vm.loading">\n                    <button class="btn btn-link" ng-disabled="!vm.matrixId" ng-click="vm.openMatrix($event)">\n                        <i class="icon icon-v-link"></i>\n                    </button>\n                </div>\n                <div ng-if="vm.loading">\n                    <button class="btn btn-link">\n                        <i class="small spinner"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <key-value-prop label="Remote Options"\n                    ng-model="vm.element.PropertySet__c.remoteOptions"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    ignore-keys="[\'matrixName\']"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    <key-value-prop label="Default Matrix Result"\n                    ng-model="vm.element.PropertySet__c.defaultMatrixResult"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_defaultMatrixResult\'}}"></key-value-prop>\n\n    <group-prop label="Send/Response Transformations"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Output/Failure Response"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/response-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop label="Response Format"\n                       ng-model="vm.element.PropertySet__c.responseFormat"\n                       ng-disabled="vm.scriptElement.isDisabled()"></text-prop>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnFullDataJSON"\n                               label="Return Full Data JSON"></checkbox-prop>\n            </div>\n        </div>\n    </div>\n\n    <key-value-prop label="Response Headers"\n                    ng-model="vm.element.PropertySet__c.vlcResponseHeaders"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_vlcResponseHeaders\'}}"></key-value-prop>\n\n    <group-prop label="Send/Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Output Response">\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/intelligence-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop label="Machine Developer Name"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.machineDeveloperName"></text-prop>\n        </div>\n    </div>\n\n    <key-value-prop label="Input Data"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.inputData"></key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop label="Items To Rank Path"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.itemsToRankPath"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="Send/Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response" is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/remote-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop label="Remote Class"\n                       ng-model="vm.element.PropertySet__c.remoteClass"\n                       ng-disabled="vm.scriptElement.isDisabled()"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop label="Remote Method"\n                       ng-model="vm.element.PropertySet__c.remoteMethod"\n                       ng-disabled="vm.scriptElement.isDisabled()"></text-prop>\n        </div>\n    </div>\n\n    <key-value-prop label="Remote Options"\n                    ng-model="vm.element.PropertySet__c.remoteOptions"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    <group-prop label="Send/Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/rest-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restPath"\n                       label="HTTP Path"\n                       help-text="The request URL of the API. This can contain merge fields. Example: www.456demo.com/names/%mergeField%"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restMethod"\n                       label="HTTP Method"\n                       help-text="The HTTP method that will be sent with the request. The methods that can be sent are: GET, POST, PUT, and DELETE"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.namedCredential"\n                       label="Named Credential"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="Rest Options">\n        <key-value-prop label="Headers"\n                        ng-model="vm.element.PropertySet__c.restOptions.headers"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Header"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_restOptions_headers\'}}"></key-value-prop>\n        <key-value-prop label="Params"\n                        ng-model="vm.element.PropertySet__c.restOptions.params"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Param"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_restOptions_params\'}}"></key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.sendBody"\n                               label="Send Body"></checkbox-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.restOptions.timeout" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.isCompressed"\n                               label="Is Compressed?"></checkbox-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.restOptions.clientCertificateName"\n                           label="Client Certificate Name"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.xmlEscapeResponse"\n                               label="Escape XML Response?"></checkbox-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Retry Count</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.retryCount" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response" is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <group-prop label="Debug Logging">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.preActionLogging"\n                           label="Pre-action Logging"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postActionLogging"\n                           label="Post-action Logging"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/batch-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Select Scheduled Job</span>\n            </label>\n            <div>\n                <select name="scheduledJobs"\n                        id="scheduledJobs"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.scheduledJobId"\n                        ng-options="option[vm.nsPrefix + \'GlobalKey__c\'] as option.Name for option in vm.scheduledJobs">\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n              <text-prop label="{{:: \'IntProcListInput\' | localize }}"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.PropertySet__c.listInput"></text-prop>\n        </div>\n    </div>\n\n    <key-value-prop label="Batch Options"\n                    ng-model="vm.element.PropertySet__c.batchOptions"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_batchOptions\'}}"></key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.chainable"\n                            label="Is Batch Chainable?"></checkbox-prop>\n        </div>\n    </div>\n\n    <group-prop label="Send/Response Transformations" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/calculation-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <group-prop label="Remote Properties"\n                is-open="true">\n        <div class="row">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop  ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-show="vm.showUseExpressionSetCheckbox"\n                                ng-model="vm.element.PropertySet__c.useExpressionSet"\n                                label="Use Expression Set"\n                                ng-change="vm.useExpressionSet($event)"></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-if="!vm.isFoundation">\n            <div class="col-md-6" >\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-if="!vm.isFoundation">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteOptions.configurationName"\n                           label="Configuration Name"\n                           help-text="Calculation Procedure Name"></text-prop>\n            </div>\n            <div class="col-xs-10" ng-if="vm.isFoundation">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.remoteOptions.configurationName"\n                    label="Configuration Name"\n                    ng-change="vm.calcNameChange($event)"\n                    help-text="Expression Set Name"></text-prop>\n                <span class="help-block" ng-if="!vm.calcId && !vm.loading">No expression set found with this name.</span>\n            </div>\n            <div style="margin-top: 24px;" ng-if="vm.isFoundation">\n                <button class="btn btn-link"\n                        ng-if="!vm.loading"\n                        ng-disabled="!vm.calcId"\n                        ng-click="vm.openCalc($event)">\n                    <i class="icon icon-v-link"></i>\n                </button>\n                <button ng-if="vm.loading"\n                        class="btn btn-link">\n                    <i class="small spinner"></i>\n                </button>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'configurationName\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/dataraptor-extract-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>DataRaptor Interface</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                         class="row"\n                         script-element="vm.scriptElement"\n                         ng-model="vm.element.PropertySet__c.bundle"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         type="Extract"\n                         include-input-json="true"\n                         input-type="JSON"\n                         output-type="JSON"\n                         ng-if="vm.element.Type__c.label==\'DataRaptor Extract Action\'">\n      </dataraptor-select>\n      <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                         class="row"\n                         script-element="vm.scriptElement"\n                         ng-model="vm.element.PropertySet__c.bundle"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         type="Turbo Extract"\n                         include-input-json="true"\n                         input-type="JSON"\n                         output-type="JSON"\n                         ng-if="vm.element.Type__c.label==\'DataRaptor Turbo Action\'">\n      </dataraptor-select>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.ignoreCache"\n                     label="Ignore Cache"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="panel panel-default">\n        <div class="panel-heading">\n          {{ ::\'OmniDesInputParam\' | localize }}\n          <i class="icon icon-v-information-line"\n             bs-tooltip=":: \'OmniDesTipInputParam\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n          <button class="btn btn-default"\n                  type="button"\n                  ng-if="!vm.scriptElement.isDisabled()"\n                  ng-click="vm.addNewInputParameter(vm.element.PropertySet__c[\'dataRaptor Input Parameters\'])">\n            <i class="icon icon-v-plus-line"></i>\n            {{ ::\'OmniDesAddInputParam\' | localize }}\n          </button>\n        </div>\n        <table class="table">\n          <thead>\n            <th>{{ ::\'OmniDesDataSource\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip=" :: \'OmniDesTipDataSource\' | localize "\n                 data-container=".container"\n                 data-type="info"></i>\n            </th>\n            <th>{{ ::\'OmniDesFilterValue\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip="\'Node that will be passed to DataRaptor to extract data.\'"\n                 data-container=".container"\n                 data-type="info"></i>\n            </th>\n            <th width="50px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr ng-repeat="inputParam in vm.element.PropertySet__c[\'dataRaptor Input Parameters\'] track by $index">\n              <td>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control input-sm"\n                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                       ng-model="inputParam.element"\n                       bs-options="name for name in vm.elementNames()"\n                       bs-typeahead\n                       data-min-length="0" />\n              </td>\n              <td>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control input-sm"\n                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                       ng-model="inputParam.inputParam" />\n              </td>\n              <td>\n                <button type="button"\n                        class="btn btn-link"\n                        ng-if="!vm.scriptElement.isDisabled()"\n                        ng-click="vm.deleteInputParameter(inputParam, vm.element.PropertySet__c[\'dataRaptor Input Parameters\'])">\n                  <i class="icon icon-v-trash"></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Send/Response Transformations"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONPath"\n                   label="Send JSON Path"\n                   help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONNode"\n                   label="Send JSON Node"\n                   help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Additional Input/Output/Failure Response"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                       label="Send Only Additional Input"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Input"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalInput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                       label="Return Only Additional Output"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Output"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                       label="Return Only Failure Response"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Failure Response"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                          label="Execution Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.failOnStepError"\n                     label="Fail On Step Error"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                          label="Failure Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.chainOnStep"\n                     label="Chain On Step"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.chainOnStep">\n    <div class="col-md-12">\n      <key-value-prop label="Additional Chainable Response"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      render-expression-cell="true"\n                      ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n      </key-value-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.actionMessage"\n                 label="Action Message"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/ips/action/chatter-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.communityId"\n                 label="Community Id"></text-prop>\n    </div>\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.subjectId"\n                 label="Subject Id"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.mentionedUserId"\n                 label="Mentioned User Id"></text-prop>\n    </div>\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.imageId"\n                 label="Image Id"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Markup Type</span>\n      </label>\n      <div>\n        <select name="markupTypes"\n                id="markupTypes"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.markupType"\n                ng-options="option for option in vm.markupTypes">\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.fileId"\n                 label="File Id"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Text</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.PropertySet__c.text"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Response Transformations"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Output/Failure Response"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                       label="Return Only Additional Output"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Output"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                       label="Return Only Failure Response"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Failure Response"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                          label="Execution Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.failOnStepError"\n                     label="Fail On Step Error"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                          label="Failure Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.chainOnStep"\n                     label="Chain On Step"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.chainOnStep">\n    <div class="col-md-12">\n      <key-value-prop label="Additional Chainable Response"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      render-expression-cell="true"\n                      ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n      </key-value-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.actionMessage"\n                 label="Action Message">\n      </text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/ips/action/integration-procedure-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Integration Procedure</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The Type and SubType of an Integration Procedure.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div class="row">\n        <div class="col-xs-10">\n          <select class="form-control"\n                  ng-model="vm.element.PropertySet__c.integrationProcedureKey"\n                  ng-disabled="vm.scriptElement.isDisabled()">\n            <option label=""\n                    value=""></option>\n            <option ng-repeat="name in vm.integrationProceduresArray track by $index"\n                    ng-value="name"\n                    ng-bind="name"></option>\n            <option ng-value="vm.element.PropertySet__c.integrationProcedureKey"\n                    ng-bind="vm.element.PropertySet__c.integrationProcedureKey"\n                    ng-if="vm.element.PropertySet__c.integrationProcedureKey&&!vm.integrationProceduresArray.includes(vm.element.PropertySet__c.integrationProcedureKey)"></option>\n          </select>\n        </div>\n        <div >\n          <button ng-attr-id="{{vm.idPrefix + \'_openBtn\'}}"\n                  class="btn btn-link"\n                  ng-click="vm.openIntegrationProcedure($event)">\n            <i class="icon icon-v-link"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <key-value-prop label="Remote Options"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-model="vm.element.PropertySet__c.remoteOptions"></key-value-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.disableChainable"\n                     label="Disable Chainable"></checkbox-prop>\n    </div>\n  </div>\n\n  <group-prop label="Send/Response Transformations"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONPath"\n                   label="Send JSON Path"\n                   help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONNode"\n                   label="Send JSON Node"\n                   help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Additional Input/Output/Failure Response"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                       label="Send Only Additional Input"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Input"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalInput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                       label="Return Only Additional Output"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Output"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                       label="Return Only Failure Response"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Failure Response"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                          label="Execution Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.failOnStepError"\n                     label="Fail On Step Error"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                          label="Failure Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.chainOnStep"\n                     label="Chain On Step"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.chainOnStep">\n    <div class="col-md-12">\n      <key-value-prop label="Additional Chainable Response"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      render-expression-cell="true"\n                      ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n      </key-value-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.actionMessage"\n                 label="Action Message"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/dataraptor-post-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>DataRaptor Interface</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.element.PropertySet__c.bundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Load"\n                               output-type="SObject"\n                               include-input-json="true"\n                               input-type="JSON"></dataraptor-select>\n        </div>\n    </div>\n\n    <group-prop label="Send/Response Transformations"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/email-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.useTemplate"\n                           label="Use Template"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-6">\n            <label>\n                <span>Select Email Template</span>\n            </label>\n            <div>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control"\n                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.emailTemplateName"\n                       bs-options="option.DeveloperName as option.DeveloperName for option in vm.emailTemplates"\n                       bs-typeahead\n                       data-min-length="0" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.emailTargetObjectId"\n                       label="Email Target Object Id"\n                       help-text="The email recipient\'s ID. The recipient must be a user, contact, or lead."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.whatId"\n                       label="What Id"\n                       help-text="When a contact is designated as the email recipient, an additional object ID can be passed to the emailn template. The objects that can be included are: Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product, Solution, and Custom."></text-prop>\n        </div>\n        <div class="col-md-6">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.emailTemplateInformation.saveAsActivity"\n                           label="Save As Activity"\n                           help-text="Records email as a Salesforce Activity on the Email Target Object Id record."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="To Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.toAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="CC Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.ccAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="BCC Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.bccAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailInformation.emailSubject"\n                       label="Email Subject"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Email Body</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.PropertySet__c.emailInformation.emailBody"></textarea>\n            </div>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.emailInformation.setHtmlBody"\n                           label="Set HTML Body"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.OrgWideEmailAddress"\n                       label="Org Wide Email Address"\n                       help-text="Specify a valid Org Wide Email address, otherwise the From will default to the User email address."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.contentVersionList"\n                       label="Content Versions"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Select Document Attachments</span>\n            </label>\n            <div>\n                <select name="staticDocList"\n                        id="staticDocList"\n                        class="form-control"\n                        style="height: 100px; overflow-y: scroll;"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.staticDocList"\n                        multiple="multiple"\n                        ng-options="option.DeveloperName as option.DeveloperName for option in vm.emailDocuments">\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.attachmentList"\n                       label="Attachment List"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/delete-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Delete SObject</span>\n      </label>\n      <div class="panel panel-default vlc-docusign-list">\n        <div class="panel-heading"\n             style="overflow: auto;">\n          <button class="btn btn-default"\n                  type="button"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-click="vm.addDeleteSObjectMap()"\n                  style="float: right;">\n            <i class="icon icon-v-plus-line"></i>{{::"IntProcAddSObj" | localize }}\n          </button>\n        </div>\n        <table class="table">\n          <div class="panel panel-default vlc-docusign-list"\n               style="margin-bottom:0px;">\n            <thead class="vlc-docusign-list-head">\n              <th width="60px">{{::"IntProcAllOrNone" | localize }}\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'IntProcAllOrNoneTooltip\' | localize "\n                   data-container=".container"\n                   data-type="info">\n                </i>\n              </th>\n              <th>{{::"IntProcDelType" | localize }}\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'The type of object that will be deleted.\'"\n                   data-container=".container"\n                   data-type="info">\n              </th>\n              <th>{{::"IntProcDelId" | localize }}</th>\n              <th width="30px">&nbsp;</th>\n            </thead>\n          </div>\n          <tbody class="vlc-docusign-tbody-omni">\n            <tr ng-repeat="map in vm.element.PropertySet__c.deleteSObject">\n              <td>\n                <input type="checkbox"\n                       class="form-element vlc-slds-checkbox"\n                       ng-model="map.AllOrNone"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       style="width: 50px" />\n              </td>\n              <td>\n                <select class="form-control"\n                        id="selectsObject_ctrl"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="map.Type"\n                        ng-options="object.name as object.name for object in vm.sobjectTypes"></select>\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.Id">\n              </td>\n              <td class="vlc-delete-cell">\n                <span class="trash-icon icon-v-trash"\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteDeleteSObjectMap($index)"></span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Response Transformations"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Additional Output/Failure Response"\n              is-open="true">\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                       label="Return Only Additional Output"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Additional Output"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.additionalOutput">\n    </key-value-prop>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                       label="Return Only Failure Response"></checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Failure Response"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    render-expression-cell="true"\n                    ng-model="vm.element.PropertySet__c.failureResponse">\n    </key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                          label="Execution Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.failOnStepError"\n                     label="Fail On Step Error"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                          label="Failure Conditional Formula">\n      </monaco-editor-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.chainOnStep"\n                     label="Chain On Step"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.chainOnStep">\n    <div class="col-md-12">\n      <key-value-prop label="Additional Chainable Response"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      render-expression-cell="true"\n                      ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n      </key-value-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.actionMessage"\n                 label="Action Message"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/ips/action/dataraptor-transform-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>DataRaptor Interface</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.element.PropertySet__c.bundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Transform"\n                               include-input-json="true"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n          <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.PropertySet__c.ignoreCache"\n                         label="Ignore Cache"></checkbox-prop>\n        </div>\n      </div>\n\n    <group-prop label="Send/Response Transformations"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/list-merge-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n\n    <group-prop label="List Merge"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <array-list-prop label="Merge Lists Order"\n                                 ng-disabled="vm.scriptElement.isDisabled()"\n                                 ng-model="vm.element.PropertySet__c.mergeListsOrder"></array-list-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.advancedMerge"\n                               label="Advanced Merge"\n                               help-text="{{:: \'IntProcAdvancedMergeTooltip\' | localize }}"></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="!vm.element.PropertySet__c.advancedMerge">\n            <div class="col-md-12">\n                <array-list-prop label="Merge Fields"\n                                 ng-disabled="vm.scriptElement.isDisabled()"\n                                 ng-model="vm.element.PropertySet__c.mergeFields"></array-list-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.advancedMerge">\n            <div class="col-md-12">\n                <label>\n                    <span>Advanced Merge Map</span>\n                </label>\n                <div class="panel panel-default vlc-docusign-list">\n                    <div class="panel-heading">{{::\'IntProcMergeMap\' | localize }}\n                        <i class="icon icon-v-information-line"\n                            data-type="info"\n                            data-html="true"\n                            bs-tooltip=":: \'IntProcMergeMapTooltip\' | localize"\n                            data-container=".container"></i>\n                        <button class="btn btn-default"\n                                type="button"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-click="vm.addAdvancedMergeMap()">\n                            <i class="icon icon-v-plus-line"></i>{{:: \'IntProcAddMergeMap\' | localize }}\n                        </button>\n                    </div>\n                    <table class="table slds-table-stripped">\n                        <div class="panel panel-default vlc-docusign-list"\n                             style="margin-bottom:0px;">\n                            <thead class="vlc-docusign-list-head">\n                                <th>{{:: \'IntProcListKey\' | localize }}\n                                    <span class="required">*</span>\n                                    <i class="icon icon-v-information-line"\n                                       data-type="info"\n                                       bs-tooltip=":: \'IntProcListKeyTooltip\' | localize"\n                                       data-container=".container"></i></th>\n                                <th>{{:: \'IntProcMatchingPath\' | localize }}\n                                    <span class="required">*</span>\n                                    <i class="icon icon-v-information-line"\n                                       data-type="info"\n                                       bs-tooltip=":: \'IntProcMatchingPathTooltip\' | localize"\n                                       data-container=".container"></i></th>\n                                <th style="width: 15%">{{:: \'IntProcMatchingGroup\' | localize }}\n                                    <span class="required">*</span>\n                                    <i class="icon icon-v-information-line"\n                                       data-type="info"\n                                       bs-tooltip=":: \'IntProcMatchingGroupTooltip\' | localize"\n                                       data-container=".container"></i></th>\n                                <th width="60px">&nbsp;</th>\n                            </thead>\n                        </div>\n                        <tbody class="vlc-docusign-tbody-omni">\n                            <tr ng-repeat="map in vm.element.PropertySet__c.advancedMergeMap | orderBy:\'normalizeKey\'">\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-required="true"\n                                            ng-model="map.listKey"\n                                            ng-options="option for option in vm.element.PropertySet__c.mergeListsOrder">\n                                    </select>\n                                </td>\n                                <td>\n                                    <input type="text"\n                                           class="form-control"\n                                           ng-required="true"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           ng-model="map.matchingPath">\n                                </td>\n                                <td>\n                                    <select class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="map.normalizeKey"\n                                            ng-options="option for option in vm.matchingGroupOptions"\n                                            ng-required="true"></select>\n                                </td>\n                                <td>\n                                    <span class="trash-icon icon-v-trash"\n                                          ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                                          ng-click="vm.deleteAdvancedMergeMap(map)"></span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.allowMergeNulls"\n                               label="NULL is a Valid Matching Value when Merging"></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.hasPrimary"\n                               label="Has Primary"></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.primaryListKey"\n                           label="Primary List Key"></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Sort List"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <array-list-prop label="Sort By"\n                                 ng-disabled="vm.scriptElement.isDisabled()"\n                                 ng-model="vm.element.PropertySet__c.sortBy"></array-list-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sortInDescendingOrder"\n                               label="Sort In Descending Order"></checkbox-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Modify List"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <key-value-prop label="Update Field Value"\n                                help-text="{{:: \'IntProcUpdateFieldTooltip\' | localize }}"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                render-expression-cell="true"\n                                ng-model="vm.element.PropertySet__c.updateFieldValue"></key-value-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <text-prop label="Dynamic Output Fields"\n                           help-text="{{:: \'IntProcDynamicOutputTooltip\' | localize }}"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.dynamicOutputFields"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Filter List Formula</span>\n                </label>\n                <div>\n                    <div class="col-md-12 faux-field"\n                        ng-class="{ divDisabled: vm.scriptElement.isDisabled() }">\n                        <button type="button"\n                                class="btn btn-default faux-field"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-click="vm.editAsExpression()">\n                            <i>fx</i>\n                        </button>\n                        <input type="text"\n                            class="form-control faux-field"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.filterListFormula" />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <group-prop label="Debug Logging">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.preActionLogging"\n                           label="Pre-action Logging"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postActionLogging"\n                           label="Post-action Logging"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message">\n            </text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/ips/action/docusign-envelope-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>{{ ::\'OmniDesDocuTemplates\' | localize }}</span>\n            </label>\n            <div class="panel panel-default"\n                 ng-repeat="template in vm.element.PropertySet__c.docuSignTemplatesGroup track by $index">\n                <table class="table"\n                       style="border: 0; margin-bottom: 0;">\n                    <thead>\n                        <th width="60px">{{ ::\'OmniDesDocuIncludeToSend\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip=" :: \'OmniDesDocuIncludeTooltip\' | localize "\n                               data-container=".container"\n                               data-type="info">\n                            </i>\n                        </th>\n                        <th>{{ ::\'OmniDesDocuTemplatePick\' | localize }}</th>\n                        <th>{{ ::\'OmniDesDocuDRTransformPick\' | localize }}</th>\n                        <th>{{ ::\'OmniDesDocuSendJSONPath\' | localize }}</th>\n                        <th>{{ ::\'OmniDesDocuSendJSONNode\' | localize }}</th>\n                        <th width="60px">&nbsp;</th>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <input type="checkbox"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="template.includeToSend" />\n                            </td>\n                            <td>\n                                <select name="docusignSignerRole"\n                                        class="form-control"\n                                        ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"\n                                        ng-change="vm.onChangeDocusignTemplate($index)"\n                                        ng-model="template.docuSignTemplate"\n                                        ng-options="option[vm.docusignFieldMap[\'TemplateIdentifier__c\']] as option.Name for option in vm.docuSignTemplates" ></select>\n                            </td>\n                            <td>\n                                <dataraptor-select  ng-model="template.transformBundle"\n                                                    mode="simple"\n                                                    ng-change="property.update()"\n                                                    ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"\n                                                    ></dataraptor-select>\n                            </td>\n                            <td>\n                                <input type="text"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="template.sendJSONPath" />\n                            </td>\n                            <td>\n                                <input type="text"\n                                       class="form-control"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       ng-model="template.sendJSONNode" />\n                            </td>\n                            <td class="vlc-delete-cell">\n                                <span class="trash-icon icon-v-trash"\n                                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                                      ng-click="vm.deleteDocuSignTemplate($index)"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <div class="panel panel-default"\n                     ng-init="parentIndex = $index"\n                     style="margin-bottom: 0;border-radius: 0;border: 0;box-shadow: none;border-top: 1px solid #ddd;">\n                    <div class="panel-heading"> {{ ::\'OmniDesDocuRecipients\' | localize }}\n                        <button class="btn btn-default"\n                                type="button"\n                                ng-disabled="form.propertiesForm.docusignSignerName.$invalid || form.propertiesForm.docusignSignerEmail.$invalid || form.propertiesForm.docusignSignerRole.$invalid || vm.scriptElement.isDisabled()"\n                                ng-click="vm.addDocuSignSigner(parentIndex)">\n                            <i class="icon icon-v-plus-line"></i>{{ ::\'OmniDesDocuAddRecipient\' | localize }}\n                        </button>\n                    </div>\n                    <table class="table"\n                           style="border: 0; margin-bottom: 0; border-bottom: 1px solid rgba(0, 0, 0, 0.15)">\n                        <thead>\n                            <th>{{ ::\'OmniDesDocuRoutingOrder\' | localize }}\n                                <i class="icon icon-v-information-line"\n                                   bs-tooltip=" :: \'OmniDesDocuRoutingTooltip\' | localize "\n                                   data-container=".container"\n                                   data-type="info">\n                                </i>\n                            </th>\n                            <th>{{ ::\'OmniDesDocuSignerName\' | localize }}<span class="required">*</span></th>\n                            <th>{{ ::\'OmniDesDocuSignerEmail\' | localize }}<span class="required">*</span></th>\n                            <th>{{ ::\'OmniDesDocuTemplateRole\' | localize }}<span class="required">*</span></th>\n                            <th width="60px">&nbsp;</th>\n                        </thead>\n                        <tbody>\n                            <tr ng-repeat="signer in template.signerList track by $index">\n                                <td>\n                                    <input type="text"\n                                           class="form-control"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           ng-model="signer.routingOrder" />\n                                </td>\n                                <td>\n                                    <input type="text"\n                                           class="form-control"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           name="docusignSignerName"\n                                           ng-model="signer.signerName"\n                                           ng-required="true" />\n                                </td>\n                                <td>\n                                    <input type="text"\n                                           class="form-control"\n                                           ng-disabled="vm.scriptElement.isDisabled()"\n                                           name="docusignSignerEmail"\n                                           ng-model="signer.signerEmail"\n                                           ng-required="true" />\n                                </td>\n                                <td>\n                                    <select name="docusignSignerRole"\n                                            class="form-control"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            ng-model="signer.templateRole"\n                                            ng-options="role as role for role in vm.templateRolesByTemplate[template.docuSignTemplate] track by role"\n                                            ng-required="true" ></select>\n                                </td>\n                                <td class="vlc-delete-cell">\n                                    <span class="trash-icon icon-v-trash"\n                                          ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                                          ng-click="vm.deleteDocuSignSigner($index, parentIndex)"\n                                          style="top: 8px; left: 17px;"></span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <button class="btn btn-default"\n                    type="button"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addDocuSignTemplate()">\n                <i class="icon icon-v-plus-line"></i>{{ ::\'OmniDesDocuAddTemplate\' | localize }}\n            </button>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailSubject"\n                       label="Email Subject"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Email Body</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.PropertySet__c.emailBody"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dateFormat"\n                       label="Date Format"\n                       help-text="Specifies how the date should be formatted for the user. Supports formats from the AngularJS date filter.\nExamples include MM/dd/yy and yyyy-MM-dd "></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dateTimeFormat"\n                       label="Date Time Format"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.timeFormat"\n                       label="Time Format"\n                       help-text="Controls how the Time is formatted in the UI. h or hh for hour, m or mm for minute, s or ss for seconds, a for am/pm indicator. Single letter (e.g., h) has no leading zero; remove the &quot;a&quot; to display 24 hour time. Examples:&lt;br/&gt;&quot;hh:mm a&quot;, &quot;hh:mm:ss&quot;."></text-prop>\n        </div>\n    </div>\n    <group-prop label="Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Additional Input/Output/Failure Response" is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyAdditionalInput"\n                               label="Send Only Additional Input"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Input"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalInput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyAdditionalOutput"\n                               label="Return Only Additional Output"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Additional Output"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.additionalOutput">\n        </key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.returnOnlyFailureResponse"\n                               label="Return Only Failure Response"></checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Failure Response"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        render-expression-cell="true"\n                        ng-model="vm.element.PropertySet__c.failureResponse">\n        </key-value-prop>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.executionConditionalFormula"\n                                label="Execution Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failOnStepError"\n                           label="Fail On Step Error"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <monaco-editor-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.failureConditionalFormula"\n                                label="Failure Conditional Formula">\n            </monaco-editor-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.chainOnStep"\n                           label="Chain On Step"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.chainOnStep">\n        <div class="col-md-12">\n            <key-value-prop label="Additional Chainable Response"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            render-expression-cell="true"\n                            ng-model="vm.element.PropertySet__c.additionalChainableResponse">\n            </key-value-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.actionMessage"\n                       label="Action Message"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/function/aggregate.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Data Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesDataTypes\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.dataType">\n          <option ng-value="null"></option>\n          <option value="Boolean">Boolean</option>\n          <option value="Currency">Currency</option>\n          <option value="Date">Date</option>\n          <option value="Number">Number</option>\n          <option value="Text">Text</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.showInputWidth" />\n        <span>Label Outside Of Field</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6"\n         ng-show="vm.element.PropertySet__c.showInputWidth">\n      <label>\n        <span>Field Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.inputWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Expression</span>\n        </label>\n        <simple-expression-builder expression="vm.element.PropertySet__c.expression"\n                                   aggregatemode="true"\n                                   disabled="vm.scriptElement.isDisabled()"\n                                   element-names="vm.elementNamesAsObject()"></simple-expression-builder>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Formatting"\n              ng-if="vm.element.PropertySet__c.dataType === \'Currency\' || vm.element.PropertySet__c.dataType === \'Number\' ||\nvm.element.PropertySet__c.dataType === \'Date\' "\n              is-open="true">\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Currency\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.mask"\n                   label="Mask"></text-prop>\n      </div>\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.hideGroupSep"\n                       label="Hide Group Sep"></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Number\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.mask"\n                   label="Mask"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Date\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.dateFormat"\n                   label="Date Format"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.hide"\n                     label="Hide"\n                     help-text="Hides field from the UI"></checkbox-prop>\n    </div>\n  </div>\n\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/function/formula.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Data Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesDataTypes\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.dataType">\n          <option ng-value="null"></option>\n          <option value="Boolean">Boolean</option>\n          <option value="Currency">Currency</option>\n          <option value="Date">Date</option>\n          <option value="Number">Number</option>\n          <option value="Text">Text</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.showInputWidth" />\n        <span>Label Outside Of Field</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6"\n         ng-show="vm.element.PropertySet__c.showInputWidth">\n      <label>\n        <span>Field Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.inputWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Expression</span>\n        </label>\n        <simple-expression-builder expression="vm.element.PropertySet__c.expression"\n                                   aggregatemode="false"\n                                   disabled="vm.scriptElement.isDisabled()"\n                                   element-names="vm.elementNamesAsObject()"></simple-expression-builder>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Formatting"\n              ng-if="vm.element.PropertySet__c.dataType === \'Currency\' || vm.element.PropertySet__c.dataType === \'Number\' ||\nvm.element.PropertySet__c.dataType === \'Date\' "\n              is-open="true">\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Currency\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.mask"\n                   label="Mask"></text-prop>\n      </div>\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.hideGroupSep"\n                       label="Hide Group Sep"></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Number\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.mask"\n                   label="Mask"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-if="vm.element.PropertySet__c.dataType === \'Date\'">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.dateFormat"\n                   label="Date Format"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.hide"\n                     label="Hide"\n                     help-text="Hides field from the UI"></checkbox-prop>\n    </div>\n  </div>\n\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/function/geolocation.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/function/validation.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Validate Expression</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The True and False messages display based on how the Validate Expression evaluates\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div class="showGroup">\n                    <div show-hide-rule\n                         parent="vm.element.PropertySet__c.validateExpression.group.rules"\n                         rule="vm.element.PropertySet__c.validateExpression"\n                         root-rule="vm.element.PropertySet__c.validateExpression"\n                         element-names="vm.elementNames()"\n                         is-disabled="vm.scriptElement.isDisabled()"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Messages</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Text that will be displayed to the User. &quot;Requirement&quot; messages require the user to change the condition to true in order to advance to the next step of the OmniScript\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div class="row validation-messages"\n                 ng-repeat="message in vm.element.PropertySet__c.messages track by $index">\n                <div class="col-md-1">\n                    <label ng-bind="message.value"></label>\n                </div>\n                <div class="col-md-4">\n                    <select class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="message.type">\n                        <option value="Comment">Comment</option>\n                        <option value="Requirement"\n                                ng-if="message.value == false">Requirement</option>\n                        <option value="Success">Success</option>\n                        <option value="Warning">Warning</option>\n                    </select>\n                </div>\n                <div class="col-md-5">\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="message.text" />\n                </div>\n                <div class="col-md-2">\n                    <label>\n                        <input type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="message.active" />\n                        <span ng-model="message.active">Active</span>\n                    </label>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.hideLabel"\n                           label="Hide Label"></checkbox-prop>\n        </div>\n    </div>\n\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/dataraptorselect.tpl.html",'<div class="row" ng-if="vm.mode !== \'simple\'">\n    <div class="col-xs-10">\n        <input type="text"\n            ng-attr-id="{{vm.idPrefix}}"\n            class="form-control"\n            ng-model="vm.modelValue"\n            watch-options="true"\n            bs-options="bundle.Name as bundle.Name for bundle in vm.getBundles($viewValue) track by $index"\n            bs-typeahead\n            bs-on-select="vm.updateParentModel"\n            data-min-length="0"\n            ng-blur="vm.handleBlur($modelValue)"\n            ng-disabled="vm.ngDisabled" />\n    </div>\n    <div class="col-xs-1">\n        <button ng-attr-id="{{vm.idPrefix + \'_openBtn\'}}"\n                class="btn btn-link pull-right"\n                ng-if="!vm.loading"\n                ng-click="vm.openDR($event)">\n            <i class="icon icon-v-link"></i>\n        </button>\n        <button ng-if="vm.loading"\n                class="btn btn-link pull-right">\n            <i class="small spinner"></i>\n        </button>\n    </div>\n</div>\n<input type="text"\n        ng-attr-id="{{vm.idPrefix}}"\n        class="form-control"\n        ng-model="vm.modelValue"\n        watch-options="true"\n        bs-options="bundle.Name as bundle.Name for bundle in vm.getBundles($viewValue) track by $index"\n        bs-typeahead\n        bs-on-select="vm.updateParentModel"\n        data-min-length="0"\n        ng-disabled="vm.ngDisabled"\n        ng-blur="vm.handleBlur($modelValue)"\n        ng-if="vm.mode == \'simple\'" />\n'),$templateCache.put("propertysets/input/currency.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6"\n             ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.inputWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Default Value</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       data-min-length="0"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.defaultValue" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Format Override: {{vm.maskStyle?\'Mask\':\'Decimal Places\'}}</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'If populated, this value will override \'+(vm.maskStyle?\'the currency format as a mask\':\'the number of fixed decimal places to display.\')"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <label style="float:right">\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.maskStyle" />\n                <span>Custom Mask</span>\n            </label>\n            <div ng-switch on="vm.maskStyle">\n                <input type="text"\n                       ng-switch-when="true"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.getSetMask"\n                       ng-model-options="{ getterSetter: true }" />\n                <input type="number"\n                       ng-switch-default\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.getSetMask"\n                       ng-model-options="{ getterSetter: true }" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Currency Value</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'The minimum value that is valid.  Displays error when user input is outside of this range.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       data-min-length="0"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.min" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Currency Value</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'The maximum value that is valid.  Displays error when user input is outside of this range.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.max" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.allowNegative" />\n                <span>Allow Negative Numbers</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Allows the user to enter negative numbers in the field.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.hideGroupSep" />\n                    <span>Hide Comma Separators</span>\n                    <i class="icon icon-v-information-line"\n                       bs-tooltip="\'Hides the separator between digits, e.g., the comma after millions and thousands in English or after lakh and crore in Indian numbering.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n          <label>\n            <input type="checkbox"\n                   ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.displayCurrencyCode" />\n            <span>Display Currency Code</span>\n            <i class="icon icon-v-information-line"\n               bs-tooltip="\'Currency code will display instead of Currency symbol if it enabled, e.g. USD instead of $\'"\n               data-container=".container"\n               data-type="info"></i>\n          </label>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/signature.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'" data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'" data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Length</span>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.minLength"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>Maximum Length</label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.maxLength"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/number.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="number" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Mask</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Formats the input. Enter a + or - symbol to ensure that a positive or negative integer is always returned. The # symbol and the integers 1-9 represent a digit in the field. The number can be separated with commas and a decimal. The decimal will only be applied if the user enters it into the field. For example, the mask ###,###.## would transform the input 123456.78 into 123,456.78.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.mask"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <pattern-prop label="Pattern"\n                ng-model="vm.element.PropertySet__c.pattern"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                lwc-enabled="vm.scriptElement.IsLwcEnabled__c"\n                help-text="Specifies a JavaScript RegExp regular expression that must match the input to be valid.  For example, \\d{5}(-\\d{4})? will match a US style 5 digit zipcode OR a zip+4 zipcode.">\n            </pattern-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderMaksingTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/time.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.required" />\n        <span>Required?</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <div class="checkbox">\n        <label>\n          <input type="checkbox"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.readOnly" />\n          <span>Read Only</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeat" />\n        <span>Repeat</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.repeat">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeatClone" />\n        <span>Repeat Clone</span>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Repeat Limit</span>\n      </label>\n      <div>\n        <input type="number"\n               min="1"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeatLimit" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.showInputWidth" />\n        <span>Label Outside Of Field</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6"\n         ng-show="vm.element.PropertySet__c.showInputWidth">\n      <label>\n        <span>Field Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.inputWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.help" />\n        <span>Help Text Active?</span>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Help Text</span>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.helpText" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Min Time</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'Sets the minimum time, allowing Users to select a time that is later than the minimum time.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               data-min-length="0"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.minTime" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Max Time</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'Sets the maximum time, allowing Users to select a time that is before the maximum time.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.maxTime" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Data Type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'If set to string, the value honors the Model Time Format.  If set to date, the time is encoded as an ISO 8601 date/time (e.g., 2018-01-28T05:00:00.000Z)\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="timeType"\n                id="timeType"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.timeType">\n          <option value="date">Date</option>\n          <option value="string">String</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Model Time Format</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'If Data Type is set to string, this controls how the time is formatted in the Data JSON  It uses the same AngularJS date filter formats that the Time Format uses.  Examples formats include &quot;HH:mm:ss.sss\\&#39;Z\\&#39;&quot; and &quot;hh:mm a&quot;.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()||vm.element.PropertySet__c.dateType===\'date\'"\n               ng-model="vm.element.PropertySet__c.modelTimeFormat" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Time Format</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls how the Time is formatted in the UI.  h or hh for hour, m or mm for minute, s or ss for seconds, a for am/pm indicator.  Single letter (e.g., h) has no leading zero; remove the &quot;a&quot; to display 24 hour time. Examples: &quot;hh:mm a&quot;, &quot;hh:mm:ss&quot;.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.timeFormat" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Default Value</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value. The Time element also accepts the value &quot;now&quot;.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div class=\'form-control faux-field\'\n           ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n        <button type="button"\n                class="btn btn-default trash faux-field"\n                title="Clear Value"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-click="vm.element.PropertySet__c.defaultValue = null">\n          <span class="icon icon-v-trash"></span>\n        </button>\n        <input type="text"\n               data-min-length="0"\n               class="faux-field form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.defaultValue" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-if="vm.scriptElement.IsLwcEnabled__c">\n    <div class="col-md-6">\n      <label>\n        <span>Time Interval</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Choose the time interval for prefilled times in the dropdown. By default, this is 30 minute intervals.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.timeInterval" />\n      </div>\n    </div>\n  </div>\n\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n        <span>Available For Prefill When Hidden</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n    </div>\n  </div>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <div class="row">\n      <div class="col-xs-6">\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.conditionType">\n          <option value="Hide if False">Hide element if false</option>\n          <option value="Readonly if False">Set element to readonly if false</option>\n          <option value="Optional if False">Set required element to optional if false</option>\n        </select>\n      </div>\n    </div>\n    <br />\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>\n'),$templateCache.put("propertysets/input/file.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'LWC Only\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.uploadContDoc" />\n                <span>Upload to Content Document</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.uploadContDoc">\n        <div class="col-md-12">\n            <label>\n                <span>Content Parent ID</span>\n            </label>\n            <div>\n                <div class="input-group"\n                     style="margin: 8px 0"\n                     ng-repeat="prop in vm.element.PropertySet__c.contentParentId track by $index">\n                   <span class="input-group-addon">{{$index}}</span>\n                    <input type="text"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-change="vm.updateParentContentIdAt($index, prop)"\n                            ng-model="prop"/>\n                    <div class="input-group-btn">\n                        <button class="btn btn-link" ng-click="vm.deleteContentParentId($index)"\n                                ng-if="!vm.scriptElement.isDisabled()" title="Delete entire row">\n                           <span class="icon icon-v-trash"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <button type="button" class="btn btn-default"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewContentParentIdRow()">\n                + Add New Content Parent ID</button>\n            </div>\n        </div>\n    </div>\n\n    <div class="group" ng-show="vm.element.PropertySet__c.uploadContDoc">\n        <h4 ng-click="vm.showRemoteProps = !vm.showRemoteProps">\n            <i class="icon icon-v-right-arrow" ng-show="!vm.showRemoteProps"></i>\n            <i class="icon icon-v-down-arrow" ng-show="vm.showRemoteProps"></i>\n            Remote Properties\n        </h4>\n        <div ng-show="vm.showRemoteProps" class="group-rows">\n            <div class="row propertyRow">\n                <div class="col-md-6">\n                    <label>\n                        <span>Remote Class</span>\n                    </label>\n                    <div>\n                        <input ng-attr-id="{{vm.idPrefix + \'remoteClass\'}}" type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.remoteClass" />\n                    </div>\n                </div>\n                <div class="col-md-6">\n                    <label>\n                        <span>Remote Method</span>\n                    </label>\n                    <div>\n                        <input ng-attr-id="{{vm.idPrefix + \'remoteMethod\'}}" type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.remoteMethod" />\n                    </div>\n                </div>\n            </div>\n\n            <key-value-prop label="Remote Options"\n                            ng-model="vm.element.PropertySet__c.remoteOptions"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-show="vm.element.PropertySet__c.uploadContDoc"\n                            key-label="Key"\n                            value-label="Value"\n                            add-btn-label="Add New Key/Value Pair"\n                            id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n            <key-value-prop label="Extra Payload"\n                            ng-model="vm.element.PropertySet__c.extraPayload"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-show="vm.element.PropertySet__c.uploadContDoc"\n                            key-label="Key"\n                            value-label="Value"\n                            add-btn-label="Add New Key/Value Pair"\n                            id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n        </div>\n\n    </div>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/date.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'" data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'" data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize " data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Min Date</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.minDate"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>Max Date</label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.maxDate"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Date Type</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'If set to string, the value honors the Model Date Format.  If set to date, the date is encoded as an ISO 8601 date/time (e.g., 2018-01-28T05:00:00.000Z)\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <select name="dateType" id="dateType" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.dateType">\n                    <option value="date">Date</option>\n                    <option value="string">String</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Model Date Format</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'If Data Type is set to string, this controls how the date is formatted in the Data JSON  It uses the same AngularJS date filter formats that the Date Format uses.  Examples formats include &quot;yyyy-MM-dd&quot; and &quot;MM/dd/yy&quot;.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()||vm.element.PropertySet__c.dateType===\'date\'" ng-model="vm.element.PropertySet__c.modelDateFormat"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Date Format</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Specifies how the date should be formatted for the user.  Supports formats from the AngularJS date filter.  Examples include MM/dd/yy and yyyy-MM-dd.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.dateFormat"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value. The Date element also accepts a value of &quot;today&quot;.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/datetime.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.required" />\n        <span>Required?</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <div class="checkbox">\n        <label>\n          <input type="checkbox"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.readOnly" />\n          <span>Read Only</span>\n          <i class="icon icon-v-information-line"\n             data-html="true"\n             bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n             data-container=".container"\n             data-type="info"></i>\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeat" />\n        <span>Repeat</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-show="vm.element.PropertySet__c.repeat">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeatClone" />\n        <span>Repeat Clone</span>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Repeat Limit</span>\n      </label>\n      <div>\n        <input type="number"\n               min="1"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.repeatLimit" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.showInputWidth" />\n        <span>Label Outside Of Field</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6"\n         ng-show="vm.element.PropertySet__c.showInputWidth">\n      <label>\n        <span>Field Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.inputWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.help" />\n        <span>Help Text Active?</span>\n      </label>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Help Text</span>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.helpText" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Min Date</span>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.minDate" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>Max Date</label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.maxDate" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Date Format</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Specifies how the date should be formatted for the user.  Supports formats from the AngularJS date filter.  Examples include &quot;MM/dd/yy&quot; and &quot;yyyy-MM-dd&quot;\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.dateFormat" />\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Time Format</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls how the Time is formatted in the UI.  h or hh for hour, m or mm for minute, s or ss for seconds, a for am/pm indicator.  Single letter (e.g., h) has no leading zero; remove the &quot;a&quot;  to display 24 hour time. Examples: &quot;hh:mm a&quot;, &quot;hh:mm:ss&quot;.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.timeFormat" />\n      </div>\n    </div>\n  </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Timezone</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Local Timezone uses the timezone of the browser.  User Timezone uses the timezone set in the users profile.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="dateType"\n                id="dateType"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.timezone">\n          <option ng-value="null"></option>\n          <option value="User">User Timezone</option>\n          <option value="Local">Local Timezone</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Default Value</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value. The Date/Time element also accepts two special values: &quot;today&quot; and &quot;now&quot;\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div class=\'form-control faux-field\'\n           ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n        <button type="button"\n                class="btn btn-default trash faux-field"\n                title="Clear Value"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-click="vm.element.PropertySet__c.defaultValue = null">\n          <span class="icon icon-v-trash"></span>\n        </button>\n        <input type="text"\n               data-min-length="0"\n               class="faux-field form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.defaultValue" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-if="vm.scriptElement.IsLwcEnabled__c">\n    <div class="col-md-6">\n      <label>\n        <span>Time Interval</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Choose the time interval for prefilled times in the dropdown. By default, this is 30 minute intervals.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.timeInterval" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <label>\n        <input type="checkbox"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n        <span>Available For Prefill When Hidden</span>\n        <i class="icon icon-v-information-line"\n           bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n    </div>\n    <div class="col-md-6">\n    </div>\n  </div>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <div class="row">\n      <div class="col-xs-6">\n        <select class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.conditionType">\n          <option value="Hide if False">Hide element if false</option>\n          <option value="Readonly if False">Set element to readonly if false</option>\n          <option value="Optional if False">Set required element to optional if false</option>\n        </select>\n      </div>\n    </div>\n    <br />\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>\n'),$templateCache.put("propertysets/input/url.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/select.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6"\n             ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.inputWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Options"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines where the list of options is sourced.  Manual- Manually enter value/label pairs. Custom- enter the Apex class and method that returns the options. Use the format ClassName.method. (see &quot;Populating Picklist Values From Apex&quot; in the documentation), SObject- Retrieves the picklist values from the Salesforce object and field. Use the format ObjectAPIName.FieldAPIName. \'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="displayMode"\n                            id="displayMode"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.optionSource.type">\n                        <option value="Custom">Custom</option>\n                        <option value="">Manual</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6"></div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-switch="vm.element.PropertySet__c.optionSource.type">\n            <div class="col-md-12"\n                 ng-switch-when="SObject|Custom"\n                 ng-switch-when-separator="|">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'When Option Source is &quot;Custom&quot;, this field holds the name of a method to call on a class in the format class.method.  When it Option Source is SObject, the field holds the name of a field on an object in the format SObject.field.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionSource.source">\n                </div>\n            </div>\n\n\n            <div class="col-md-12"\n                 ng-switch-default>\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="row">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%"></div>\n                            <div style="width:50%;margin-left:50%"\n                                 class="text-center">Default</div>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesName\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameName\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesValue\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameValue\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-2 text-center">\n                            {{ ::\'OmniDesAutoAdvance\' | localize}}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip="\'If true, advances user to the next step upon selection\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options"\n                    ng-if="vm.element.PropertySet__c.options.length > 0">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%">\n                                <i class="icon icon-v-grip"\n                                   style="position:absolute;top:50%;transform:translate(0,-50%)"></i>\n                            </div>\n                            <div style="width:50%;margin-left:50%">\n                                <label style="left:50%;transform:translate(-50%);position:relative;">\n                                    <input type="checkbox"\n                                           ng-model="vm.getSetDefaultValue(option.name)"\n                                           ng-model-options="{getterSetter: true}"\n                                           ng-disabled="vm.scriptElement.isDisabled()" />\n                                </label>\n                            </div>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name"\n                                   ng-change="vm.updateNameIfDefault(option.name, \'{{option.name}}\')" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-2"\n                             dnd-nodrag="true">\n                            <label style="left:50%;position:relative;">\n                                <input type="checkbox"\n                                       ng-model="option.autoAdv"\n                                       ng-true-value="\'next\'"\n                                       ng-false-value="null"\n                                       ng-disabled="vm.scriptElement.isDisabled()" />\n                            </label>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Controlling Field">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines the controlling fields source. Set to Custom to retrieve picklist options from an apex class. Set to SObject to retrieve dependent picklist values from a Salesforce object.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="optionSource"\n                            id="optionSource"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.controllingField.type">\n                        <option ng-value="">None</option>\n                        <option value="Custom">Custom</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.controllingField.type == \'Custom\' || vm.element.PropertySet__c.controllingField.type == \'SObject\'">\n            <div class="col-md-6">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves picklist values from a specified apex class.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.source" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Element</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves dependent picklist values based on the selected picklist value of the specified OmniScript element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.element"\n                           bs-typeahead\n                           bs-options="name for name in vm.elementNames()" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/customlwc.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true"\n                    bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()"\n                model-max="vm.element.PropertySet__c.controlWidth" pin-handle="min" show-values show-labels\n                attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true"\n                    bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Lightning Web Component Name</span>\n            </label>\n            <div>\n                <input \n                  id="lwcName"\n                  name="lwcName"\n                  type="text"\n                  class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-model="vm.element.PropertySet__c.lwcName"\n                  data-min-length="0"\n                  bs-options="lwc for lwc in vm.lwcList"\n                  watch-options="true"\n                  bs-typeahead />\n            </div>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.bStandalone" />\n                <span>Standalone LWC</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Custom LWCs must implement OmniScriptBaseMixin to compile and communicate with the OmniScript. Check this box if the Custom LWC does not need to communicate with the parent OmniScript.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n    </div>\n    <group-prop label="Custom Lightning Web Component Properties">\n        <label>\n            Properties\n        </label>\n        <ul style="min-height: 0px">\n            <li class="optionProperty row">\n                <div class="col-md-6 text-center">\n                    <label>\n                        <span>Property Name</span>\n                        <i class="icon icon-v-information-line" data-html="true"\n                            bs-tooltip="\'Adds a property name to the Custom Lightning Web Component, the property must be defined in the Custom Lightning Web Component in order for it to be used. Otherwise, prepend data- to the property name. For example : data-my-prop-name\'"\n                            data-container=".container" data-type="info"></i>\n                    </label>\n                </div>\n                <div class="col-md-5 text-center">\n                    <label>\n                        <span>Property Source</span>\n                        <i class="icon icon-v-information-line" data-html="true"\n                            bs-tooltip="\'Source of the property. Merge fields are supported by using the %merge field syntax%. Otherwise the property is treated as a String\'"\n                            data-container=".container" data-type="info"></i>\n                    </label>\n                </div>\n                <div class="col-md-1">\n                    <label>\n                        <span> </span>\n                    </label>\n                </div>\n            </li>\n        </ul>\n        <ul>\n            <li class="optionProperty row"\n                ng-repeat="prop in vm.element.PropertySet__c.customAttributes track by $index">\n                <div class="col-md-6">\n                    <div>\n                        <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="prop.name" />\n                    </div>\n                </div>\n                <div class="col-md-5">\n                    <div>\n                        <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="prop.source" placeholder="{{ ::\'OmniDesShowEnterFldName\' | localize }}"\n                            bs-options="name for name in vm.elementPath() | decoratePath" bs-typeahead\n                            data-min-length="0" />\n                    </div>\n                </div>\n                <div class="col-md-1">\n                    <div>\n                        <button type="button" class="btn btn-link" ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.element.PropertySet__c.customAttributes.splice($index, 1)">\n                            <span class="icon icon-v-trash"></span>\n                        </button>\n                    </div>\n                </div>\n            </li>\n        </ul>\n\n        <button type="button" class="btn btn-default add-new" ng-disabled="vm.scriptElement.isDisabled()"\n            ng-click="vm.addNewProperty()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5"\n                    ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules"\n                rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>'),$templateCache.put("propertysets/input/text.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\'\n                 ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                    <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text"\n                       data-min-length="0"\n                       class="faux-field form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.defaultValue" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6"\n             ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.inputWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Mask</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Specifies the allowable input.  Use A for any letter, 9 for any number, * for any character, and ? preceeds an optional character.  For example (999) 999-9999?x?9?9?9?9 accepts a North American style phone number with optional extension.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.mask" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <pattern-prop label="Pattern"\n                ng-model="vm.element.PropertySet__c.pattern"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                lwc-enabled="vm.scriptElement.IsLwcEnabled__c"\n                help-text="Specifies a JavaScript RegExp regular expression that must match the input to be valid.  For example, \\d{5}(-\\d{4})? will match a US style 5 digit zipcode OR a zip+4 zipcode.">\n            </pattern-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.ptrnErrText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Length</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       data-min-length="0"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.minLength" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Length</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.maxLength" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderMaksingTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/radio.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Options"\n                is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Display Mode</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Vertical: Options are displayed one on a row as a series of checkboxes.  Horizontal: Checkboxes are displayed horizontally, as many will fit on a line, then wrapping to a new line.  Image: Arranges the options horizontally in boxes of size Option Width and Height.  For Image, change the Option Source to Image.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="displayMode"\n                            id="displayMode"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.horizontalMode"\n                            ng-options="key for (key , value) in {\'Horizontal\': true,\'Vertical\': false,\'Image\': \'image\',\'Segment (Newport)\':\'displayWide\'}">\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines where the list of options is sourced.  Manual- Manually enter value/label pairs. Image- Manually enter value/label pairs and upload images to display on the UI. If no image is uploaded, the label will display in the image box.  Custom- enter the Apex class and method that returns the options. Use the format ClassName.method. (see &quot;Populating Picklist Values From Apex&quot; in the documentation), SObject- Retrieves the picklist values from the Salesforce object and field. Use the format ObjectAPIName.FieldAPIName. \'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="displayMode"\n                            id="displayMode"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.optionSource.type">\n                        <option value="Custom">Custom</option>\n                        <option value="image">Image</option>\n                        <option value="">Manual</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-if="vm.element.PropertySet__c.horizontalMode === \'image\'">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Width</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionWidth" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Option Height</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionHeight" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-if="vm.element.PropertySet__c.horizontalMode === \'image\'">\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.enableCaption" />\n                    <span>Enable Caption</span>\n                </label>\n            </div>\n            <div class="col-md-6"></div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-switch="vm.element.PropertySet__c.optionSource.type">\n            <div class="col-md-12"\n                 ng-switch-when="SObject|Custom"\n                 ng-switch-when-separator="|">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'When Option Source is &quot;Custom&quot;, this field holds the name of a method to call on a class in the format class.method.  When it Option Source is SObject, the field holds the name of a field on an object in the format SObject.field.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionSource.source">\n                </div>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-when="image">\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="optionProperty row">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%"></div>\n                            <div style="width:50%;margin-left:50%"\n                                 class="text-center">Default</div>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            Value\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Language-independent value written to the Data JSON\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            Label\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Displayed on UI\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1 text-center">{{ ::\'OmniDesImage\' | localize}}</div>\n                        <div class="col-md-1 text-center">\n                            {{ ::\'OmniDesAutoAdvance\' | localize}}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip="\'If true, advances user to the next step upon selection\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options"\n                    ng-if="vm.element.PropertySet__c.options.length > 0">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%">\n                                <i class="icon icon-v-grip"\n                                   style="position:absolute;top:50%;transform:translate(0,-50%)"></i>\n                            </div>\n                            <div style="width:50%;margin-left:50%">\n                                <label style="left:50%;transform:translate(-50%);position:relative;">\n                                    <input type="checkbox"\n                                           ng-model="vm.getSetDefaultValue(option.name)"\n                                           ng-model-options="{getterSetter: true}"\n                                           ng-disabled="vm.scriptElement.isDisabled()" />\n                                </label>\n                            </div>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name"\n                                   ng-change="vm.updateNameIfDefault(option.name, \'{{option.name}}\')" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true"\n                             style="min-height:28px">\n                            <button type="button"\n                                    class="btn btn-default add-new des-thumb"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click=\'vm.selectImage(option)\'>\n                                <span ng-if="option.imgId === null || !option.imgId">+ {{::\'OmniAdd\' | localize}}</span>\n                                <img ng-if="option.imgId !== null && option.imgId"\n                                     class="des-thumb image-thumb"\n                                     src="{{option.imgId}}"\n                                     alt="External Reference">\n                            </button>\n                            <button type="button"\n                                    class="btn btn-link btn-clear"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click="option.imgId = null"\n                                    ng-if="option.imgId && option.imgId!=null">\n                                <span>x</span>\n                            </button>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <label style="left:50%;transform:translate(-50%);position:relative;">\n                                <input type="checkbox"\n                                       ng-model="option.autoAdv"\n                                       ng-true-value="\'next\'"\n                                       ng-false-value="null"\n                                       ng-disabled="vm.scriptElement.isDisabled()" />\n                            </label>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-default>\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="optionProperty row">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%"></div>\n                            <div style="width:50%;margin-left:50%"\n                                 class="text-center">Default</div>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesName\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameName\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            {{ ::\'OmniDesValue\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameValue\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-2 text-center">\n                            {{ ::\'OmniDesAutoAdvance\' | localize}}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip="\'If true, advances user to the next step upon selection\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%">\n                                <i class="icon icon-v-grip"\n                                   style="position:absolute;top:50%;transform:translate(0,-50%)"></i>\n                            </div>\n                            <div style="width:50%;margin-left:50%">\n                                <label style="left:50%;transform:translate(-50%);position:relative;">\n                                    <input type="checkbox"\n                                           ng-model="vm.getSetDefaultValue(option.name)"\n                                           ng-model-options="{getterSetter: true}"\n                                           ng-disabled="vm.scriptElement.isDisabled()" />\n                                </label>\n                            </div>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name"\n                                   ng-change="vm.updateNameIfDefault(option.name, \'{{option.name}}\')" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-2"\n                             dnd-nodrag="true">\n                            <label style="left:50%;position:relative;">\n                                <input type="checkbox"\n                                       ng-model="option.autoAdv"\n                                       ng-true-value="\'next\'"\n                                       ng-false-value="null"\n                                       ng-disabled="vm.scriptElement.isDisabled()" />\n                            </label>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Controlling Field">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines the controlling fields source. Set to Custom to retrieve picklist options from an apex class. Set to SObject to retrieve dependent picklist values from a Salesforce object.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="optionSource"\n                            id="optionSource"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.controllingField.type">\n                        <option ng-value="">None</option>\n                        <option value="Custom">Custom</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.controllingField.type == \'Custom\' || vm.element.PropertySet__c.controllingField.type == \'SObject\'">\n            <div class="col-md-6">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves picklist values from a specified apex class.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.source" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Element</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves dependent picklist values based on the selected picklist value of the specified OmniScript element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.element"\n                           bs-typeahead\n                           bs-options="name for name in vm.elementNames()" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Image Count In Row</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-model="vm.element.PropertySet__c.imageCountInRow"\n                       ng-disabled="vm.scriptElement.isDisabled()" />\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/multiselect.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly" />\n                    <span>Read Only</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Options"\n                is-open="true">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Display Mode</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Vertical: Options are displayed one on a row as a series of checkboxes.  Horizontal: Checkboxes are displayed horizontally, as many will fit on a line, then wrapping to a new line.  Image: Arranges the options horizontally in boxes of size Option Width and Height.  For Image, change the Option Source to Image.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="displayMode"\n                            id="displayMode"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.horizontalMode"\n                            ng-options="key for (key , value) in {\'Horizontal\': true,\'Vertical\': false,\'Image\': \'image\'}">\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines where the list of options is sourced.  Manual- Manually enter value/label pairs. Image- Manually enter value/label pairs and upload images to display on the UI. If no image is uploaded, the label will display in the image box.  Custom- enter the Apex class and method that returns the options. Use the format ClassName.method. (see &quot;Populating Picklist Values From Apex&quot; in the documentation), SObject- Retrieves the picklist values from the Salesforce object and field. Use the format ObjectAPIName.FieldAPIName. \'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="displayMode"\n                            id="displayMode"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.optionSource.type">\n                        <option value="Custom">Custom</option>\n                        <option value="image">Image</option>\n                        <option value="">Manual</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-if="vm.element.PropertySet__c.horizontalMode === \'image\'">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Width</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionWidth" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Option Height</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionHeight" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-if="vm.element.PropertySet__c.horizontalMode === \'image\'">\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.enableCaption" />\n                    <span>Enable Caption</span>\n                </label>\n            </div>\n            <div class="col-md-6"></div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-switch="vm.element.PropertySet__c.optionSource.type">\n            <div class="col-md-12"\n                 ng-switch-when="SObject|Custom"\n                 ng-switch-when-separator="|">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'When Option Source is &quot;Custom&quot;, this field holds the name of a method to call on a class in the format class.method.  When it Option Source is SObject, the field holds the name of a field on an object in the format SObject.field.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.optionSource.source">\n                </div>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-when="image">\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="optionProperty row">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%"></div>\n                            <div style="width:50%;margin-left:50%"\n                                 class="text-center">Default</div>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            Value\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Language-independent value written to the Data JSON\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-4 text-center">\n                            Label\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'Displayed on UI\'"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-2 text-center">{{ ::\'OmniDesImage\' | localize}}</div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options"\n                    ng-if="vm.element.PropertySet__c.options.length > 0">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%">\n                                <i class="icon icon-v-grip"\n                                   style="position:absolute;top:50%;transform:translate(0,-50%)"></i>\n                            </div>\n                            <div style="width:50%;margin-left:50%">\n                                <label style="left:50%;transform:translate(-50%);position:relative;">\n                                    <input type="checkbox"\n                                           ng-model="vm.getSetDefaultValue(option.name)"\n                                           ng-model-options="{getterSetter: true}"\n                                           ng-disabled="vm.scriptElement.isDisabled()" />\n                                </label>\n                            </div>\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name"\n                                   ng-change="vm.updateNameIfDefault(option.name, \'{{option.name}}\')" />\n                        </div>\n                        <div class="col-md-4"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-2"\n                             dnd-nodrag="true"\n                             style="min-height:28px">\n                            <button type="button"\n                                    class="btn btn-default add-new des-thumb"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click=\'vm.selectImage(option)\'>\n                                <span ng-if="option.imgId === null || !option.imgId">+ {{::\'OmniAdd\' | localize}}</span>\n                                <img ng-if="option.imgId !== null && option.imgId"\n                                     class="des-thumb image-thumb"\n                                     src="{{option.imgId}}"\n                                     alt="External Reference">\n                            </button>\n                            <button type="button"\n                                    class="btn btn-link btn-clear"\n                                    ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-click="option.imgId = null"\n                                    ng-if="option.imgId && option.imgId!=null">\n                                <span>x</span>\n                            </button>\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n\n            <div class="col-md-12"\n                 ng-switch-default>\n                <label>\n                    <span>Options</span>\n                </label>\n                <ul style="min-height: 0px">\n                    <li class="row">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%"></div>\n                            <div style="width:50%;margin-left:50%"\n                                 class="text-center">Default</div>\n                        </div>\n                        <div class="col-md-5 text-center">\n                            {{ ::\'OmniDesName\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameName\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-5 text-center">\n                            {{ ::\'OmniDesValue\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               data-html="true"\n                               bs-tooltip="\'OmniDesTipFieldNameValue\' | localize"\n                               data-container=".container"\n                               data-type="info"></i>\n                        </div>\n                        <div class="col-md-1"></div>\n                    </li>\n                </ul>\n                <ul dnd-list="vm.element.PropertySet__c.options">\n                    <li class="optionProperty row"\n                        ng-repeat="option in vm.element.PropertySet__c.options"\n                        dnd-draggable="option"\n                        dnd-disable-if="vm.scriptElement.isDisabled()"\n                        dnd-moved="vm.element.PropertySet__c.options.splice($index, 1)"\n                        dnd-effect-allowed="move">\n                        <div class="col-md-1"\n                             style="padding:0">\n                            <div style="width:50%">\n                                <i class="icon icon-v-grip"\n                                   style="position:absolute;top:50%;transform:translate(0,-50%)"></i>\n                            </div>\n                            <div style="width:50%;margin-left:50%">\n                                <label style="left:50%;transform:translate(-50%);position:relative;">\n                                    <input type="checkbox"\n                                           ng-model="vm.getSetDefaultValue(option.name)"\n                                           ng-model-options="{getterSetter: true}"\n                                           ng-disabled="vm.scriptElement.isDisabled()" />\n                                </label>\n                            </div>\n                        </div>\n                        <div class="col-md-5"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   class="form-control"\n                                   ng-model="option.name"\n                                   ng-change="vm.updateNameIfDefault(option.name, \'{{option.name}}\')" />\n                        </div>\n                        <div class="col-md-5"\n                             dnd-nodrag="true">\n                            <input type="text"\n                                   class="form-control"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   ng-model="option.value" />\n                        </div>\n                        <div class="col-md-1"\n                             dnd-nodrag="true">\n                            <button type="button"\n                                    class="btn btn-link"\n                                    ng-if="!vm.scriptElement.isDisabled()"\n                                    ng-click="vm.element.PropertySet__c.options.splice(vm.element.PropertySet__c.options.indexOf(option), 1)">\n                                <span class="icon icon-v-trash"></span>\n                            </button>\n                        </div>\n                    </li>\n                </ul>\n                <button type="button"\n                        class="btn btn-default add-new"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.addNewOption()">{{ ::\'OmniDesNewOption\' | localize }}</button>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Controlling Field">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Option Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Defines the controlling fields source. Set to Custom to retrieve picklist options from an apex class. Set to SObject to retrieve dependent picklist values from a Salesforce object.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select name="optionSource"\n                            id="optionSource"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.controllingField.type">\n                        <option ng-value="">None</option>\n                        <option value="Custom">Custom</option>\n                        <option value="SObject">SObject</option>\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.controllingField.type == \'Custom\' || vm.element.PropertySet__c.controllingField.type == \'SObject\'">\n            <div class="col-md-6">\n                <label>\n                    <span>Source</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves picklist values from a specified apex class.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.source" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Element</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Retrieves dependent picklist values based on the selected picklist value of the specified OmniScript element.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.controllingField.element"\n                           bs-typeahead\n                           bs-options="name for name in vm.elementNames()" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Image Count In Row</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-model="vm.element.PropertySet__c.imageCountInRow"\n                       ng-disabled="vm.scriptElement.isDisabled()" />\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/email.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n        <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Pattern</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Custom regex\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pattern"\n                />\n            </div>\n        </div>\n\n        <div class="col-md-6">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Error message for invalid email address format.  Not shown in lightning.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/filter.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize " data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Attribute Category Code</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.attributeCategoryCode" />\n            </div>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Option Source</span>\n            </label>\n            <div>\n                <select name="optionSourceType" id="optionSourceType" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.type">\n                    <option value="Select">Select</option>\n                    <option value="Multi-select">Multi-select</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6"></div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.accessibleInFutureSteps" />\n                <span>Available For Prefill When Hidden</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/disclosure.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The label above the checkbox. Not shown in Lightning or Mobile.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Check Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The label shown adjacent to the checkbox.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.checkLabel"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Text</span>\n            </label>\n            <div>\n                <textarea ui-tinymce="vm.tinymceOptions" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.text"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/range.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="number" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'" data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'" data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Mask</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Formats the input. Enter a + or - symbol to ensure that a positive or negative integer is always returned. The # symbol and the integers 1-9 represent a digit in the field. The number is separated with commas and decimals. For example, the mask ###,###.## would transform the input 12345678 into 12,345,678.00.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.mask"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Step</span>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.step"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Value</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the minimum number of a selectable range. This number should be less than the maximum, cannot be left null, and must not contain a fraction.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.rangeLow"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Value</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the maximum number of a selectable range. This number should be greater than the minimum, cannot be left null, and must not contain a fraction.\'" data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.rangeHigh"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/image.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <label>\n          <input type="checkbox"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.required" />\n          <span>Required</span>\n          <i class="icon icon-v-information-line"\n            bs-tooltip="\'LWC Only\'"\n            data-container=".container"\n            data-type="info"></i>\n        </label>\n      </div>\n      <div class="col-md-6">\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.multiple" />\n                <span>Allow Multiple Images</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'LWC Only\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input  type="checkbox"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.uploadContDoc" />\n                <span>Upload To Content Document</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.uploadContDoc">\n        <div class="col-md-12">\n            <label>\n                <span>Content Parent ID</span>\n            </label>\n            <div>\n                <div class="input-group"\n                     style="margin: 8px 0"\n                     ng-repeat="prop in vm.element.PropertySet__c.contentParentId track by $index">\n                   <span class="input-group-addon">{{$index}}</span>\n                    <input type="text"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-change="vm.updateParentContentIdAt($index, prop)"\n                            ng-model="prop"/>\n                    <div class="input-group-btn">\n                        <button class="btn btn-link" ng-click="vm.deleteContentParentId($index)"\n                                ng-if="!vm.scriptElement.isDisabled()" title="Delete entire row">\n                           <span class="icon icon-v-trash"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div>\n                <button type="button" class="btn btn-default"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewContentParentIdRow()">\n                + Add New Content Parent ID</button>\n            </div>\n        </div>\n    </div>\n\n    <div class="group" ng-show="vm.element.PropertySet__c.uploadContDoc">\n        <h4 ng-click="vm.showRemoteProps = !vm.showRemoteProps">\n            <i class="icon icon-v-right-arrow" ng-show="!vm.showRemoteProps"></i>\n            <i class="icon icon-v-down-arrow" ng-show="vm.showRemoteProps"></i>\n            Remote Properties\n        </h4>\n        <div ng-show="vm.showRemoteProps" class="group-rows">\n            <div class="row propertyRow">\n                <div class="col-md-6">\n                    <label>\n                        <span>Remote Class</span>\n                    </label>\n                    <div>\n                        <input ng-attr-id="{{vm.idPrefix + \'remoteClass\'}}" type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.remoteClass" />\n                    </div>\n                </div>\n                <div class="col-md-6">\n                    <label>\n                        <span>Remote Method</span>\n                    </label>\n                    <div>\n                        <input ng-attr-id="{{vm.idPrefix + \'remoteMethod\'}}" type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.remoteMethod" />\n                    </div>\n                </div>\n            </div>\n\n            <key-value-prop label="Remote Options"\n                            ng-model="vm.element.PropertySet__c.remoteOptions"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-show="vm.element.PropertySet__c.uploadContDoc"\n                            key-label="Key"\n                            value-label="Value"\n                            add-btn-label="Add New Key/Value Pair"\n                            id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n            <key-value-prop label="Extra Payload"\n                            ng-model="vm.element.PropertySet__c.extraPayload"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-show="vm.element.PropertySet__c.uploadContDoc"\n                            key-label="Key"\n                            value-label="Value"\n                            add-btn-label="Add New Key/Value Pair"\n                            id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n\n        </div>\n    </div>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/textarea.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Mask <span ng-if="vm.scriptElement.IsLwcEnabled__c">(LWC Unsupported)</span></span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Specifies the allowable input.  Use A for any letter, 9 for any number, * for any character, and ? preceeds an optional character.  For example (999) 999-9999?x?9?9?9?9 accepts a North American style phone number with optional extension.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.mask"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <pattern-prop label="Pattern"\n                ng-model="vm.element.PropertySet__c.pattern"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                lwc-enabled="vm.scriptElement.IsLwcEnabled__c"\n                help-text="Specifies a JavaScript RegExp regular expression that must match the input to be valid. For example, \\d{5}(-\\d{4})? will match a US style 5 digit zipcode OR a zip+4 zipcode. ">\n            </pattern-prop>\n            <small class="help-text">LWC textarea does not support pattern.</small>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Error Text <span ng-if="vm.scriptElement.IsLwcEnabled__c">(LWC Unsupported)</span></span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Length</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" data-min-length="0" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.minLength"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Length</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.maxLength"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/telephone.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Mask</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Specifies the allowable input.  Use A for any letter, 9 for any number, * for any character, and ? preceeds an optional character.  For example (999) 999-9999?x?9?9?9?9 accepts a North American style phone number with optional extension.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.mask"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <pattern-prop label="Pattern"\n                ng-model="vm.element.PropertySet__c.pattern"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                lwc-enabled="vm.scriptElement.IsLwcEnabled__c"\n                help-text="Specifies a JavaScript RegExp regular expression that must match the input to be valid.  For example, \\d{5}(-\\d{4})? will match a US style 5 digit zipcode OR a zip+4 zipcode.">\n            </pattern-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Length</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" data-min-length="0" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.minLength"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Length</span>\n                <i  class="icon icon-v-information-line"\n                    bs-tooltip="\'Sets the limits on the number of characters entered into the input.\'"\n                    data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.maxLength"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniPlaceholderMaksingTooltipText\' | localize "\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.placeholder" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/password.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required?</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Minimum Password Length</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the limits on the number of characters entered into the input\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.minLength"\n                />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Maximum Password Length</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the limits on the number of characters entered into the input\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.maxLength"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <pattern-prop label="Pattern"\n                ng-model="vm.element.PropertySet__c.pattern"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                lwc-enabled="vm.scriptElement.IsLwcEnabled__c"\n                help-text="Specifies a JavaScript RegExp regular expression that must match the input to be valid.  For example, \\d{5}(-\\d{4})? will match a US style 5 digit zipcode OR a zip+4 zipcode.">\n            </pattern-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Error Text</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The error message shown near the field when the input does not match the Pattern.\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.ptrnErrText"\n                />\n            </div>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/lookup.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n            <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Default Value</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div class=\'form-control faux-field\' ng-class="{divDisabled: vm.scriptElement.isDisabled()}">\n                <button type="button"\n                        class="btn btn-default trash faux-field"\n                        title="Clear Value"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-click="vm.element.PropertySet__c.defaultValue = null">\n                       <span class="icon icon-v-trash"></span>\n                </button>\n                <input type="text" data-min-length="0" class="faux-field form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.defaultValue"/>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.required" />\n                <span>Required</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Indicates that there must be a value in the element to be valid.  If the step has validation required checked, then the user cannot leave the step until the element has a value.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label>\n                    <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.readOnly" />\n                   <span>Read Only</span>\n                    <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The user is allowed to see, but not change the value in this element.\'"\n                        data-container=".container" data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeat" />\n                <span>Repeat</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Allows the user to interact with multiple instances by adding, deleting, and editing existing instances.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatClone" />\n                <span>Repeat Clone</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number" min="1" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.repeatLimit"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.showInputWidth" />\n                <span>Label Outside Of Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip=" :: \'OmniDesTipLightningOnly\' | localize "\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6" ng-show="vm.element.PropertySet__c.showInputWidth">\n            <label>\n                <span>Field Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Determines the width of the input field separate from the Control Width.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.inputWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.help" />\n                <span>Help Text Active?</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Help Text</span>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.helpText"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Placeholder</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.placeholder"\n                />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Data Source</span>\n            </label>\n            <div>\n                <select name="datasource" id="datasource" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.dataSource.type"\n                ng-change="vm.handleDatasourceTypeChange()">\n                    <option value="SObject">SObject</option>\n                    <option value="Custom">Custom</option>\n                    <option value="PicklistFilteredbyRecordType">Picklist Filtered by Record Type</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-show="vm.element.PropertySet__c.dataSource.type === \'Custom\'">\n        <div class="col-md-12">\n            <label>\n                <span>Source</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The name of a method to call on an Apex class in the format &quot;class.method&quot;\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dataSource.source"\n                       placeholder="e.g. MyApexClass.someMethod"/>\n            </div>\n        </div>\n    </div>\n    <div class="row propertyRow" ng-if="vm.element.PropertySet__c.dataSource.type === \'PicklistFilteredbyRecordType\'">\n        <div class="col-md-12">\n            <label>\n                <span>Picklist Object and Field</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Use the format ObjectAPIname.FieldAPIName\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dataSource.picklistObjectAndField"\n                       placeholder="e.g. Account.Type"/>\n            </div>\n            <label>\n                <span>Record Type</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'The Record Type Label of the Record Type. Supports %Merge Fields%\'"\n                data-container=".container" data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dataSource.picklistRecordType"\n                       placeholder="e.g. Billing"/>\n            </div>\n        </div>\n    </div>\n\n    <datasource-property class="row propertyRow" ng-if="vm.element.PropertySet__c.dataSource.type === \'SObject\'" script-element="vm.scriptElement" datasource="vm.element.PropertySet__c.dataSource"></datasource-property>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                />\n                <span>Available For Prefill When Hidden</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Data JSON can prefill this element when it is hidden by a conditional.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.clearValue"\n                />\n                <span>Clear Value</span>\n            </label>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                   <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br/>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/input/checkbox.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label"\n                       label="Field Label"\n                       help-text="The label above the checkbox. Not shown in Lightning or Mobile."></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.checkLabel"\n                       label="Check Label"\n                       help-text="The label shown adjacent to the checkbox."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly"\n                           label="Read Only"\n                           help-text="The user is allowed to see, but not change the value in this element."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.repeat"\n                           label="Repeat"\n                           help-text="Allows the user to interact with multiple instances by adding, deleting, and editing existing instances."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.repeat">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.repeatClone"\n                           label="Repeat Clone"></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Repeat Limit</span>\n            </label>\n            <div>\n                <input type="number"\n                       min="1"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.repeatLimit" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.help"\n                           label="Help Text Active?"></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.helpText"\n                       label="Help Text"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.defaultValue"\n                           label="Default Value"\n                           help-text="Sets a default value for the element. If the element has been prefilled with a value, it will not be overwritten by the default value."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.accessibleInFutureSteps"\n                           label="Available For Prefill When Hidden"\n                           help-text="Data JSON can prefill this element when it is hidden by a conditional."></checkbox-prop>\n        </div>\n        <div class="col-md-6">\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <div class="row">\n            <div class="col-xs-6">\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.conditionType">\n                    <option value="Hide if False">Hide element if false</option>\n                    <option value="Readonly if False">Set element to readonly if false</option>\n                    <option value="Optional if False">Set required element to optional if false</option>\n                </select>\n            </div>\n        </div>\n        <br />\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/datasource.tpl.html",'<div class="col-md-12">\n    <div class="panel panel-default">\n        <div class="panel-heading">\n            {{ ::\'OmniDesInputParam\' | localize }}\n            <i class="icon icon-v-information-line"\n                bs-tooltip=" :: \'OmniDesTipInputParam\' | localize "\n                data-container=".container"\n                    data-type="info"></i>\n            <button class="btn btn-default" type="button"\n                    ng-if="!vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewInputParameter(vm.datasource.mapItems.inputParameters)">\n                <i class="icon icon-v-plus-line"></i>\n                {{ ::\'OmniDesAddInputParam\' | localize }}\n            </button>\n        </div>\n        <table class="table">\n            <thead>\n                <th>{{ ::\'OmniDesDataSource\' | localize }}\n                    <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipDataSource\' | localize "\n                        data-container=".container"\n                        data-type="info"></i>\n                </th>\n                <th>{{ ::\'OmniDesFilterValue\' | localize }}</th>\n                <th width="50px">&nbsp;</th>\n            </thead>\n            <tbody>\n                <tr ng-repeat="inputParam in vm.datasource.mapItems.inputParameters">\n                    <td>\n                        <input type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="inputParam.element"\n                                bs-options="name for name in vm.elementNames()"\n                                bs-typeahead\n                                data-min-length="0" />\n                    </td>\n                    <td>\n                        <input type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="inputParam.inputParam" />\n                    </td>\n                    <td>\n                        <button type="button"\n                                class="btn btn-link"\n                                ng-if="!vm.scriptElement.isDisabled()"\n                                ng-click="vm.deleteInputParameter(inputParam, vm.datasource.mapItems.inputParameters)">\n                            <i class="icon icon-v-trash"></i>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class="panel panel-default">\n        <div class="panel-heading">\n            {{ ::\'OmniDesLookupQueryCfg\' | localize }}\n            <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipLookupQryCfg\' | localize "\n                        data-container=".container"\n                        data-type="info"></i>\n            <button class="btn btn-default" type="button"\n                    ng-if="!vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewMapping(vm.datasource.mapItems.phase1MapItems)">\n                <i class="icon icon-v-plus-line"></i>\n                {{ ::\'OmniDesAddMapping\' | localize }}\n            </button>\n        </div>\n        <table class="table">\n            <thead>\n                <th width="85px">{{ ::\'OmniDesLookupOrder\' | localize }}</th>\n                <th>{{ ::\'OmniDesLookupObjAndFld\' | localize }}\n                    <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipLookupObjectName\' | localize "\n                        data-container=".container"\n                        data-type="info"></i></th>\n                <th>{{ ::\'OmniDesFilterValue\' | localize }}\n                    <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipFilterValue\' | localize "\n                        data-container=".container"\n                        data-type="info"></i>\n                    </th>\n                <th>{{ ::\'OmniDesJSONPath\' | localize }}\n                    <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipJsonPath\' | localize "\n                        data-container=".container"\n                        data-type="info"></i></th>\n                <th width="50px">&nbsp;</th>\n            </thead>\n            <tbody>\n                <tr ng-repeat="mapItem in vm.datasource.mapItems.phase1MapItems">\n                    <td>\n                        <input type="number"\n                                class="form-control"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="mapItem.InterfaceObjectLookupOrder__c"\n                                min="1" ng-min="1" />\n                    </td>\n                    <td>\n                        <select ng-options="object.name as object.name for object in vm.sobjectTypes"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-change="vm.loadFieldsFor(mapItem.InterfaceObjectName__c)"\n                                class="form-control input-sm"\n                                ng-model="mapItem.InterfaceObjectName__c"></select>\n                        .\n                        <select ng-options="object for object in vm.getAllFieldsForObjects(mapItem.InterfaceObjectName__c) track by object"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model="mapItem.InterfaceFieldAPIName__c"></select>\n                    </td>\n                    <td>\n                        <select ng-options="name for name in vm.filterOptions"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            class="form-control input-sm"\n                            ng-model="mapItem.FilterOperator__c"></select>\n                        <input type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="mapItem.FilterValue__c" />\n                    </td>\n                    <td>\n                        <input type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="mapItem.DomainObjectFieldAPIName__c" />\n                    </td>\n                    <td>\n                        <button type="button"\n                                ng-if="!vm.scriptElement.isDisabled()"\n                                class="btn btn-link"\n                                ng-click="vm.deleteMapping(mapItem, vm.datasource.mapItems.phase1MapItems)">\n                            <i class="icon icon-v-trash"></i>\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class="panel panel-default">\n        <div class="panel-heading">\n            {{ ::\'OmniDesPopLookupEl\' | localize }}\n            <i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipPopulate\' | localize "\n                        data-container=".container"\n                        data-type="info"></i>\n        </div>\n        <table class="table">\n            <thead>\n                <th>{{ ::\'OmniDesJSONPathFldName\' | localize }}</th>\n                <th>{{ ::\'OmniDesInto\' | localize }}</th>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>\n                        <input  type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="vm.datasource.mapItems.phase2MapItems[0].InterfaceFieldAPIName__c" />\n                    </td>\n                    <td>{{ ::\'OmniDesName\' | localize }}<i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipJsonPathFieldNameName\' | localize "\n                        data-container=".container"\n                        data-type="info"></i></td>\n                </tr>\n                <tr>\n                    <td>\n                        <input  type="text"\n                                ng-disabled="vm.scriptElement.isDisabled()"\n                                class="form-control input-sm"\n                                ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                ng-model="vm.datasource.mapItems.phase2MapItems[1].InterfaceFieldAPIName__c" />\n                    </td>\n                    <td>{{ ::\'OmniDesValue\' | localize }}<i class="icon icon-v-information-line"\n                        bs-tooltip=" :: \'OmniDesTipJsonPathFieldNameValue\' | localize "\n                        data-container=".container"\n                        data-type="info"></i></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n'),$templateCache.put("propertysets/reusable-script.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n\n    <div class="row propertyRow">\n        <div class="col-md-4">\n            <text-prop label="Type"\n                       ng-disabled="true"\n                       ng-model="vm.element.PropertySet__c.Type"></text-prop>\n        </div>\n        <div class="col-md-4">\n            <text-prop label="Sub Type"\n                       ng-disabled="true"\n                       ng-model="vm.element.PropertySet__c[\'Sub Type\']"></text-prop>\n        </div>\n        <div class="col-md-4">\n            <label>\n                <span>Language</span>\n            </label>\n            <div class=\'inline-control\'\n                 ng-class="{divDisabled: vm.ngDisabled}">\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="true"\n                       ng-model="vm.element.PropertySet__c.Language" />\n                <button id="openOmniFormBtn"\n                        class="btn btn-link pull-right"\n                        ng-click="vm.openReusableScript($event)">\n                    <i class="icon icon-v-link"></i>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n\n</form>\n'),$templateCache.put("propertysets/action/set-values-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Element Value Map</span>\n            </label>\n            <div class="row set-error-value">\n                <div class="col-md-4">\n                    <label>Element Name</label>\n                </div>\n                <div class="col-md-3 type-col text-center">\n                    <label>Type</label>\n                </div>\n                <div class="col-md-4">\n                    <label>Value</label>\n                </div>\n                <div class="col-md-1">\n                    <label>&nbsp;</label>\n                </div>\n            </div>\n            <div class="row set-error-value"\n                 ng-repeat="property in vm.elementValueMap track by $index">\n                <div class="col-md-4">\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="property.key"\n                           ng-change="vm.updateKeyValueProperty()"\n                           bs-options="name for name in vm.elementNames()"\n                           bs-typeahead\n                           data-min-length="0" />\n                </div>\n                <div class="col-md-3 type-col text-center">\n                    <span>{{ property.key | getTypeForElement }}</span>\n                </div>\n                <div class="col-md-4 faux-field"\n                     ng-class="{divDisabled: (property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()}">\n                    <button type="button"\n                            class="btn btn-default faux-field"\n                            ng-disabled="(property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editAsExpression(property, false)"><i>fx</i></button>\n                    <input type="text"\n                           class="form-control faux-field"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="property.value"\n                           ng-if="property.type !== \'object\' && property.type !== \'array\'"\n                           data-min-length="0" />\n                    <input type="text"\n                           class="form-control faux-field"\n                           value="{{property.type == \'object\' ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                           ng-if="property.type == \'object\' || property.type == \'array\'"\n                           disabled="disabled"\n                           readonly="readonly" />\n                </div>\n                <div class="col-md-1">\n                    <button type="button"\n                            class="btn btn-link trash"\n                            ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.deleteKeyValue(property)"\n                            title="Delete entire element, type and value">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </div>\n            <button type="button"\n                    class="btn btn-default"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewKeyValue()">{{ ::\'OmniDesSetErrorValuePair\' | localize:\'+ Add New\n                Value\' }}</button>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <div class="row propertyRow">\n                <div class="col-md-12 checkbox">\n                    <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-model="vm.element.PropertySet__c.wpm"\n                                    label="Window Post Message?"\n                                    help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n                </div>\n            </div>\n        \n            <div class="row propertyRow">\n                <div class="col-md-12 checkbox">\n                    <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                    ng-model="vm.element.PropertySet__c.ssm"\n                                    label="Session Storage Message?"\n                                    help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n                </div>\n            </div>\n            <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n                <div class="col-md-12 checkbox">\n                    <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                        label="LWC PubSub Message?"\n                        help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n                    </checkbox-prop>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/navigate-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.label"\n                 label="Label"\n                 help-text="If the Navigate Action is embedded within a step, the text displayed in the button or link."></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow"\n       ng-if="vm.element.Name === \'CANCEL\'">\n    <div class="col-md-12">\n      <h4>Cancel Options</h4>\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.showCancelPrompt"\n                     ng-init="vm.element.PropertySet__c.showCancelPrompt = (vm.element.PropertySet__c.showCancelPrompt === undefined? true: vm.element.PropertySet__c.showCancelPrompt)"\n                     label="Prompt before cancel?"\n                     help-text="When true the user will be prompted to confirm before canceling."></checkbox-prop>\n    </div>\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled() || !vm.element.PropertySet__c.showCancelPrompt"\n                 placeholder="{{vm.defaultCancelMessage}}"\n                 ng-model="vm.element.PropertySet__c.cancelMessage"\n                 label="Cancel Message"\n                 help-text="This text is shown in a dialog to confirm that the user wishes to cancel the OmniScript."></text-prop>\n      <hr>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Button Variant</span>\n      </label>\n      <div>\n        <select name="variant"\n                id="variant"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.variant"\n                ng-options="option as option for option in vm.variantOptions">\n        </select>\n      </div>\n    </div>\n  </div>\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.iconName"\n                 label="Icon Name"\n                 help-text="Name of icon sprite sheet and icon name separated by a colon. Example: <code>utility:downarrow</code>. See documentation for details."\n                 documentation="https://lightningdesignsystem.com/icons/"></text-prop>\n    </div>\n    <div class="col-md-6">\n      <div ng-if="vm.element.PropertySet__c.iconName">\n        <label>\n          <span>Icon Position</span>\n        </label>\n        <div>\n          <select name="variant"\n                  id="variant"\n                  class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-model="vm.element.PropertySet__c.iconPosition"\n                  ng-options="option as option for option in vm.iconPositionOptions">\n          </select>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>PageReference type</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The type of page reference to be navigated to when initiated. See documentation for details.\'"\n           data-container=".container"\n           data-type="info"></i>\n        <a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.reference_page_reference_type"\n           target="_blank">Documentation</a>\n      </label>\n      <div>\n        <select name="targetType"\n                id="targetType"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.targetType"\n                ng-options="option as option for option in vm.targetTypeOptions">\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Replace?</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'In lightning experience, if replace is set to yes, the pageReference replaces the existing entry in the browser history, and the user will not be able to navigate back to the current.<br/><br/>In a console context if replace is set to yes, the target will replace the current tab, otherwise a new subtab will be opened.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="targetType"\n                id="targetType"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.replace"\n                ng-options="option.value as option.label for option in vm.replaceOptions">\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <div ng-switch="vm.element.PropertySet__c.targetType">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="App"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="App Name"\n                   help-text="Name of the App to navigate to. In the format of: <code>ns__appDeveloperName</code> or <code>appId</code>"></text-prop>\n        \x3c!-- component --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Component"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="Component Name"\n                   help-text="Name of the component to navigate to. In the format of: <code>ns__componentName</code>"></text-prop>\n        \x3c!-- ka --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Knowledge Article"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="Article URL"\n                   help-text="The value of the urlName field on the target KnowledgeArticleVersion record. The urlName is the article\'s URL."></text-prop>\n        \x3c!-- Named Page --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Named Page|Community Named Page"\n                   ng-switch-when-separator="|"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="Page Name"\n                   help-text="The unique name of the page."></text-prop>\n        \x3c!-- Nav Item --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Navigation Item"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="Tab Name"\n                   help-text="The unique name of the CustomTab."></text-prop>\n        \x3c!-- Object --\x3e\n        \x3c!-- Record --\x3e\n        \x3c!-- Record Relationship--\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Object|Record|Record Relationship"\n                   ng-switch-when-separator="|"\n                   ng-model="vm.element.PropertySet__c.targetName"\n                   label="Object API Name"\n                   help-text="The API name of the standard or custom object. For custom objects that are part of a managed package, prefix the custom object with ns__."></text-prop>\n        \x3c!-- Web Page --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Web Page"\n                   ng-model="vm.element.PropertySet__c.targetUrl"\n                   label="Web URL"\n                   help-text="The URL of the page you are navigating to."></text-prop>\n      </div>\n\n    </div>\n    <div class="col-md-6">\n      <div ng-switch="vm.element.PropertySet__c.targetType">\n        \x3c!-- App --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="App"\n                   ng-model="vm.element.PropertySet__c.targetParams"\n                   label="Target Page"\n                   help-text=\'An optional page reference to pass to the App being navigated to. For example <code>{"type":"standard__namedPage","attributes":{"pageName":"home"}}</code>\'></text-prop>\n        \x3c!-- component --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Component|Current Page|Navigation Item|Named Page|Community Named Page"\n                   ng-switch-when-separator="|"\n                   ng-model="vm.element.PropertySet__c.targetParams"\n                   label="Target Params"\n                   help-text="State parameters passed to the target context, in the form of a url query string. Parameter names must be prefixed with a namespace, for example \'c__\'."></text-prop>\n        \x3c!-- ka --\x3e\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Knowledge Article"\n                   ng-model="vm.element.PropertySet__c.targetArticleType"\n                   label="Article Type"\n                   help-text="The articleType API name of the Knowledge Article record. In Communities, articleType is ignored."></text-prop>\n        \x3c!-- Login --\x3e\n        <div ng-switch-when="Login">\n          <label>\n            <span>Login Action</span>\n          </label>\n          <div>\n            <select name="targetAction"\n                    id="targetAction"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.loginAction"\n                    ng-options="option as option for option in vm.loginActionOptions">\n            </select>\n          </div>\n        </div>\n        \x3c!-- Object --\x3e\n        <div ng-switch-when="Object">\n          <label>\n            <span>Action</span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="\'The action name to invoke. Valid values include home, list, and new. In Communities, list and home are the same.\'"\n               data-container=".container"\n               data-type="info"></i>\n          </label>\n          <div>\n            <select name="targetAction"\n                    id="targetAction"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.objectAction"\n                    ng-options="option as option for option in vm.objectActionOptions">\n            </select>\n          </div>\n        </div>\n        \x3c!-- Record --\x3e\n        <div ng-switch-when="Record">\n          <label>\n            <span>Action</span>\n            <i class="icon icon-v-information-line"\n               data-html="true"\n               bs-tooltip="\'The action name to invoke. Valid values include clone, edit, and view. Communities doesn’t support the values clone or edit.\'"\n               data-container=".container"\n               data-type="info"></i>\n          </label>\n          <div>\n            <select name="targetAction"\n                    id="targetAction"\n                    class="form-control"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.recordAction"\n                    ng-options="option as option for option in vm.recordActionOptions">\n            </select>\n          </div>\n        </div>\n\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Record Relationship"\n                   ng-model="vm.element.PropertySet__c.targetRelationshipName"\n                   label="Relationship API Name"\n                   help-text="The API name of the object’s relationship field."></text-prop>\n      </div>\n    </div>\n  </div>\n\n  <div ng-if="vm.element.PropertySet__c.targetType === \'Vlocity OmniScript\'"\n       class="row propertyRow">\n    <div class="col-md-4">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 label="LWC OmniScript"\n                 ng-model="vm.element.PropertySet__c.targetLWC">\n      </text-prop>\n    </div>\n    <div class="col-md-4">\n      <label>\n        <span>OmniScript Layout</span>\n      </label>\n      <div>\n        <select name="targetAction"\n                id="targetAction"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.targetLWCLayout"\n                ng-options="option as option for option in vm.targetLWCLayoutOptions">\n        </select>\n      </div>\n    </div>\n    <div class="col-md-4">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 label="OmniScript Prefill"\n                 help-text="State parameters passed to the target context, in the form of a url query string. Parameter names must be prefixed with a namespace, for example \'c__\'."\n                 ng-model="vm.element.PropertySet__c.targetLWCParams">\n      </text-prop>\n    </div>\n  </div>\n\n  <div ng-if="vm.element.PropertySet__c.targetType !== \'Vlocity OmniScript\'"\n       class="row propertyRow">\n    <div class="col-md-6">\n      <div ng-switch="vm.element.PropertySet__c.targetType">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Record|Record Relationship"\n                   ng-switch-when-separator="|"\n                   ng-model="vm.element.PropertySet__c.targetId"\n                   label="Record Id"\n                   required\n                   help-text="The 18 character record ID. (Supports merge fields.)"></text-prop>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <div ng-switch="vm.element.PropertySet__c.targetType">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-switch-when="Object"\n                   ng-model="vm.element.PropertySet__c.targetFilter"\n                   label="Filter Name"></text-prop>\n      </div>\n\n    </div>\n  </div>\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="validationRequired"\n                id="validationRequired"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Messaging Framework"\n              ng-if="vm.scriptElement.IsLwcEnabled__c"\n              help-text="Enable and configure messaging">\n    <div class="row propertyRow">\n      <div class="col-md-12 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.wpm"\n                       label="Window Post Message?"\n                       help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-12 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.ssm"\n                       label="Session Storage Message?"\n                       help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-12 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.pubsub"\n                       label="LWC PubSub Message?"\n                       help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n        </checkbox-prop>\n      </div>\n    </div>\n\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::"OmniDesCondView" | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/action/review-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Button Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.previousLabel"\n                           label="Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.previousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.nextLabel"\n                           label="Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.nextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="Skip Elements"\n                             add-btn-label="Add Element"\n                             ng-model="vm.element.PropertySet__c.skipElements"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/post-to-object-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.useRest"\n                           label="Use Rest"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useRest == false">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteClass"\n                       label="Remote Class"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteMethod"\n                       label="Remote Method"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useRest">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restPath"\n                       label="Rest Path"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restMethod"\n                       label="Rest Method"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.postNameTemplate"\n                       label="Post Name Template"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Response Transformations">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/done-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Option Source</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The done action will navigate the user to the selected option.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.type">\n                    <option ng-value="null"></option>\n                    <option value="Redirect">Redirect</option>\n                    <option value="SObject">SObject</option>\n                    <option value="URL">URL</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.source"\n                       label="Source"\n                       help-text="Enter a URL or a SObject ID."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.redirectPageName"\n                       label="Redirect Page Name"\n                       help-text="Upon success, the script navigates to this page"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                       label="Redirect Template URL"\n                       help-text="HTML template of the redirect page"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.consoleTabLabel"\n                       label="Console Tab Label"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.Outcome"\n                       label="Outcome"\n                       help-text="If Tracking is enabled, the value of this field is used to track the outcome of the OmniScript. For example, &quot;resolved to Case&quot;"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                                ng-model="vm.element.PropertySet__c.wpm"\n                                label="Window Post Message?"\n                                help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n            </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.ssm"\n                            label="Session Storage Message?"\n                            help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                            script-element="vm.scriptElement"\n                            ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            rows="5"\n                            ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::"OmniDesCondView" | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                    parent="vm.element.PropertySet__c.show.group.rules"\n                    rule="vm.element.PropertySet__c.show"\n                    root-rule="vm.element.PropertySet__c.show"\n                    element-names="vm.elementNames()"\n                    is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/matrix-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    Matrix Input Parameters\n                    <i class="icon icon-v-information-line"\n                       bs-tooltip=" :: \'OmniDesTipInputParam\' | localize "\n                       data-container=".container"\n                       data-type="info"></i>\n                    <button class="btn btn-default"\n                            type="button"\n                            ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.addNewInputParameter(vm.element.PropertySet__c[\'matrix Input Parameters\'])">\n                        <i class="icon icon-v-plus-line"></i>\n                        {{ ::\'OmniDesAddInputParam\' | localize }}\n                    </button>\n                </div>\n                <table class="table">\n                    <thead>\n                        <th>{{ ::\'OmniDesDataSource\' | localize }}\n                            <i class="icon icon-v-information-line"\n                               bs-tooltip=" :: \'OmniDesTipDataSource\' | localize "\n                               data-container=".container"\n                               data-type="info"></i>\n                        </th>\n                        <th>{{ ::\'OmniDesFilterValue\' | localize }}</th>\n                        <th width="50px">&nbsp;</th>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat="inputParam in vm.element.PropertySet__c[\'matrix Input Parameters\'] track by $index">\n                            <td>\n                                <input type="text"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       class="form-control input-sm"\n                                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                       ng-model="inputParam.name"\n                                       bs-options="name for name in vm.elementNames()"\n                                       bs-typeahead\n                                       data-min-length="0" />\n                            </td>\n                            <td>\n                                <input type="text"\n                                       ng-disabled="vm.scriptElement.isDisabled()"\n                                       class="form-control input-sm"\n                                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                                       ng-model="inputParam.value" />\n                            </td>\n                            <td>\n                                <button type="button"\n                                        class="btn btn-link"\n                                        ng-if="!vm.scriptElement.isDisabled()"\n                                        ng-click="vm.deleteInputParameter(inputParam, vm.element.PropertySet__c[\'matrix Input Parameters\'])">\n                                    <i class="icon icon-v-trash"></i>\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Matrix Name</span>\n            </label>\n            <div>\n                <select name="matrixName"\n                        id="matrixName"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.remoteOptions.matrixName"\n                        ng-options="matrix as matrix for matrix in vm.matrixNames">\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Post-Transform DataRaptor Interface</span>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Transform"\n                               include-input-json="true"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n    </div>\n\n    <key-value-prop label="Remote Options"\n                    ng-model="vm.element.PropertySet__c.remoteOptions"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    ignore-keys="[\'matrixName\', \'postTransformBundle\']"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    <key-value-prop label="Default Matrix Result"\n                    ng-model="vm.element.PropertySet__c.defaultMatrixResult"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_defaultMatrixResult\'}}"></key-value-prop>\n\n    <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.executionDateTime"\n               label="Execution Date Time"\n               help-text="Defaults to Current Date/Time if not set. Supports passing in Date/Time from the OmniScript Data JSON."></text-prop>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n\n    <group-prop label="Response Transformations">\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n\n        <div class="col-md-6">\n            <label>\n                <span>Remote Timeout (ms)</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteTimeout" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/remote-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Remote Properties" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'postTransformBundle\', \'preTransformBundle\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n        <key-value-prop label="Extra Payload"\n                        ng-model="vm.element.PropertySet__c.extraPayload"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n\n        <div class="row propertyRow" ng-show="vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyExtraPayload"\n                               label="Send Only Extra Payload"\n                               help-text="When checked, only the configured Extra Payload key/value pairs will be sent."></checkbox-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"\n                                   ng-change="vm.unsetInvokeModeIfNeeded()"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"\n                                   ng-change="vm.unsetInvokeModeIfNeeded()"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6"\n             ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6"\n             ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Invoke Mode</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'{{\'OmniDesTipInvokeModeRemote\' | localize}}\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="invokeMode"\n                        id="invokeMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.invokeMode"\n                        ng-change="vm.unsetInvokeModeIfNeeded()">\n                    <option ng-value="undefined">Default</option>\n                    <option value="noBlock">Non-Blocking</option>\n                    <option value="fireAndForget">Fire and Forget</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.toastComplete"\n                           label="Toast Completion"\n                           help-text="On completion, this action will provide a Toast Notification"></checkbox-prop>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/rest-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restPath"\n                       label="HTTP Path"\n                       help-text="The request URL of the API. This can contain merge fields. Example: www.456demo.com/names/%mergeField%"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restMethod"\n                       label="HTTP Method"\n                       help-text="The HTTP method that will be sent with the request. The methods that can be sent are: GET, POST, PUT, and DELETE"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Endpoint Type</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The HTTP action&amp;apos;s endpoint type.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.type">\n                    <option value="Apex">Apex</option>\n                    <option value="Named Credential">Named Credential</option>\n                    <option value="SOAP/XML">SOAP/XML</option>\n                    <option value="Web">Web</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6"\n             ng-show="vm.element.PropertySet__c.type === \'Named Credential\' || vm.element.PropertySet__c.type === \'SOAP/XML\'">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.namedCredential"\n                       label="Named Credential"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="Rest Options">\n        <key-value-prop label="Headers"\n                        ng-model="vm.element.PropertySet__c.restOptions.headers"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Header"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_restOptions_headers\'}}"></key-value-prop>\n        <key-value-prop label="Params"\n                        ng-model="vm.element.PropertySet__c.restOptions.params"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Param"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_restOptions_params\'}}"></key-value-prop>\n\n        <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.URIEncode"\n                               label="Encode URI"></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.cache"\n                               label="Cache"></checkbox-prop>\n            </div>\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.withCredentials"\n                               label="With Credentials"></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.sendBody"\n                               label="Send Body"></checkbox-prop>\n            </div>\n            <div class="col-md-6">\n                <div class="col-md-12">\n                    <label>\n                        <span>Timeout (ms)</span>\n                    </label>\n                    <div>\n                        <input type="number"\n                               class="form-control"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.restOptions.timeout" />\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <key-value-prop label="Extra Payload"\n                        help-text="Additional data that is sent to the OmniScript in the root of the Data JSON"\n                        ng-model="vm.element.PropertySet__c.extraPayload"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n\n        <div class="row propertyRow" \n             ng-show="vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyExtraPayload"\n                               label="Send Only Extra Payload"\n                               help-text="When checked, only the configured Extra Payload key/value pairs will be sent."></checkbox-prop>\n            </div>\n        </div> \n    </group-prop>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.type !== \'SOAP/XML\'" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.type === \'SOAP/XML\'" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.xmlPreTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   input-type="XML"\n                                   output-type="XML"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.xmlPostTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   input-type="XML"\n                                   output-type="XML"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/calculation-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="Remote Properties" is-open="true">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteClass"\n                           label="Remote Class"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteMethod"\n                           label="Remote Method"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteOptions.configurationName"\n                           label="Configuration Name"\n                           help-text="Calculation Procedure Name"></text-prop>\n            </div>\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.remoteOptions.includeInputs"\n                               label="Include Inputs"\n                               help-text="When checked, the response from the calculation procedure will include input variables. "></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.remoteOptions.matchInputVariables"\n                               label="Match Input Variables"\n                               help-text="A debugging tool that checks if the input data has all the input variables. If an input variable is missing, an exception will be thrown."></checkbox-prop>\n\n            </div>\n            <div class="col-md-6">\n            </div>\n        </div>\n\n        <key-value-prop label="Remote Options"\n                        ng-model="vm.element.PropertySet__c.remoteOptions"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        ignore-keys="[\'configurationName\',\'includeInputs\',\'matchInputVariables\', \'postTransformBundle\', \'preTransformBundle\']"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n        <key-value-prop label="Extra Payload"\n                        ng-model="vm.element.PropertySet__c.extraPayload"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n\n        <div class="row propertyRow" \n             ng-show="vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.sendOnlyExtraPayload"\n                               label="Send Only Extra Payload"\n                               help-text="When checked, only the configured Extra Payload key/value pairs will be sent."></checkbox-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send/Response Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.pubsub"\n                            label="LWC PubSub Message?"\n                            help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/dataraptor-extract-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>DataRaptor Interface</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                         class="row"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.PropertySet__c.bundle"\n                         type="Turbo Extract"\n                         input-type="JSON"\n                         output-type="JSON"\n                         ng-if="vm.element.Type__c.label==\'DataRaptor Turbo Action\'">\n      </dataraptor-select>\n      <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                         class="row"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.PropertySet__c.bundle"\n                         type="Extract"\n                         input-type="JSON"\n                         output-type="JSON"\n                         ng-if="vm.element.Type__c.label==\'DataRaptor Extract Action\'">\n      </dataraptor-select>\n    </div>\n    <div class="col-md-6">\n      <label>\n        <span>Remote Timeout (ms)</span>\n      </label>\n      <div>\n        <input type="number"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.remoteTimeout" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.ignoreCache"\n                     label="Ignore Cache"></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="panel panel-default">\n        <div class="panel-heading">\n          {{ ::\'OmniDesInputParam\' | localize }}\n          <i class="icon icon-v-information-line"\n             bs-tooltip=":: \'OmniDesTipInputParam\' | localize"\n             data-container=".container"\n             data-type="info"></i>\n          <button class="btn btn-default"\n                  type="button"\n                  ng-if="!vm.scriptElement.isDisabled()"\n                  ng-click="vm.addNewInputParameter(vm.element.PropertySet__c[\'dataRaptor Input Parameters\'])">\n            <i class="icon icon-v-plus-line"></i>\n            {{ ::\'OmniDesAddInputParam\' | localize }}\n          </button>\n        </div>\n        <table class="table">\n          <thead>\n            <th>{{ ::\'OmniDesDataSource\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip=" :: \'OmniDesTipDataSource\' | localize "\n                 data-container=".container"\n                 data-type="info"></i>\n            </th>\n            <th>{{ ::\'OmniDesFilterValue\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip="\'Node that will be passed to DataRaptor to extract data.\'"\n                 data-container=".container"\n                 data-type="info"></i>\n            </th>\n            <th width="50px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr ng-repeat="inputParam in vm.element.PropertySet__c[\'dataRaptor Input Parameters\'] track by $index">\n              <td>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control input-sm"\n                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                       ng-model="inputParam.element"\n                       bs-options="name for name in vm.elementNames()"\n                       bs-typeahead\n                       data-min-length="0" />\n              </td>\n              <td>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control input-sm"\n                       ng-model-options="{ debounce: {\'default\': 500, \'blur\': 0} }"\n                       ng-model="inputParam.inputParam" />\n              </td>\n              <td>\n                <button type="button"\n                        class="btn btn-link"\n                        ng-if="!vm.scriptElement.isDisabled()"\n                        ng-click="vm.deleteInputParameter(inputParam, vm.element.PropertySet__c[\'dataRaptor Input Parameters\'])">\n                  <i class="icon icon-v-trash"></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="User Messages"\n              ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureNextLabel"\n                   label="Failure Next Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                   label="Failure Abort Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                   label="Failure Go Back Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                   label="Failure Abort Message"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableActionMessage"\n                       ng-show="vm.scriptElement.IsLwcEnabled__c"\n                       label="Enable Action Message"\n                       help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                   label="Post Message"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                       ng-show="vm.element.parent() === vm.scriptElement"\n                       label="Enable Default Abort"\n                       help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.inProgressMessage"\n                   help-text="Message that is displayed along with the spinner when action is in progress."\n                   label="Action Message"></text-prop>\n      </div>\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   label="Post Message"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Redirect Properties">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPageName"\n                   label="Redirect Page Name"\n                   help-text="Upon success, the script navigates to this page"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                   label="Redirect Template URL"\n                   help-text="HTML template of the redirect page"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                   label="Redirect Next Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Next Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectNextWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                   label="Redirect Previous Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Previous Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n  </group-prop>\n\n\n  <group-prop label="Response Transformations">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Error Messages"\n              help-text="Enter custom error messages that will replace the default error messages.">\n    <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                          ng-disabled="vm.scriptElement.isDisabled()">\n    </errormessage-handler>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step"\n                  ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                      ng-disabled="vm.scriptElement.isDisabled()"\n                                      persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.wpm"\n                     label="Window Post Message?"\n                     help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.ssm"\n                     label="Session Storage Message?"\n                     help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n    </div>\n  </div>\n  <div ng-if="vm.scriptElement.IsLwcEnabled__c"\n       class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.pubsub"\n                     label="LWC PubSub Message?"\n                     help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n      </checkbox-prop>\n    </div>\n  </div>\n  <key-value-prop label="Message"\n                  ng-model="vm.element.PropertySet__c.message"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  key-label="Key"\n                  value-label="Value"\n                  add-btn-label="Add New Key/Value Pair"\n                  id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/action/email-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.useTemplate"\n                           label="Use Template"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-6">\n            <label>\n                <span>Select Email Template</span>\n            </label>\n            <div>\n                <input type="text"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       class="form-control"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.emailTemplateName"\n                       bs-options="option.DeveloperName as option.DeveloperName for option in vm.emailTemplates"\n                       bs-typeahead\n                       data-watch-options="true"\n                       data-filter="false"\n                       data-min-length="0"/>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.emailTargetObjectId"\n                       label="Email Target Object Id"\n                       help-text="The email recipient\'s ID. The recipient must be a user, contact, or lead."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailTemplateInformation.whatId"\n                       label="What Id"\n                       help-text="When a contact is designated as the email recipient, an additional object ID can be passed to the emailn template. The objects that can be included are: Account, Asset, Campaign, Case, Contract, Opportunity, Order, Product, Solution, and Custom."></text-prop>\n        </div>\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.emailTemplateInformation.saveAsActivity"\n                           label="Save As Activity"\n                           help-text="Records email as a Salesforce Activity on the Email Target Object Id record."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="To Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.toAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="CC Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.ccAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <array-list-prop label="BCC Email Address List"\n                             add-btn-label="Add Recipient"\n                             ng-model="vm.element.PropertySet__c.emailInformation.bccAddressList"\n                             ng-disabled="vm.scriptElement.isDisabled()"></array-list-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.emailInformation.emailSubject"\n                       label="Email Subject"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Email Body</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.PropertySet__c.emailInformation.emailBody"></textarea>\n            </div>\n        </div>\n    </div>\n\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.emailInformation.setHtmlBody"\n                           label="Set HTML Body"></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.OrgWideEmailAddress"\n                       label="Org Wide Email Address"\n                       help-text="Specify a valid Org Wide Email address, otherwise the From will default to the User email address."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.fileAttachments"\n                       label="File Attachments from OmniScript"\n                       help-text="specify the merge field that contains a single or list of Salesforce Attachment Ids in the Data JSON."></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.docList"\n                       label="Document Attachments From OmniScript"\n                       help-text="specify the merge field that contains a single or list of Salesforce Document Ids in the Data JSON."></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.contentVersionList"\n                       label="Content Versions"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Select Document Attachments</span>\n            </label>\n            <div>\n                <select name="staticDocList"\n                        id="staticDocList"\n                        class="form-control"\n                        style="height: 100px; overflow-y: scroll;"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.staticDocList"\n                        multiple="multiple"\n                        ng-options="option.DeveloperName as option.DeveloperName for option in vm.emailDocuments">\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="!vm.element.PropertySet__c.useTemplate">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.attachmentList"\n                       label="Attachment List"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Remote Properties">\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <label>\n                    <span>Remote Timeout (ms)</span>\n                </label>\n                <div>\n                    <input type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.remoteTimeout" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::"OmniDesCondView" | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/integration-procedure-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Integration Procedure</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'The Type and SubType of an Integration Procedure.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div class="row">\n        <div class="col-xs-10">\n          <select class="form-control"\n                  ng-model="vm.element.PropertySet__c.integrationProcedureKey"\n                  ng-disabled="vm.scriptElement.isDisabled()">\n            <option label=""\n                    value=""></option>\n            <option ng-repeat="name in vm.integrationProceduresArray track by $index"\n                    ng-value="name"\n                    ng-bind="name"></option>\n            <option ng-value="vm.element.PropertySet__c.integrationProcedureKey"\n                    ng-bind="vm.element.PropertySet__c.integrationProcedureKey"\n                    ng-if="vm.element.PropertySet__c.integrationProcedureKey&&!vm.integrationProceduresArray.includes(vm.element.PropertySet__c.integrationProcedureKey)"></option>\n          </select>\n        </div>\n        <div class="col-xs-1">\n          <button ng-attr-id="{{vm.idPrefix + \'_openBtn\'}}"\n                  class="btn btn-link pull-right"\n                  ng-click="vm.openIntegrationProcedure($event)">\n            <i class="icon icon-v-link"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Remote Properties"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-12">\n        <label>\n          <span>Remote Timeout (ms)</span>\n        </label>\n        <div>\n          <input type="number"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.remoteTimeout" />\n        </div>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteOptions.useFuture"\n                       label="Use Future"\n                       help-text="Runs the integration procedure as a Salesforce future method."></checkbox-prop>\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteOptions.chainable"\n                       ng-change="vm.unsetInvokeModeIfNeeded()"\n                       label="Is Chainable?"\n                       class="checkbox"\n                       help-text="Allows the Integration Procedure to run as multiple transactions. Use for long-running or Apex CPU-intensive processes that may otherwise timeout."></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6 checkbox">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.useContinuation"\n                       label="Use Continuation"\n                       help-text="For long-running integration procedures, enables the use of Salesforce continuation to ensure that the integration procedure is not subject to Salesforce timeout governor limits."></checkbox-prop>\n\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteOptions.useQueueable"\n                       label="Use Queueable"\n                       class="checkbox"\n                       help-text="Enqueues the integration procedure in the job queue and returns the job id."></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteOptions.queueableChainable"\n                       ng-change="vm.unsetInvokeModeIfNeeded()"\n                       label="Is Queueable Chainable?"\n                       class="checkbox"\n                       help-text="Allows the Integration Procedure to run in Queueable context. Use for large number of SOQL, Heap Size or Apex CPU-intensive processes that may otherwise timeout."></checkbox-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <label>\n          <span>Pre-Transform DataRaptor Interface</span>\n        </label>\n        <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_preTransformBundle\'}}"\n                           class="row"\n                           script-element="vm.scriptElement"\n                           ng-model="vm.element.PropertySet__c.remoteOptions.preTransformBundle"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           type="Transform"\n                           include-input-json="true"\n                           input-type="JSON"\n                           output-type="JSON"></dataraptor-select>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Post-Transform DataRaptor Interface</span>\n        </label>\n        <dataraptor-select id-prefix="{{vm.idPrefix + \'remoteOptions_postTransformBundle\'}}"\n                           class="row"\n                           script-element="vm.scriptElement"\n                           ng-model="vm.element.PropertySet__c.remoteOptions.postTransformBundle"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           type="Transform"\n                           include-input-json="true"\n                           input-type="JSON"\n                           output-type="JSON"></dataraptor-select>\n      </div>\n    </div>\n\n    <key-value-prop label="Remote Options"\n                    ng-model="vm.element.PropertySet__c.remoteOptions"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    ignore-keys="[\'useFuture\',\'useQueueable\',\'chainable\', \'postTransformBundle\', \'preTransformBundle\']"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n    <key-value-prop label="Extra Payload"\n                    help-text="Additional data that is sent to the Integration Procedure in the root of the Data JSON"\n                    ng-model="vm.element.PropertySet__c.extraPayload"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_extraPayload\'}}"></key-value-prop>\n\n    <div class="row propertyRow" \n         ng-show="vm.scriptElement.IsLwcEnabled__c">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendOnlyExtraPayload"\n                           label="Send Only Extra Payload"\n                           help-text="When checked, only the configured Extra Payload key/value pairs will be sent."></checkbox-prop>\n        </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="User Messages"\n              ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureNextLabel"\n                   label="Failure Next Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                   label="Failure Abort Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                   label="Failure Go Back Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                   label="Failure Abort Message"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableActionMessage"\n                       ng-show="vm.scriptElement.IsLwcEnabled__c"\n                       label="Enable Action Message"\n                       help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                   label="Post Message"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                       ng-show="vm.element.parent() === vm.scriptElement"\n                       label="Enable Default Abort"\n                       help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.inProgressMessage"\n                   help-text="Message that is displayed along with the spinner when action is in progress."\n                   label="Action Message"></text-prop>\n      </div>\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   label="Post Message"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Redirect Properties">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPageName"\n                   label="Redirect Page Name"\n                   help-text="Upon success, the script navigates to this page"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                   label="Redirect Template URL"\n                   help-text="HTML template of the redirect page"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                   label="Redirect Next Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Next Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectNextWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                   label="Redirect Previous Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Previous Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Send/Response Transformations">\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONPath"\n                   label="Send JSON Path"\n                   help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.sendJSONNode"\n                   label="Send JSON Node"\n                   help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n      </div>\n    </div>\n\n    \x3c!-- Deprecated in LWC --\x3e\n    <div class="row propertyRow" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n      <div class="col-md-6">\n        <label>\n          <span>Pre-Transform DataRaptor Interface</span>\n        </label>\n        <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                           class="row"\n                           script-element="vm.scriptElement"\n                           ng-model="vm.element.PropertySet__c.preTransformBundle"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           type="Transform"\n                           include-input-json="true"\n                           input-type="JSON"\n                           output-type="JSON"\n                           ng-change="vm.unsetInvokeModeIfNeeded()"></dataraptor-select>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Post-Transform DataRaptor Interface</span>\n        </label>\n        <dataraptor-select id-prefix="{{vm.idPrefix + \'postTransformBundle\'}}"\n                           class="row"\n                           script-element="vm.scriptElement"\n                           ng-model="vm.element.PropertySet__c.postTransformBundle"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           type="Transform"\n                           include-input-json="true"\n                           input-type="JSON"\n                           output-type="JSON"\n                           ng-change="vm.unsetInvokeModeIfNeeded()"></dataraptor-select>\n      </div>\n    </div>\n\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Error Messages"\n              help-text="Enter custom error messages that will replace the default error messages.">\n    <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                          ng-disabled="vm.scriptElement.isDisabled()">\n    </errormessage-handler>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step"\n                  ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                      ng-disabled="vm.scriptElement.isDisabled()"\n                                      persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.wpm"\n                     label="Window Post Message?"\n                     help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.ssm"\n                     label="Session Storage Message?"\n                     help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n    </div>\n  </div>\n  <div ng-if="vm.scriptElement.IsLwcEnabled__c"\n       class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.pubsub"\n                     label="LWC PubSub Message?"\n                     help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n      </checkbox-prop>\n    </div>\n  </div>\n  <key-value-prop label="Message"\n                  ng-model="vm.element.PropertySet__c.message"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  key-label="Key"\n                  value-label="Value"\n                  add-btn-label="Add New Key/Value Pair"\n                  id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n\n  <div class="row propertyRow">\n    <div class="col-md-6"\n         ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n      <label>\n        <span>Invoke Mode</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'{{\'OmniDesTipInvokeModeIP\' | localize}}\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="invokeMode"\n                id="invokeMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.invokeMode"\n                ng-change="vm.unsetInvokeModeIfNeeded()">\n          <option ng-value="undefined">Default</option>\n          <option value="noBlock">Non-Blocking</option>\n          <option value="fireAndForget">Fire and Forget</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.toastComplete"\n                     label="Toast Completion"\n                     help-text="On completion, this action will provide a Toast Notification"></checkbox-prop>\n    </div>\n  </div>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>\n'),$templateCache.put("propertysets/action/dataraptor-post-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>DataRaptor Interface</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               ng-model="vm.element.PropertySet__c.bundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Load"\n                               include-input-json="true"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Remote Timeout (ms)</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteTimeout" />\n            </div>\n        </div>\n    </div>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n\n    <group-prop label="Send Transformations">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        \x3c!-- Deprecated in LWC --\x3e\n        <div class="row propertyRow" ng-if="!vm.scriptElement.IsLwcEnabled__c">\n            <div class="col-md-6">\n                <label>\n                    <span>Post-Transform DataRaptor Interface</span>\n                    <i class="icon icon-v-information-line"\n                        data-html="true"\n                        bs-tooltip="\'Optionally select a DataRaptor Transform interface to run after the Post Action\'"\n                        data-container=".container"\n                        data-type="info"></i>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'_postTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.postTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   type="Transform"\n                                   include-input-json="true"\n                                   input-type="JSON"\n                                   output-type="JSON"></dataraptor-select>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n        <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                              ng-disabled="vm.scriptElement.isDisabled()">\n        </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span><i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/delete-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Delete SObject</span>\n      </label>\n      <div class="panel panel-default vlc-docusign-list">\n        <div class="panel-heading"\n             style="overflow: auto;">\n          <button class="btn btn-default"\n                  type="button"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  ng-click="vm.addDeleteSObjectMap()"\n                  style="float: right;">\n            <i class="icon icon-v-plus-line"></i>{{::"IntProcAddSObj" | localize }}\n          </button>\n        </div>\n        <table class="table">\n          <div class="panel panel-default vlc-docusign-list"\n               style="margin-bottom:0px;">\n            <thead class="vlc-docusign-list-head">\n              <th width="60px">{{::"IntProcAllOrNone" | localize }}\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'IntProcAllOrNoneTooltip\' | localize "\n                   data-container=".container"\n                   data-type="info">\n                </i>\n              </th>\n              <th>{{::"IntProcDelType" | localize }}\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'The type of object that will be deleted.\'"\n                   data-container=".container"\n                   data-type="info">\n              </th>\n              <th>{{::"IntProcDelId" | localize }}</th>\n              <th width="30px">&nbsp;</th>\n            </thead>\n          </div>\n          <tbody class="vlc-docusign-tbody-omni">\n            <tr ng-repeat="map in vm.element.PropertySet__c.deleteSObject">\n              <td>\n                <input type="checkbox"\n                       class="form-element vlc-slds-checkbox"\n                       ng-model="map.AllOrNone"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       style="width: 50px" />\n              </td>\n              <td>\n                <select class="form-control"\n                        id="selectsObject_ctrl"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="map.Type"\n                        ng-options="object.name as object.name for object in vm.sobjectTypes"></select>\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="map.Id">\n              </td>\n              <td class="vlc-delete-cell">\n                <span class="trash-icon icon-v-trash"\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteDeleteSObjectMap($index)"></span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <group-prop label="Error Messages"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.entityIsDeletedMessage"\n                   label="Entity Is Deleted Message"\n                   help-text="Message that will display when the object has been deleted."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.invalidIdMessage"\n                   label="Invalid Id Message"\n                   help-text="Message that will display when an invalid Id has been sent."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.deleteFailedMessage"\n                   label="Delete Failed Message"\n                   help-text="Message that will display when the action fails to delete the object."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.configurationErrorMessage"\n                   label="Configuration Error Message"></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Confirmation Modal"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.confirm"\n                       label="Confirm"></checkbox-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.remoteConfirmMsg"\n                   label="Confirmation Dialog Message"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.subLabel"\n                   label="Confirm Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.cancelLabel"\n                   label="Cancel Label"></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Response Transformations"\n              is-open="true">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONPath"\n                   label="Response JSON Path"\n                   help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.responseJSONNode"\n                   label="Response JSON Node"\n                   help-text="Specify a new name for the parent node in the response."></text-prop>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="User Messages"\n              ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureNextLabel"\n                   label="Failure Next Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                   label="Failure Abort Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                   label="Failure Go Back Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                   label="Failure Abort Message"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableActionMessage"\n                       ng-show="vm.scriptElement.IsLwcEnabled__c"\n                       label="Enable Action Message"\n                       help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                   label="Post Message"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                       ng-show="vm.element.parent() === vm.scriptElement"\n                       label="Enable Default Abort"\n                       help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.inProgressMessage"\n                   help-text="Message that is displayed along with the spinner when action is in progress."\n                   label="Action Message"></text-prop>\n      </div>\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   label="Post Message"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Redirect Properties">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPageName"\n                   label="Redirect Page Name"\n                   help-text="Upon success, the script navigates to this page"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                   label="Redirect Template URL"\n                   help-text="HTML template of the redirect page"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                   label="Redirect Next Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Next Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectNextWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                   label="Redirect Previous Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Previous Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n  </group-prop>\n\n  <key-value-prop label="Remote Options"\n                  ng-model="vm.element.PropertySet__c.remoteOptions"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  key-label="Key"\n                  value-label="Value"\n                  add-btn-label="Add New Key/Value Pair"\n                  id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_remoteOptions\'}}"></key-value-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Remote Timeout (ms)</span>\n      </label>\n      <div>\n        <input type="number"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.remoteTimeout" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6"\n         ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step"\n                  ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                      ng-disabled="vm.scriptElement.isDisabled()"\n                                      persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.wpm"\n                     label="Window Post Message?"\n                     help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.ssm"\n                     label="Session Storage Message?"\n                     help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n    </div>\n  </div>\n  <div ng-if="vm.scriptElement.IsLwcEnabled__c"\n       class="row propertyRow">\n    <div class="col-md-12 checkbox">\n      <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                     ng-model="vm.element.PropertySet__c.pubsub"\n                     label="LWC PubSub Message?"\n                     help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n      </checkbox-prop>\n    </div>\n  </div>\n  <key-value-prop label="Message"\n                  ng-model="vm.element.PropertySet__c.message"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  key-label="Key"\n                  value-label="Value"\n                  add-btn-label="Add New Key/Value Pair"\n                  id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::"OmniDesCondView" | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/action/submit-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.summaryLabel"\n                       label="Summary Label"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Summary Control Width</span>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.summaryControlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restPath"\n                       label="REST Path"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.restMethod"\n                       label="REST Method"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.submitLabel"\n                       label="Submit Label"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Submit Width</span>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.submitWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.reviseLabel"\n                       label="Revise Label"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Revise Width</span>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.reviseWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.confirmationRedirectPageName"\n                       label="Confirmation Redirect Page Name"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.confirmationRedirectTemplateUrl"\n                       label="Confirmation Redirect Template URL"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.postNameTemplate88"\n                       label="Post Name Template"></text-prop>\n        </div>\n    </div>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/dataraptor-transform-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>DataRaptor Interface</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The name of the DataRaptor that will be used by the action.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <dataraptor-select id-prefix="{{vm.idPrefix + \'dataraptorInterface\'}}"\n                               class="row"\n                               script-element="vm.scriptElement"\n                               include-input-json="true"\n                               ng-model="vm.element.PropertySet__c.bundle"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               type="Transform"\n                               input-type="JSON"\n                               output-type="JSON"></dataraptor-select>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Remote Timeout (ms)</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteTimeout" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n          <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="vm.element.PropertySet__c.ignoreCache"\n                         label="Ignore Cache"></checkbox-prop>\n        </div>\n    </div>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n\n    <group-prop label="Send/Response Transformations">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONPath"\n                           label="Response JSON Path"\n                           help-text="To trim the response, specify the node or path to the node in the response that will return to the Data JSON"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.responseJSONNode"\n                           label="Response JSON Node"\n                           help-text="Specify a new name for the parent node in the response."></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6" ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n            <label>\n                <span>Validation Required</span><i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/pdf-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Document</span>\n            </label>\n            <div>\n                <select name="templateName"\n                        id="templateName"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.templateName"\n                        ng-options="pdf.DeveloperName as pdf.DeveloperName for pdf in vm.pdfs">\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Remote Timeout (ms)</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.remoteTimeout" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Display Height</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.displayHeight" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Display Width</span>\n            </label>\n            <div>\n                <input type="number"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.displayWidth" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dateFormat"\n                       label="Date Format"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.dateTimeFormat"\n                       label="Date Time Format"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.timeFormat"\n                       label="Time Format"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.attachmentName"\n                       label="Attachment Name"></text-prop>\n        </div>\n        <div class="col-md-6">\n            <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.attachmentParentId"\n                       label="Attachment Parent Id"></text-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.showPopup"\n                           label="Show Popup"></checkbox-prop>\n        </div>\n        <div class="col-md-6 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.readOnly"\n                           label="Read Only"></checkbox-prop>\n        </div>\n    </div>\n\n    <group-prop label="User Messages"\n                ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureNextLabel"\n                           label="Failure Next Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                           label="Failure Abort Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow" ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                           label="Failure Go Back Label"\n                           help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                           label="Failure Abort Message"></text-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableActionMessage"\n                               ng-show="vm.scriptElement.IsLwcEnabled__c"\n                               label="Enable Action Message"\n                               help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                           label="Post Message"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                               ng-show="vm.element.parent() === vm.scriptElement"\n                               label="Enable Default Abort"\n                               help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.inProgressMessage"\n                           help-text="Message that is displayed along with the spinner when action is in progress."\n                           label="Action Message"></text-prop>\n            </div>\n            <div class="col-md-6" ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.postMessage"\n                           label="Post Message"></text-prop>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Redirect Properties">\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPageName"\n                           label="Redirect Page Name"\n                           help-text="Upon success, the script navigates to this page"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                           label="Redirect Template URL"\n                           help-text="HTML template of the redirect page"></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() === vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                           label="Redirect Next Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Next Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectNextWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                           label="Redirect Previous Label"></text-prop>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Redirect Previous Width</span>\n                </label>\n                <div range-slider\n                     min="0"\n                     max="12"\n                     disabled="vm.scriptElement.isDisabled()"\n                     model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n                     pin-handle="min"\n                     show-values\n                     show-labels\n                     attach-handle-values></div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Send Transformations">\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONPath"\n                           label="Send JSON Path"\n                           help-text="To trim the request, specify one node of the Data JSON to send in the outgoing request."></text-prop>\n            </div>\n            <div class="col-md-6">\n                <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.sendJSONNode"\n                           label="Send JSON Node"\n                           help-text="Specify a new name for the parent node in the outgoing request."></text-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Pre-Transform DataRaptor Interface</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       ng-if="vm.scriptElement.IsLwcEnabled__c"\n                       bs-tooltip="\'{{::\'NotSupportedInLwc\' | localize}}\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <dataraptor-select id-prefix="{{vm.idPrefix + \'preTransformBundle\'}}"\n                                   class="row"\n                                   script-element="vm.scriptElement"\n                                   ng-model="vm.element.PropertySet__c.preTransformBundle"\n                                   ng-disabled="vm.scriptElement.isDisabled()"\n                                   input-type="JSON"\n                                   output-type="PDF"\n                                   include-input-json="true"\n                                   type="Transform"></dataraptor-select>\n            </div>\n        </div>\n\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Validation Required</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <checkbox-prop class="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <checkbox-prop class="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/action/docusign-signature-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>{{ ::\'OmniDesDocuTemplates\' | localize }}</span>\n      </label>\n      <div class="panel panel-default">\n        <table class="table"\n               style="border: 0; margin-bottom: 0;">\n          <thead>\n            <th width="60px">{{ ::\'OmniDesDocuIncludeToSend\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip=" :: \'OmniDesDocuIncludeTooltip\' | localize "\n                 data-container=".container"\n                 data-type="info">\n              </i>\n            </th>\n            <th>{{ ::\'OmniDesDocuTemplatePick\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuTemplateRole\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuDRTransformPick\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuSendJSONPath\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuSendJSONNode\' | localize }}</th>\n            <th width="60px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr ng-repeat="template in vm.element.PropertySet__c.docuSignTemplatesGroupSig track by $index">\n              <td>\n                <input type="checkbox"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.includeToSend" />\n              </td>\n              <td>\n                <select name="docusignSignerRole"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"\n                        ng-change="vm.onChangeDocusignTemplate($index)"\n                        ng-model="template.docuSignTemplate"\n                        ng-options="option[vm.docusignFieldMap[\'TemplateIdentifier__c\']] as option.Name for option in vm.docuSignTemplates"\n                        ng-required="true"></select>\n              </td>\n              <td>\n                <select name="docusignSignerRole"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="template.templateRole"\n                        ng-options="role as role for role in vm.templateRolesByTemplate[template.docuSignTemplate] track by role"\n                        ng-required="true"></select>\n              </td>\n              <td>\n                <dataraptor-select ng-model="template.transformBundle"\n                                   mode="simple"\n                                   ng-change="property.update()"\n                                   ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"></dataraptor-select>\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.sendJSONPath" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.sendJSONNode" />\n              </td>\n              <td class="vlc-delete-cell">\n                <span class="trash-icon icon-v-trash"\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteDocuSignTemplate($index)"></span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <button class="btn btn-default"\n              type="button"\n              ng-disabled="vm.scriptElement.isDisabled()"\n              ng-click="vm.addDocuSignTemplate()">\n        <i class="icon icon-v-plus-line"></i>{{ ::\'OmniDesDocuAddTemplate\' | localize }}\n      </button>\n    </div>\n  </div>\n\n  <group-prop label="Signer Information">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.signerInformation.signerName"\n                   label="Signer Name"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.signerInformation.signerEmail"\n                   label="Signer Email"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.emailSubject"\n                 label="Email Subject"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.docuSignReturnUrl"\n                 label="DocuSign Return Url"\n                 help-text="{{:: \'OmniDesDocuSignReturnPageTooltip\' | localize}}"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.dateFormat"\n                 label="Date Format"\n                 help-text="Specifies how the date should be formatted for the user. Supports formats from the AngularJS date filter.\nExamples include MM/dd/yy and yyyy-MM-dd "></text-prop>\n    </div>\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.dateTimeFormat"\n                 label="Date Time Format"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.timeFormat"\n                 label="Time Format"\n                 help-text="Controls how the Time is formatted in the UI. h or hh for hour, m or mm for minute, s or ss for seconds, a for am/pm indicator. Single letter (e.g., h) has no leading zero; remove the &quot;a&quot; to display 24 hour time. Examples:&lt;br/&gt;&quot;hh:mm a&quot;, &quot;hh:mm:ss&quot;."></text-prop>\n    </div>\n  </div>\n\n  <group-prop label="Remote Properties">\n\n    <div class="row propertyRow">\n      <div class="col-md-12">\n        <label>\n          <span>Remote Timeout (ms)</span>\n        </label>\n        <div>\n          <input type="number"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.remoteTimeout" />\n        </div>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Error Messages"\n              help-text="Enter custom error messages that will replace the default error messages.">\n    <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                          ng-disabled="vm.scriptElement.isDisabled()">\n    </errormessage-handler>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step"\n                  ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                      ng-disabled="vm.scriptElement.isDisabled()"\n                                      persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n    </div>\n  </div>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/action/docusign-envelope-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n  <div class="row propertyRow">\n    <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name"></element-name-prop>\n    <div class="col-md-6"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <label>\n        <span>Control Width</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div range-slider\n           min="0"\n           max="12"\n           disabled="vm.scriptElement.isDisabled()"\n           model-max="vm.element.PropertySet__c.controlWidth"\n           pin-handle="min"\n           show-values\n           show-labels\n           attach-handle-values></div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>Field Label</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Enter a label to be displayed to the user.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.scriptElement.isDisabled()"\n               ng-model="vm.element.PropertySet__c.label" />\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <label>\n        <span>{{ ::\'OmniDesDocuTemplates\' | localize }}</span>\n      </label>\n      <div class="panel panel-default"\n           ng-repeat="template in vm.element.PropertySet__c.docuSignTemplatesGroup track by $index">\n        <table class="table"\n               style="border: 0; margin-bottom: 0;">\n          <thead>\n            <th width="60px">{{ ::\'OmniDesDocuIncludeToSend\' | localize }}\n              <i class="icon icon-v-information-line"\n                 bs-tooltip=" :: \'OmniDesDocuIncludeTooltip\' | localize "\n                 data-container=".container"\n                 data-type="info">\n              </i>\n            </th>\n            <th>{{ ::\'OmniDesDocuTemplatePick\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuDRTransformPick\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuSendJSONPath\' | localize }}</th>\n            <th>{{ ::\'OmniDesDocuSendJSONNode\' | localize }}</th>\n            <th width="60px">&nbsp;</th>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <input type="checkbox"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.includeToSend" />\n              </td>\n              <td>\n                <select name="docusignSignerRole"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"\n                        ng-change="vm.onChangeDocusignTemplate($index)"\n                        ng-model="template.docuSignTemplate"\n                        ng-options="option[vm.docusignFieldMap[\'TemplateIdentifier__c\']] as option.Name for option in vm.docuSignTemplates"></select>\n              </td>\n              <td>\n                <dataraptor-select ng-model="template.transformBundle"\n                                   mode="simple"\n                                   ng-change="property.update()"\n                                   ng-disabled="vm.scriptElement.isDisabled() || vm.element.Type__c.type == \'OmniScript\'"></dataraptor-select>\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.sendJSONPath" />\n              </td>\n              <td>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="template.sendJSONNode" />\n              </td>\n              <td class="vlc-delete-cell">\n                <span class="trash-icon icon-v-trash"\n                      ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                      ng-click="vm.deleteDocuSignTemplate($index)"></span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div class="panel panel-default"\n             ng-init="parentIndex = $index"\n             style="margin-bottom: 0;border-radius: 0;border: 0;box-shadow: none;border-top: 1px solid #ddd;">\n          <div class="panel-heading"> {{ ::\'OmniDesDocuRecipients\' | localize }}\n            <button class="btn btn-default"\n                    type="button"\n                    ng-disabled="form.propertiesForm.docusignSignerName.$invalid || form.propertiesForm.docusignSignerEmail.$invalid || form.propertiesForm.docusignSignerRole.$invalid || vm.scriptElement.isDisabled()"\n                    ng-click="vm.addDocuSignSigner(parentIndex)">\n              <i class="icon icon-v-plus-line"></i>{{ ::\'OmniDesDocuAddRecipient\' | localize }}\n            </button>\n          </div>\n          <table class="table"\n                 style="border: 0; margin-bottom: 0; border-bottom: 1px solid rgba(0, 0, 0, 0.15)">\n            <thead>\n              <th>{{ ::\'OmniDesDocuRoutingOrder\' | localize }}\n                <i class="icon icon-v-information-line"\n                   bs-tooltip=" :: \'OmniDesDocuRoutingTooltip\' | localize "\n                   data-container=".container"\n                   data-type="info">\n                </i>\n              </th>\n              <th>{{ ::\'OmniDesDocuSignerName\' | localize }}<span class="required">*</span></th>\n              <th>{{ ::\'OmniDesDocuSignerEmail\' | localize }}<span class="required">*</span></th>\n              <th>{{ ::\'OmniDesDocuTemplateRole\' | localize }}<span class="required">*</span></th>\n              <th width="60px">&nbsp;</th>\n            </thead>\n            <tbody>\n              <tr ng-repeat="signer in template.signerList track by $index">\n                <td>\n                  <input type="text"\n                         class="form-control"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         ng-model="signer.routingOrder" />\n                </td>\n                <td>\n                  <input type="text"\n                         class="form-control"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         name="docusignSignerName"\n                         ng-model="signer.signerName"\n                         ng-required="true" />\n                </td>\n                <td>\n                  <input type="text"\n                         class="form-control"\n                         ng-disabled="vm.scriptElement.isDisabled()"\n                         name="docusignSignerEmail"\n                         ng-model="signer.signerEmail"\n                         ng-required="true" />\n                </td>\n                <td>\n                  <select name="docusignSignerRole"\n                          class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="signer.templateRole"\n                          ng-options="role as role for role in vm.templateRolesByTemplate[template.docuSignTemplate] track by role"\n                          ng-required="true"></select>\n                </td>\n                <td class="vlc-delete-cell">\n                  <span class="trash-icon icon-v-trash"\n                        ng-class="{ \'is-disabled\': vm.scriptElement.isDisabled() }"\n                        ng-click="vm.deleteDocuSignSigner($index, parentIndex)"\n                        style="top: 8px; left: 17px;"></span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <button class="btn btn-default"\n              type="button"\n              ng-disabled="vm.scriptElement.isDisabled()"\n              ng-click="vm.addDocuSignTemplate()">\n        <i class="icon icon-v-plus-line"></i>{{ ::\'OmniDesDocuAddTemplate\' | localize }}\n      </button>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.emailSubject"\n                 label="Email Subject"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Email Body</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.PropertySet__c.emailBody"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.dateFormat"\n                 label="Date Format"\n                 help-text="Specifies how the date should be formatted for the user. Supports formats from the AngularJS date filter.\nExamples include MM/dd/yy and yyyy-MM-dd "></text-prop>\n    </div>\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.dateTimeFormat"\n                 label="Date Time Format"></text-prop>\n    </div>\n  </div>\n\n  <div class="row propertyRow">\n    <div class="col-md-6">\n      <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.timeFormat"\n                 label="Time Format"\n                 help-text="Controls how the Time is formatted in the UI. h or hh for hour, m or mm for minute, s or ss for seconds, a for am/pm indicator. Single letter (e.g., h) has no leading zero; remove the &quot;a&quot; to display 24 hour time. Examples:&lt;br/&gt;&quot;hh:mm a&quot;, &quot;hh:mm:ss&quot;."></text-prop>\n    </div>\n  </div>\n\n  <group-prop label="User Messages"\n              ng-show="vm.scriptElement.IsLwcEnabled__c || vm.element.parent() === vm.scriptElement">\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureNextLabel"\n                   label="Failure Next Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s next button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortLabel"\n                   label="Failure Abort Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s abort button."></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureGoBackLabel"\n                   label="Failure Go Back Label"\n                   help-text="If the action fails, this text will display in the resulting modal\'s Go Back button."></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.failureAbortMessage"\n                   label="Failure Abort Message"></text-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableActionMessage"\n                       ng-show="vm.scriptElement.IsLwcEnabled__c"\n                       label="Enable Action Message"\n                       help-text="When checked, the Action Message above will display with a spinner while the action is in progress."></checkbox-prop>\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   ng-show="vm.element.parent() === vm.scriptElement && !vm.scriptElement.IsLwcEnabled__c"\n                   label="Post Message"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.enableDefaultAbort"\n                       ng-show="vm.element.parent() === vm.scriptElement"\n                       label="Enable Default Abort"\n                       help-text="When checked, selecting the Failure Abort Label button within this action\'s error message will abort the OmniScript."></checkbox-prop>\n      </div>\n    </div>\n    <div class="row propertyRow">\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.PropertySet__c.enableActionMessage">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.inProgressMessage"\n                   help-text="Message that is displayed along with the spinner when action is in progress."\n                   label="Action Message"></text-prop>\n      </div>\n      <div class="col-md-6"\n           ng-show="vm.scriptElement.IsLwcEnabled__c && vm.element.parent() === vm.scriptElement">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.postMessage"\n                   label="Post Message"></text-prop>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Remote Properties">\n\n    <div class="row propertyRow">\n      <div class="col-md-12">\n        <label>\n          <span>Remote Timeout (ms)</span>\n        </label>\n        <div>\n          <input type="number"\n                 class="form-control"\n                 ng-disabled="vm.scriptElement.isDisabled()"\n                 ng-model="vm.element.PropertySet__c.remoteTimeout" />\n        </div>\n      </div>\n    </div>\n\n  </group-prop>\n\n  <group-prop label="Redirect Properties">\n    <div class="row propertyRow">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPageName"\n                   label="Redirect Page Name"\n                   help-text="Upon success, the script navigates to this page"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectTemplateUrl"\n                   label="Redirect Template URL"\n                   help-text="HTML template of the redirect page"></text-prop>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() === vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectNextLabel"\n                   label="Redirect Next Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Next Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectNextWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n\n    <div class="row propertyRow"\n         ng-show="vm.element.parent() !== vm.scriptElement">\n      <div class="col-md-6">\n        <text-prop ng-disabled="vm.scriptElement.isDisabled()"\n                   ng-model="vm.element.PropertySet__c.redirectPreviousLabel"\n                   label="Redirect Previous Label"></text-prop>\n      </div>\n      <div class="col-md-6">\n        <label>\n          <span>Redirect Previous Width</span>\n        </label>\n        <div range-slider\n             min="0"\n             max="12"\n             disabled="vm.scriptElement.isDisabled()"\n             model-max="vm.element.PropertySet__c.redirectPreviousWidth"\n             pin-handle="min"\n             show-values\n             show-labels\n             attach-handle-values></div>\n      </div>\n    </div>\n  </group-prop>\n\n  <group-prop label="Error Messages"\n              help-text="Enter custom error messages that will replace the default error messages.">\n    <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                          ng-disabled="vm.scriptElement.isDisabled()">\n    </errormessage-handler>\n  </group-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-6"\n         ng-if="vm.element.parent().Type__c.type !== \'action-block\'">\n      <label>\n        <span>Validation Required</span>\n        <i class="icon icon-v-information-line"\n           data-html="true"\n           bs-tooltip="\'Controls when the action will run.\'"\n           data-container=".container"\n           data-type="info"></i>\n      </label>\n      <div>\n        <select name="displayMode"\n                id="displayMode"\n                class="form-control"\n                ng-disabled="vm.scriptElement.isDisabled()"\n                ng-model="vm.element.PropertySet__c.validationRequired">\n          <option ng-value="null">None</option>\n          <option value="Step"\n                  ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n          <option value="Submit">Submit</option>\n        </select>\n      </div>\n    </div>\n    <div class="col-md-6">\n      <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                      ng-disabled="vm.scriptElement.isDisabled()"\n                                      persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n    </div>\n  </div>\n\n  <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                         script-element="vm.scriptElement"\n                         ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n  <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                      ng-disabled="vm.scriptElement.isDisabled()"\n                      ng-if="vm.scriptElement.IsLwcEnabled__c"\n                      script-element="vm.scriptElement"></lwc-selection-prop>\n\n  <div class="row propertyRow">\n    <div class="col-md-12">\n      <div class="form-group">\n        <label>\n          <span>Internal Notes</span>\n        </label>\n        <textarea class="form-control"\n                  ng-disabled="vm.scriptElement.isDisabled()"\n                  rows="5"\n                  ng-model="vm.element.InternalNotes__c"></textarea>\n      </div>\n    </div>\n  </div>\n\n  <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n  <div class="form-group">\n    <label>Hide Element If False</label>\n    <div class="showGroup">\n      <div show-hide-rule\n           parent="vm.element.PropertySet__c.show.group.rules"\n           rule="vm.element.PropertySet__c.show"\n           root-rule="vm.element.PropertySet__c.show"\n           element-names="vm.elementNames()"\n           is-disabled="vm.scriptElement.isDisabled()"></div>\n    </div>\n  </div>\n</form>'),$templateCache.put("propertysets/action/set-errors-action.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6"\n             ng-show="vm.element.parent() !== vm.scriptElement">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Enter a label to be displayed to the user.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.label" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Element Error Map</span>\n            </label>\n            <div class="row set-error-value">\n                <div class="col-md-4">\n                    <label>Element Name</label>\n                </div>\n                <div class="col-md-3 type-col text-center">\n                    <label>Type</label>\n                </div>\n                <div class="col-md-4">\n                    <label>\n                        <span>Value</span>\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'Error text that will be displayed to the User\'"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </label>\n                </div>\n                <div class="col-md-1">\n                    <label>&nbsp;</label>\n                </div>\n            </div>\n            <div class="row set-error-value"\n                 ng-repeat="property in vm.elementErrorMap track by $index">\n                <div class="col-md-4">\n                    <input type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="property.key"\n                           ng-change="vm.updateKeyValueProperty()"\n                           bs-options="name for name in vm.elementNames()"\n                           bs-typeahead\n                           data-min-length="0" />\n                </div>\n                <div class="col-md-3 type-col text-center">\n                    <span>{{ property.key | getTypeForElement }}</span>\n                </div>\n                <div class="col-md-4 faux-field"\n                     ng-class="{divDisabled: (property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()}">\n                    <button type="button"\n                            class="btn btn-default faux-field"\n                            ng-disabled="(property.type == \'object\' || property.type == \'array\') || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editAsExpression(property, false)"><i>fx</i></button>\n                    <input type="text"\n                           class="form-control faux-field"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-change="vm.updateKeyValueProperty()"\n                           ng-model="property.value"\n                           ng-if="property.type !== \'object\' && property.type !== \'array\'"\n                           data-min-length="0" />\n                    <input type="text"\n                           class="form-control faux-field"\n                           value="{{property.type == \'object\' ? \'Object\' : \'Array\'}} (click \'Edit as JSON\' to modify)"\n                           ng-if="property.type == \'object\' || property.type == \'array\'"\n                           disabled="disabled"\n                           readonly="readonly" />\n                </div>\n                <div class="col-md-1">\n                    <button type="button"\n                            class="btn btn-link trash"\n                            ng-if="!vm.scriptElement.isDisabled()"\n                            ng-click="vm.deleteKeyValue(property)"\n                            title="Delete entire element, type and value">\n                        <span class="icon icon-v-trash"></span>\n                    </button>\n                </div>\n            </div>\n            <button type="button"\n                    class="btn btn-default"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-click="vm.addNewKeyValue()">{{ ::\'OmniDesSetErrorValuePair\' | localize:\'+ Add New\n                Value\' }}</button>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Validation Required</span><i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Controls when the action will run.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <select name="displayMode"\n                        id="displayMode"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.validationRequired">\n                    <option ng-value="null">None</option>\n                    <option value="Step"\n                            ng-if="vm.element.parent() !== vm.scriptElement">Step</option>\n                    <option value="Submit">Submit</option>\n                </select>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <show-persistent-component-prop ng-model="vm.element.PropertySet__c.showPersistentComponent"\n                                            ng-disabled="vm.scriptElement.isDisabled()"\n                                            persistent-component="vm.scriptElement.PropertySet__c.persistentComponent"></show-persistent-component-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm"\n                           label="Window Post Message?"\n                           help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.ssm"\n                           label="Session Storage Message?"\n                           help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n        </div>\n    </div>\n    <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n        <div class="col-md-12 checkbox">\n            <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.pubsub"\n                label="LWC PubSub Message?"\n                help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n            </checkbox-prop>\n        </div>\n    </div>\n    <key-value-prop label="Message"\n                    ng-model="vm.element.PropertySet__c.message"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal Notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/omniscript.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>OmniScript name</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'The name of the OmniScript is shown (with Description) in the list view on the OmniScript Designer home page.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input id="OmniScript__c_Name"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Name" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Description</span>\n            </label>\n            <div>\n                <input id="OmniScript__c_AdditionalInformation__c"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.AdditionalInformation__c" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Type</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniScript: there can be only one OmniScript with the same Type, SubType, and Language active at any time. Special characters are not allowed.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input id="OmniScript__c_Type__c"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.Type__c"\n                       ng-change="vm.handleTypeChange()"\n                       data-min-length="0"\n                       bs-options="type.label as type.value for type in vm.types"\n                       bs-typeahead />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>SubType</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniScript: there can be only one OmniScript with the same Type, SubType, and Language active at any time. Special characters are not allowed.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input id="OmniScript__c_SubType__c"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()||vm.element.Type__c==null||vm.element.Type__c==\'\'"\n                       ng-model="vm.element.SubType__c"\n                       data-min-length="0"\n                       bs-options="subtype.label as subtype.value for subtype in vm.subtypes"\n                       bs-typeahead\n                       data-watch-options="true" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Language</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Type, SubType, and Language define the unique identity of the OmniScript: there can be only one OmniScript with the same Type, SubType, and Language active at any time. Special characters are not allowed.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div class="row">\n                <div ng-class="vm.currentLanguage == \'Multi-Language\' ? \'col-md-9\' : \'col-md-12\'">\n                    <select id="OmniScript__c_Language__c"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.currentLanguage"\n                            ng-change="vm.handleLanguageChange()"\n                            ng-options="value as label for (value,label) in vm.languagesMap">\n                        </select>\n                </div>\n                <div class="col-md-3"\n                     ng-show="vm.currentLanguage == \'Multi-Language\'">\n                    <button class="btn btn-link"\n                            ng-disabled="!vm.scriptElement.Id || vm.scriptElement.isDisabled()"\n                            ng-click="vm.editCustomLabels()">Edit</button>\n                </div>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Currency Code</span>\n                <i class="icon icon-v-information-line"\n                   data-html="true"\n                   bs-tooltip="\'Overrides the Users default currency code. Specify a supported Salesforce currency code.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div>\n                <input id="OmniScript__c_PropertySet__c_currencyCode"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.currencyCode"\n                       data-min-length="0"\n                       bs-options="type.code as type.label for type in vm.currencies"\n                       bs-typeahead />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_IsLwcEnabled__c"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled() || vm.isIndustryPkgInstalledSecond"\n                           ng-model="vm.element.IsLwcEnabled__c" />\n                    <span>Enable LWC</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Enable the use of LWC.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <pre ng-if="vm.scriptElement.IsLwcEnabled__c && vm.scriptElement.Id" ng-bind="componentTag" ng-class="componentTagClass"></pre>\n            </div>\n\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_IsReusable__c"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.IsReusable__c" />\n                    <span>Reusable</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Embed this OmniScript into another OmniScript.  Reusable OmniScripts cannot embed other Reusable OmniScripts.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_PropertySet__c_showInputWidth"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.showInputWidth" />\n                    <span>Label outside of field</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="::\'OmniDesTipLightningOnly\' | localize"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n        <div class="col-md-6">\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_PropertySet__c_timeTracking"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.timeTracking" />\n                    <span>Enable Tracking</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'OmniScript records how long steps and actions take and stores results in the Data JSON.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_PropertySet__c_rtpSeed"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.rtpSeed" />\n                    <span>Fetch Picklist Values At Script Load</span>\n                </label>\n            </div>\n            <div class="checkbox">\n                <label class="checkbox">\n                    <input id="OmniScript__c_PropertySet__c_disableUnloadWarn"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.disableUnloadWarn"\n                           ng-true-value="false"\n                           ng-false-value="true" />\n                    <span>Enable Unload Warning</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'If checked, a \\\'Leave Site?\\\' warning will be triggered by reload, navigating away, or closing the window\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow" ng-if="vm.element.IsLwcEnabled__c">\n        <div class="col-md-6">\n            <div class="checkbox" style="margin-top: -5px; margin-bottom: 0;">\n                <label class="checkbox" style="margin: 0;">\n                    <input id="OmniScript__c_IsSeoEnabled__c"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.isSeoEnabled" />\n                    <span>Enable SEO</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Enable url driven navigation pattern.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n        </div>\n        <div class="col-md-12" ng-if="vm.element.IsLwcEnabled__c && vm.scriptElement.PropertySet__c.isSeoEnabled">\n            <label>\n                <span>Additional SEO URL Parameters</span>\n            </label>\n            <div>\n                <input type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.additionalSeoParameters" />\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Console Tab Title</span>\n            </label>\n            <div>\n                <input id="OmniScript__c_PropertySet__c_consoleTabTitle"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.consoleTabTitle" />\n            </div>\n        </div>\n        <div class="col-md-6">\n            <label>\n                <span>Console Tab Icon</span>\n            </label>\n            <div>\n                <input id="OmniScript__c_PropertySet__c_consoleTabIcon"\n                       type="text"\n                       class="form-control"\n                       ng-disabled="vm.scriptElement.isDisabled()"\n                       ng-model="vm.element.PropertySet__c.consoleTabIcon" />\n            </div>\n        </div>\n    </div>\n\n    <key-value-prop label="Element Type To HTML Template Mapping"\n                    help-text="Applies a template override to every element of a specific type. On the left, enter the Element type (e.g., Block), and on the right, enter the name of the template."\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.elementTypeToHTMLTemplateMapping"\n                    id-prefix="OmniScript__c_PropertySet__c_elementTypeToHTMLTemplateMapping"\n                    key-label="Element Type"\n                    value-label="Template Name"\n                    render-template-cell="true"\n                    script-element="vm.scriptElement"\n                    add-btn-label="Add New Mapping"></key-value-prop>\n\n    <lwc-override-prop label="Element Type To LWC Component Mapping"\n                    help-text="Applies a LWC component override to every element of a specific type. On the left, enter the Element type (e.g., Block), and on the right, select the name of the LWC component."\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    ng-model="vm.element.PropertySet__c.elementTypeToLwcTemplateMapping"\n                    id-prefix="OmniScript__c_PropertySet__c_elementTypeToLwcTemplateMapping"\n                    key-label="Element Type"\n                    value-label="Lightning Web Component"\n                    render-template-cell="true"\n                    script-element="vm.scriptElement"\n                    ng-if="vm.element.IsLwcEnabled__c"\n                    add-btn-label="Add New Mapping"></lwc-override-prop>\n\n    <key-value-prop label="Seed Data JSON"\n                    ng-model="vm.element.PropertySet__c.seedDataJSON"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    help-text="Seed Data JSON enables the OmniScript to be seeded with data on launch. It does not allow for referencing other data with the %element% syntax or use of expressions. For more robust functionality, use the Set Values action."\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="OmniScript__c_PropertySet__c_seedDataJSON"></key-value-prop>\n\n    <key-value-prop label="Tracking Custom Data"\n                    ng-model="vm.element.PropertySet__c.trackingCustomData"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    help-text="Add Key/Value pairs to log custom data to the Vlocity Tracking Entry table. Requires the Vlocity Tracking Service to be enabled in Custom Settings."\n                    key-label="Key"\n                    value-label="Value"\n                    add-btn-label="Add New Key/Value Pair"\n                    id-prefix="OmniScript__c_PropertySet__c_trackingCustomData"></key-value-prop>\n\n    <key-value-prop label="Visualforce Pages Available In Preview"\n                    ng-model="vm.element.PropertySet__c.visualforcePagesAvailableInPreview"\n                    ng-disabled="vm.scriptElement.isDisabled()"\n                    help-text="{{::\'OmniDesTipVFPagesInPreview\' | localize}}"\n                    key-label="Label in Preview Drop Down"\n                    value-label="Visualforce Page Name"\n                    add-btn-label="Add New Visualforce Page For\n                    Preview"\n                    id-prefix="OmniScript__c_PropertySet__c_visualforcePagesAvailableInPreview"></key-value-prop>\n\n    <group-prop label="Persistent Component"\n                help-text="Enable and configure persistent components including Cart and Knowledge.">\n\n        <ul class="nav nav-alt"\n            role="tablist">\n            <li role="presentation"\n                ng-repeat="component in vm.element.PropertySet__c.persistentComponent track by component.id"\n                ng-class="[ vm.persistentComponentActiveTab ===  $index ? \'active\' : \'\' ]">\n                <i ng-attr-id="{{\'OmniScript__c_PropertySet__c_persistentComponent_\' + $index +\'_deleteBtn\'}}"\n                   class="icon icon-v-close"\n                   ng-click="vm.removePersistentComponent($index)"\n                   ng-if="!vm.scriptElement.isDisabled()"></i>\n                <a ng-attr-id="{{\'OmniScript__c_PropertySet__c_persistentComponent_\' + $index +\'_showBtn\'}}"\n                   role="tab"\n                   data-toggle="tab"\n                   ng-click="vm.persistentComponentActiveTab = $index"\n                   ng-bind="component.id"></a>\n            </li>\n            <li role="presentation"\n                ng-show="!vm.scriptElement.isDisabled()">\n                <a id="OmniScript__c_PropertySet__c_persistentComponent_addBtn"\n                   role="tab"\n                   data-toggle="tab"\n                   ng-click="vm.addPersistentComponent()">+</a>\n            </li>\n        </ul>\n        <persistent-component ng-repeat="component in vm.element.PropertySet__c.persistentComponent track by component.id"\n                              script-element="vm.scriptElement"\n                              element="vm.element"\n                              persistent-component="component"\n                              id-prefix="{{\'OmniScript__c_PropertySet__c_persistentComponent_\'+$index+\'_\'}}"\n                              ng-show="vm.persistentComponentActiveTab ===  $index">\n        </persistent-component>\n    </group-prop>\n\n    \x3c!-- Step chart options --\x3e\n    <group-prop label="Step Chart Options"\n                help-text="Customize the step chart behavior.">\n        <div class="row propertyRow">\n            <div class="col-md-6"\n                 ng-if="vm.element.IsLwcEnabled__c">\n                <label>\n                    <span>Step Chart Placement</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'<div>The step chart can be placed in 3 different positions:</div><ul><li>Right</li><li>Left</li><li>Top (Step chart will be in horizontal mode in this configuration).</li></ul><div><b>Feature is only available in the LWC Player with the Lightning theme.</b></div>\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                <select id="OmniScript__c_PropertySet__c_stepChartPlacement"\n                        name="stepChartPlacement"\n                        class="form-control"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-init="vm.element.PropertySet__c.stepChartPlacement = vm.element.PropertySet__c.stepChartPlacement || \'right\'"\n                        ng-model="vm.element.PropertySet__c.stepChartPlacement">\n                    <option value="right">Right</option>\n                    <option value="left">Left</option>\n                    <option value="top">Top</option>\n                </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="checkbox">\n                    <label class="checkbox">\n                        <input id="OmniScript__c_PropertySet__c_hideStepChart"\n                               type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.hideStepChart" />\n                        <span>Hide Step Chart</span>\n                    </label>\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Cancel Options"\n                help-text="The behavior when the user clicks the cancel link.">\n        <div class="row propertyRow"\n             ng-if="vm.element.IsLwcEnabled__c">\n            <div class="alert alert-info">\n                <svg width="16" height="16" viewBox="0 0 221 357" fill="none" stroke="#16325c" stroke-linejoin="round" stroke-width="8">\n                    <path fill="transparent" d="M51 4L4 177h68L30 353l187-228h-73L198 4z"></path>\n                    <path d="M75 43l-24 90 24-90z"></path>\n                </svg>\n                <span>\n                    For LWC OmniScripts, configure the cancel action by adding a <strong>Navigate Action</strong>\n                     to the root level of the structure panel named <strong>"CANCEL"</strong>.<br/>The settings below are ignored.\n                </span>\n            </div>\n        </div>\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Cancel Type</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Type of Redirect. SObject- redirects to an SFDC object. Enter the merge field of the record to redirect to in Cancel Source. URL- redirects to a URL (URL supports merge fields). Redirect- directs to an html template, specified in the Cancel Redirect Page Name and Redirect Template URLs. Dismiss- closes the script and presents a blank page.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <select id="OmniScript__c_PropertySet__c_cancelType"\n                            name="cancelType"\n                            id="cancelType"\n                            class="form-control"\n                            ng-disabled="vm.scriptElement.isDisabled()"\n                            ng-model="vm.element.PropertySet__c.cancelType">\n                        <option value="Dismiss">Dismiss</option>\n                        <option value="Redirect">Redirect</option>\n                        <option value="SObject">SObject</option>\n                        <option value="URL">URL</option>\n                    </select>\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Cancel Source</span>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_cancelSource"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.cancelSource" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Cancel Redirect Page Name</span>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_cancelRedirectPageName"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.cancelRedirectPageName" />\n                </div>\n\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Cancel Redirect Template URL</span>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_cancelRedirectTemplateUrl"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.cancelRedirectTemplateUrl" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Console Tab Label</span>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_consoleTabLabel"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.consoleTabLabel" />\n                </div>\n            </div>\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input id="OmniScript__c_PropertySet__c_allowCancel"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.allowCancel" />\n                    <span>Allow Cancel</span>\n                </label>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input id="OmniScript__c_PropertySet__c_wpm"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.wpm" />\n                    <span>Window Post Message?</span>\n                </label>\n            </div>\n            <div class="col-md-6">\n                <div class="checkbox">\n                    <label>\n                        <input id="OmniScript__c_PropertySet__c_ssm"\n                               type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.ssm" />\n                        <span>Session Storage Message?</span>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <key-value-prop label="Message"\n                        ng-model="vm.element.PropertySet__c.message"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="OmniScript__c_PropertySet__c_message"></key-value-prop>\n\n    </group-prop>\n\n    <group-prop label="Save Options"\n                help-text="If enabled, OmniScript data is written to the {{vm.omniScriptInstanceObjectName}} object, including the Data JSON, Full JSON, attachments.">\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input id="OmniScript__c_PropertySet__c_allowSaveForLater"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.allowSaveForLater" />\n                    <span>Allow Save For Later</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Controls whether the save link is shown at runtime.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n            <div class="col-md-6">\n                <div class="checkbox"\n                     ng-show="vm.element.PropertySet__c.allowSaveForLater">\n                    <label>\n                        <input id="OmniScript__c_PropertySet__c_autoSaveOnStepNext"\n                               type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.autoSaveOnStepNext" />\n                        <span>Auto Save On Next Step</span>\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'Causes the OmniScript to be saved each time the user clicks the next button.  Useful for recovery from abandoned processes.\'"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Save Name Template</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The &quot;Name&quot; field of the record thats created to hold the saved state of the OmniScript.  For example: %LastName%, %FirstName% - Application\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_saveNameTemplate"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveNameTemplate" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Save Expire In Days</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Indicates when a saved OmniScript expires. A resumed OmniScript that is expired will start at the first step. Set to -1 to expire immediately.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_saveExpireInDays"\n                           type="number"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveExpireInDays" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Save For Later Redirect Page Name</span>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_saveForLaterRedirectPageName"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveForLaterRedirectPageName" />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <label>\n                    <span>Save For Later Redirect Template</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'HTML template of the redirect page\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_saveForLaterRedirectTemplateUrl"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveForLaterRedirectTemplateUrl" />\n                </div>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-6">\n                <label>\n                    <span>Save Object Id</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Required. Id associated with the Saved OmniScript.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_saveObjectId"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.saveObjectId"\n                           required />\n                </div>\n            </div>\n            <div class="col-md-6">\n                <div class="checkbox">\n                    <label>\n                        <input id="OmniScript__c_PropertySet__c_mergeSavedData"\n                               type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.mergeSavedData" />\n                        <span>Merge Saved Data JSON into updated OmniScript</span>\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'Merge Saved Data JSON into updated OmniScript\'"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <key-value-prop label="Save URL Patterns"\n                        ng-model="vm.element.PropertySet__c.saveURLPatterns"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        help-text="{{::\'OmniDesTipSavePattern\' | localize}}"\n                        key-label="{{::\'OmniDesFieldAPIName\' | localize}}"\n                        value-label="{{::\'OmniDesURLPattern\' | localize}}"\n                        add-btn-label="Add New Save URL Pattern"\n                        id-prefix="OmniScript__c_PropertySet__c_saveURLPatterns"></key-value-prop>\n    </group-prop>\n\n    <group-prop label="Knowledge Options">\n\n        <div class="row propertyRow">\n            <div class="col-md-6 checkbox">\n                <label>\n                    <input id="OmniScript__c_PropertySet__c_enableKnowledge"\n                           type="checkbox"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.enableKnowledge" />\n                    <span>Enable Knowledge</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'Enables Salesforce Knowledge to be integrated with OmniScript.\'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n            </div>\n            <div class="col-md-6">\n                <div class="checkbox"\n                     ng-show="vm.element.PropertySet__c.enableKnowledge">\n                    <label>\n                        <input id="OmniScript__c_PropertySet__c_bLK"\n                               type="checkbox"\n                               ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.bLK" />\n                        <span>Lightning Knowledge</span>\n                        <i class="icon icon-v-information-line"\n                           data-html="true"\n                           bs-tooltip="\'Enables Lightning Knowledge to be integrated with OmniScript. Only use this option if Lightning Knowledge is enabled in the org.\'"\n                           data-container=".container"\n                           data-type="info"></i>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <key-value-prop label="Knowledge Article Type Query Fields Map"\n                        help-text="{{::\'OmniDesTipKnowledgeFieldVal\' | localize}}"\n                        key-label="{{::\'OmniDesKnowledgeFieldKey\' | localize}}"\n                        value-label="{{::\'OmniDesKnowledgeFieldVal\' | localize}}"\n                        id-prefix="OmniScript__c_PropertySet__c_knowledgeArticleTypeQueryFieldsMap"\n                        add-btn-label="Add New Knowledge Type Field Map"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-model="vm.element.PropertySet__c.knowledgeArticleTypeQueryFieldsMap"\n                        ng-show="vm.element.PropertySet__c.enableKnowledge">\n        </key-value-prop>\n\n        <div class="row propertyRow"\n             ng-show="vm.element.PropertySet__c.enableKnowledge && vm.element.PropertySet__c.bLK">\n            <div class="col-md-12">\n                <label>\n                    <span>Lightning Knowledge Object API Name</span>\n                    <i class="icon icon-v-information-line"\n                       data-html="true"\n                       bs-tooltip="\'The API name of the custom Lightning Knowledge object. \'"\n                       data-container=".container"\n                       data-type="info"></i>\n                </label>\n                <div>\n                    <input id="OmniScript__c_PropertySet__c_lkObjName"\n                           type="text"\n                           class="form-control"\n                           ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.PropertySet__c.lkObjName" />\n                </div>\n            </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Error Messages"\n                help-text="Enter custom error messages that will replace the default error messages.">\n      <errormessage-handler ng-model="vm.element.PropertySet__c.errorMessage"\n                            ng-disabled="vm.scriptElement.isDisabled()">\n      </errormessage-handler>\n    </group-prop>\n\n    <group-prop label="Messaging Framework"\n                help-text="Enable and configure messaging">\n        <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.wpm"\n                               label="Window Post Message?"\n                               help-text="Enables communication between windows on the page. Any Message Key/Value pairs will get sent to the receiving window when the action is executed."></checkbox-prop>\n            </div>\n        </div>\n\n        <div class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.ssm"\n                               label="Session Storage Message?"\n                               help-text="Enables saving to sessionStorage. Any Message Key/Value pair will get set in the sessionStorage when the action is executed"></checkbox-prop>\n            </div>\n        </div>\n\n        <div ng-if="vm.scriptElement.IsLwcEnabled__c" class="row propertyRow">\n            <div class="col-md-12 checkbox">\n                <checkbox-prop ng-disabled="vm.scriptElement.isDisabled()"\n                               ng-model="vm.element.PropertySet__c.pubsub"\n                               label="LWC PubSub Message?"\n                               help-text="Enables sending events from OmniScript. Any Message Key/Value pairs will get sent to the receiving LWC when the action is executed.">\n                </checkbox-prop>\n            </div>\n        </div>\n\n        <key-value-prop label="Message"\n                        ng-model="vm.element.PropertySet__c.message"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        key-label="Key"\n                        value-label="Value"\n                        add-btn-label="Add New Key/Value Pair"\n                        id-prefix="{{::\'PaletteElement__c_\'+vm.element.Id+\'_message\'}}"></key-value-prop>\n    </group-prop>\n\n    <group-prop label="Custom HTML Templates"\n                help-text="Enter custom HTML templates here or enter custom CSS to modify the OmniScript. Each custom template is held within a script element with a type of &quot;text/ng-template&quot; and an id of the name of a template.  Custom CSS is held within the style element.">\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <textarea id="OmniScript__c_TestHTMLTemplates__c"\n                          class="form-control"\n                          ng-model="vm.element.TestHTMLTemplates__c"\n                          rows="15"\n                          ng-disabled="vm.scriptElement.isDisabled()"></textarea>\n                </div>\n        </div>\n    </group-prop>\n\n    <group-prop label="Custom JavaScript" help-text="{{::vm.customJSLabel}}">\n\n        <div class="row propertyRow">\n            <div class="col-md-12">\n                <textarea id="OmniScript__c_CustomJavaScript__c" class="form-control" ng-model="vm.element.CustomJavaScript__c" rows="15" ng-disabled="vm.scriptElement.isDisabled()"></textarea>\n            </div>\n        </div>\n    </group-prop>\n\n</form>\n'),$templateCache.put("propertysets/display/text-block.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n            <div range-slider min="0" max="12" disabled="vm.scriptElement.isDisabled()" model-max="vm.element.PropertySet__c.controlWidth"\n                pin-handle="min" show-values show-labels attach-handle-values></div>\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-6">\n            <label>\n                <span>Field Label</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Enter a label to be displayed to the user.\'" data-container=".container"\n                    data-type="info"></i>\n            </label>\n            <div>\n                <input type="text" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.label"\n                />\n            </div>\n        </div>\n        <div class="col-md-6"></div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Text</span>\n            </label>\n            <div>\n                <textarea ui-tinymce="vm.tinymceOptions" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.text"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-6 checkbox">\n            <label>\n                <input type="checkbox" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.dataJSON" />\n                <span>Data JSON</span>\n                <i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Writes the HTML body of the Text Block to the root of the OmniScript Data JSON\'"\n                    data-container=".container" data-type="info"></i>\n            </label>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/display/headline.tpl.html",'<form name="form.propertiesForm"\n      autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()"\n                           ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n            <label>\n                <span>Control Width</span>\n                <i class="icon icon-v-information-line"\n                   bs-tooltip="\'Sets the width of the element on the page. Each row has a total width of 12.\'"\n                   data-container=".container"\n                   data-type="info"></i>\n            </label>\n            <div range-slider\n                 min="0"\n                 max="12"\n                 disabled="vm.scriptElement.isDisabled()"\n                 model-max="vm.element.PropertySet__c.controlWidth"\n                 pin-handle="min"\n                 show-values\n                 show-labels\n                 attach-handle-values></div>\n        </div>\n    </div>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Headline</span>\n            </label>\n            <div>\n                <textarea ui-tinymce="vm.tinymceOptions"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          ng-model="vm.element.PropertySet__c.label"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId"\n                           script-element="vm.scriptElement"\n                           ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal notes</span>\n                </label>\n                <textarea class="form-control"\n                          ng-disabled="vm.scriptElement.isDisabled()"\n                          rows="5"\n                          ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule\n                 parent="vm.element.PropertySet__c.show.group.rules"\n                 rule="vm.element.PropertySet__c.show"\n                 root-rule="vm.element.PropertySet__c.show"\n                 element-names="vm.elementNames()"\n                 is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("propertysets/display/line-break.tpl.html",'<form name="form.propertiesForm" autocomplete="off">\n    <div class="row propertyRow">\n        <element-name-prop ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.Name"></element-name-prop>\n        <div class="col-md-6">\n        </div>\n    </div>\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <label>\n                <span>Additional Padding (px)</span>\n            </label>\n            <div>\n                <input type="number" class="form-control" ng-disabled="vm.scriptElement.isDisabled()" ng-model="vm.element.PropertySet__c.padding"\n                />\n            </div>\n        </div>\n    </div>\n\n    <html-template-id-prop ng-model="vm.element.PropertySet__c.HTMLTemplateId" script-element="vm.scriptElement" ng-disabled="vm.scriptElement.isDisabled()"></html-template-id-prop>\n\n    <lwc-selection-prop ng-model="vm.element.PropertySet__c.lwcComponentOverride"\n                        ng-disabled="vm.scriptElement.isDisabled()"\n                        ng-if="vm.scriptElement.IsLwcEnabled__c"\n                        script-element="vm.scriptElement"></lwc-selection-prop>\n\n    <div class="row propertyRow">\n        <div class="col-md-12">\n            <div class="form-group">\n                <label>\n                    <span>Internal notes</span>\n                </label>\n                <textarea class="form-control" ng-disabled="vm.scriptElement.isDisabled()" rows="5" ng-model="vm.element.InternalNotes__c"></textarea>\n            </div>\n        </div>\n    </div>\n\n    <h4>{{ ::\'OmniDesCondView\' | localize }}</h4>\n    <div class="form-group">\n        <label>Hide Element If False</label>\n        <div class="showGroup">\n            <div show-hide-rule parent="vm.element.PropertySet__c.show.group.rules" rule="vm.element.PropertySet__c.show" root-rule="vm.element.PropertySet__c.show"\n                element-names="vm.elementNames()" is-disabled="vm.scriptElement.isDisabled()"></div>\n        </div>\n    </div>\n</form>\n'),$templateCache.put("canvas-element-template.tpl.html",'\x3c!-- canvas-element-template.tpl.html --\x3e\n<div>\n    <i class="icon icon-v-right-arrow"\n       ng-if="element.allowsChildren()"\n       ng-show="element.collapse"\n       ng-click="element.collapse = !element.collapse"></i>\n    <i class="icon icon-v-down-arrow"\n       ng-if="element.allowsChildren()"\n       ng-show="!element.collapse"\n       ng-click="element.collapse = !element.collapse"></i>\n    <ul class="show-marker-wrapper">\n        <li ng-repeat="color in popover.controllingElementsColors[element.Name]  track by $index"\n            class="show-marker"\n            ng-style="{\'background-color\': color, \'left\': 0}"></li>\n    </ul>\n    <h3>\n        <span ng-class="{\'vlc-margin-left-5\': (element.parent().type() === \'Edit Block\')}">\n            {{element.Name}}\n            <span class="icon icon-v-view"\n                  ng-if="element.PropertySet__c.show.group.rules.length > 0"></span>\n            <i class="icon icon-v-claim-line"\n               ng-if="element.hasErrors()"\n               data-container=".container"\n               data-type="info"\n               bs-tooltip="element"\n               bs-enabled="true"\n               data-html="true"\n               ng-attr-data-title="{{errors != null && errors.length > 0 && errors[0].message}}"></i>\n        </span>\n        <i class="icon icon-v-grip pull-right"\n           ng-drag-handle="ng-drag-handle"></i>\n        <i ng-if="element.saving"\n           class="pull-right spinner"></i>\n        <button ng-if="!element.saving"\n                class="btn btn-link pull-right"\n                ng-disabled="scriptElement.IsActive__c || $parent.$parent.scriptElement.isDisabled()"\n                ng-click="delete(element)">\n            <span class="icon icon-v-trash"></span>\n        </button>\n        <button ng-if="!element.saving && !(element.parent().type() === \'Action Block\' && element.parent().children.length >= 4)"\n                class="btn btn-link pull-right"\n                ng-disabled="scriptElement.IsActive__c || element.hasErrors() || $parent.$parent.scriptElement.isDisabled()"\n                ng-click="clone(element)">\n            <span class="icon icon-v-copy"></span>\n        </button>\n        <span class="pull-right element-type" \n              ng-class="element.parent().type() === \'Action Block\' && element.parent().children.length >= 4 ? \'no-copy\' : \'\'">\n              {{element.Type__c | elementLabel:true}}\n        </span>\n    </h3>\n    <input type="checkbox"\n           ng-if="element.parent().type() === \'Edit Block\' && !notDispOnTmltObj.hasOwnProperty(element.type())"\n           ng-init="setDisOnTpltPrp(element)"\n           ng-model="element.PropertySet__c.disOnTplt"\n           ng-disabled="scriptElement.IsActive__c || $parent.$parent.scriptElement.isDisabled()"\n           ng-click="onCanvasCheckboxElementClick(element, $event);" />\n\n    <ul class="drop-zone"\n        ng-if="element.allowsChildren()"\n        ng-show="!element.collapse"\n        dnd-disable-if="$parent.$parent.scriptElement.isDisabled() || element.saving"\n        dnd-list="element.children"\n        dnd-allowed-types="element.allowedTypes()"\n        ng-attr-data-element-id="{{element.Id}}"\n        dnd-drop="onDNDDrop(event, index, item, external, type, \'itemType\', $parent.$parent.element)"\n        dnd-dragover="onDNDMove(event, index, type, external, \'itemType\', $parent.$parent.element)">\n        <li class="canvasElement {{element | className}}"\n            ng-class="{\'active\': activeElement == element,\'filter\': element.filter}"\n            ng-repeat="element in element.children track by $index"\n            dnd-type="element.Type__c.type"\n            dnd-disable-if="$parent.$parent.scriptElement.isDisabled() || element.saving"\n            dnd-draggable="element.Id"\n            dnd-effect-allowed="move"\n            dnd-selected="models.selected = item"\n            ng-click="onCanvasElementClick(element, $event)"\n            ng-include="\'canvas-element-template.tpl.html\'"></li>\n    </ul>\n</div>\n'),$templateCache.put("modal-how-to-use-this.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" aria-label="Close" ng-click="$hide()"><span\n            aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" ng-bind="title"></h4>\n      </div>\n      <div class="modal-body howto-modal">\n        <div bs-active-pane="tabs.activeTab" bs-tabs="bs-tabs" class="right-tabs howto-tabs" ng-if="lwcEnabled">\n          <div ng-repeat="tab in tabs" title="{{tab.title}}" disabled="{{tab.disabled}}" ng-bind="tab.content" bs-pane="bs-pane">\n          </div>\n        </div>\n        <div ng-show="tabs.activeTab === 0 || !lwcEnabled" class="howto-content">\n          <p>This OmniScript can be used in one of two ways: standalone or embedded</p>\n          <h4>Standalone</h4>\n          <p>Once "Activated", the OmniScript can be accessed using one of Vlocity\'s prebuilt pages: </p>\n          <form class="form-inline" style="margin-bottom: 25px;">\n            <div class="form-group">\n              <select class="form-control" ng-options="mode for mode in modes" ng-model="currentMode"\n                style="max-width:250px"></select>\n            </div>&nbsp;&nbsp;\n            <div class="radio">\n              <label class="radio-inline" style="margin-top: 6px;"\n                ng-hide="currentMode == \'Mobile\' || currentMode == \'Communities\'">\n                <input type="radio" value="lightning" ng-model="vertOrHoriz" /> Lightning\n              </label>\n              <label class="radio-inline" style="margin-top: 6px;"\n                ng-hide="currentMode == \'Mobile\' || currentMode == \'Communities\'">\n                <input type="radio" value="newport" ng-model="vertOrHoriz" /> Newport\n              </label>\n            </div>&nbsp;&nbsp;\n          </form>\n          <p></p>\n          <div class="input-group">\n            <input type="text" class="form-control" ng-model="url" id="url" />\n            <span class="input-group-btn">\n              <button class="btn btn-default copy-btn" type="button" data-clipboard-target="#url">Copy to\n                clipboard</button>\n            </span>\n          </div>\x3c!-- /input-group --\x3e\n          <h5>Alternative URL</h5>\n          <div class="input-group">\n            <input type="text" class="form-control" ng-model="urlWithParam" id="urlWithParam" />\n            <span class="input-group-btn">\n              <button class="btn btn-default copy-btn" type="button" data-clipboard-target="#urlWithParam">Copy to\n                clipboard</button>\n            </span>\n          </div>\n          <hr>\n          <h4>Embedded</h4>\n          <p>If you have your own Visualforce page that you want to embed the script in then copy and paste the below\n            code into it:</p>\n          <button class="btn btn-default copy-btn pull-right" type="button" data-clipboard-target="#vf">Copy to\n            clipboard</button>\n          <label style="margin-right: 6px;">\n            <input type="radio" ng-model="embedLayout" value="lightning" ng-change=\'onChangeLayout(this)\' />\n            <span>Lightning</span>\n          </label>\n          <label style="margin-right: 6px;">\n            <input type="radio" ng-model="embedLayout" value="newport" ng-change=\'onChangeLayout(this)\' />\n            <span>Newport</span>\n          </label>\n          <textarea id="vf" class="form-control modal-textarea" rows="17" ng-model="textarea">\n          </textarea>\n          <p></p>\n        </div>\n        <div ng-show="tabs.activeTab === 1" class="howto-content">\n          <p>\n            <label style="margin-right: 6px;">\n              <input type="radio" ng-model="lwcLayout" value="lightning" ng-change=\'onChangeLwcLayout(this)\' />\n              <span>Lightning</span>\n            </label>\n            <label style="margin-right: 6px;">\n              <input type="radio" ng-model="lwcLayout" value="newport" ng-change=\'onChangeLwcLayout(this)\' />\n              <span>Newport</span>\n            </label>\n          </p>\n          <p>This OmniScript can be used in one of three ways: standalone, embedded or Vlocity Aura Wrapper</p>\n          <h4>Standalone</h4>\n          <p>Once Activated, the OmniScript is compiled and deployed as a standalone Lightning Web Component.\n            Access the LWC in the Salesforce Lightning App Builder in the Custom section and drag it onto the page. </p>\n          <p>Enter “newport” in the Layout parameter to render the OS using the Newport Design System.</p>\n          <p></p>\n          <hr>\n          <h4>Vlocity Aura Wrapper</h4>\n          <p>Once Activated, the OmniScript can be accessed using Vlocity’s prebuilt Aura component. Since Lightning Web Components are not yet URL addressable,\n            you can use this method to pass additional parameters into the OmniScript. For example- <strong>&amp;c__ContextId=abc</strong>.\n            Note that Salesforce requires URL parameters to be prepended with <strong>c__</strong>.</p>\n          <p>Example:</p>\n          <div class="input-group">\n            <input type="text" class="form-control" ng-model="lwcWrapperUrl" id="lwcWrapperUrl" />\n            <span class="input-group-btn">\n              <button class="btn btn-default copy-btn" type="button" data-clipboard-target="#lwcWrapperUrl">Copy to\n                clipboard</button>\n            </span>\n          </div>\n          <hr>\n          <h4>Embedded</h4>\n          <p>Once Activated, you can embed the component into any Aura or LWC component using the component tag. The component attribute <strong>prefill</strong> accepts string or javascript object.</p>\n          <p>Example:</p>\n          <div class="input-group">\n            <input type="text" class="form-control" ng-model="lwcTag" id="lwcTag" />\n            <span class="input-group-btn">\n              <button class="btn btn-default copy-btn" type="button" data-clipboard-target="#lwcTag">Copy to\n                clipboard</button>\n            </span>\n          </div>\n          <div class="input-group">\n            <input type="text" class="form-control" ng-model="lwcTag2" id="lwcTag2" />\n            <span class="input-group-btn">\n              <button class="btn btn-default copy-btn" type="button" data-clipboard-target="#lwcTag">Copy to\n                clipboard</button>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok();$hide()">{{ ::\'OmniDesOk\' | localize }}</button>\n      </div>\n    </div>\n  </div>\n</div>'),$templateCache.put("translationEditModal.tpl.html",'<div class="slds-modal__container"\n     ng-keydown="vm.preventEscapeClosingModal($event)">\n  <div class="slds-modal__header">\n    <div class="slds-notify_container"></div>\n    <h2 class="slds-text-heading_medium" id="omniscript-translation-modal-title">{{ ::\'OmniEditTranslations\'| localize:\'Edit Your OmniScript Translations\' }}\n      <div class="slds-dropdown-trigger slds-dropdown-trigger_click"\n           ng-class="{\'slds-is-open\': vm.showSettings}"\n           ng-if="vm.isFullyLoaded()">\n        <button class="slds-button slds-button_icon slds-button_icon slds-button_icon-container-more"\n                aria-haspopup="true"\n                title="More Options"\n                ng-disabled="vm.saving"\n                ng-click="vm.toggleSettings()">\n          <slds-button-svg-icon sprite="\'utility\'" icon="\'settings\'"></slds-button-svg-icon>\n          <slds-button-svg-icon sprite="\'utility\'" icon="\'down\'" size="\'small\'"></slds-button-svg-icon>\n          <span class="slds-assistive-text">More options</span>\n        </button>\n        <div class="slds-dropdown slds-dropdown_left slds-dropdown_length-with-icon-10 slds-dropdown_small">\n          <ul class="slds-dropdown__list" role="menu">\n            <li class="slds-dropdown__header slds-truncate" title="Menu Sub Heading" role="separator">\n              <span class="slds-text-title_caps">Filters</span>\n            </li>\n            <li class="slds-dropdown__item"\n                role="presentation"\n                ng-class="{\'slds-is-selected\': vm.currentFilter === \'all\'}">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{vm.currentFilter === \'all\'}}"\n                   tabindex="0"\n                   ng-click="vm.changeCurrentFilter(\'all\')">\n                  <span class="slds-truncate" title="Show all rows">\n                      <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                      All\n                  </span>\n                </a>\n            </li>\n            <li class="slds-dropdown__item"\n                role="presentation"\n                ng-class="{\'slds-is-selected\': vm.currentFilter === \'invalid-rows\'}">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{vm.currentFilter === \'invalid-rows\'}}"\n                   tabindex="0"\n                   ng-click="vm.changeCurrentFilter(\'invalid-rows\')">\n                  <span class="slds-truncate" title="Hide valid rows">\n                      <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                      Hide valid rows\n                  </span>\n                </a>\n            </li>\n            <li class="slds-has-divider_top-space" role="separator"></li>\n            <li class="slds-dropdown__header slds-truncate" title="Menu Sub Heading" role="separator">\n              <span class="slds-text-title_caps">Edit Translations for:</span>\n            </li>\n            <li class="slds-dropdown__item"\n                ng-class="{\'slds-is-selected\': translation.value === vm.currentLanguage}"\n                role="presentation"\n                ng-repeat="translation in vm.translations">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{translation.value === vm.currentLanguage}}"\n                   tabindex="0"\n                   ng-click="vm.changeLanguage(translation.value)">\n                  <span class="slds-truncate" ng-attr-title="{{::translation.label}}">\n                    <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                    {{::translation.label}}</span>\n                </a>\n              </li>\n          </ul>\n        </div>\n      </div>\n    </h2>\n  </div>\n\n  <div class="slds-modal__content slds-grid slds-grid_vertical-stretch">\n    <table class="slds-table slds-table_fixed-layout slds-table_edit slds-no-cell-focus slds-table_bordered slds-tree slds-table_tree slds-no-row-hover"\n      role="treegrid"\n      aria-owns="tree0-node0"\n      aria-readonly="true"\n      ng-if="vm.isFullyLoaded()" >\n      <thead>\n        <tr class="slds-text-title_caps">\n          <th class="slds-cell-buffer_left" scope="col">\n            <div class="slds-grid slds-grid_vertical-align-center">\n              <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small slds-m-right_x-small slds-shrink-none slds-table_tree__toggle slds-is-hidden"\n                title="Toggle"\n                tabindex="-1"\n                ng-click="vm.toggleAll()">\n                <slds-button-svg-icon sprite="\'utility\'" icon="\'chevrondown\'" size="\'small\'"></slds-button-svg-icon>\n                <span class="slds-assistive-text">Toggle</span>\n              </button>\n              <div class="slds-truncate" title="Element">Element</div>\n            </div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Property Key">Property Key</div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Custom Label Name">Custom Label Name</div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Custom Label Value  in {{vm.currentLanguageText}}">Custom Label Value in {{vm.currentLanguageText}}</div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr ng-repeat="$row in vm.rows track by $row.id" class="slds-hint-parent" role="row" ng-show="vm.showRow($row)" ng-attr-aria-level="{{::$row.depth}}"\n          ng-attr-aria-expanded="{{$row.isLeaf ? undefined : $row.isOpen }}">\n          <th data-label="Element" scope="row" class="slds-tree__item">\n            <button class="slds-button slds-button_icon slds-button_icon slds-m-right_x-small" title="Toggle" ng-click="$row.isOpen = !$row.isOpen"\n              ng-class="::{\'slds-is-disabled\': $row.isLeaf}" ng-disabled="::$row.isLeaf">\n              <slds-button-svg-icon sprite="\'utility\'" icon="\'chevronright\'" size="\'small\'"></slds-button-svg-icon>\n              <span class="slds-assistive-text">Toggle</span>\n            </button>\n            <div class="slds-truncate" ng-attr-title="{{::$row.elementName}}">\n              <a ng-if="::$row.isLeaf"\n                 ng-click=""\n                 tabindex="-1">&nbsp;</a>\n              <a ng-if="::!$row.isLeaf"\n                 ng-click=""\n                 tabindex="-1">{{::$row.elementName}}</a>\n            </div>\n          </th>\n          <td ng-if="!$row.isLeaf" colspan="3">&nbsp;</td>\n          <td data-label="Property Key" ng-if="$row.isLeaf">\n            <div class="slds-truncate" ng-attr-title="{{::$row.label}}">{{::$row.label  | readablePropertyName:$row.element}}</div>\n          </td>\n\n          <td data-label="Custom Label Name" ng-if="$row.readonly && $row.isLeaf"\n              class="slds-cell-edit"\n              ng-attr-has-default-value="{{vm.isDefaultValue($row)}}"\n              ng-attr-title="{{vm.getTableCellLabelTitle($row)}}">\n            <div class="slds-form-element slds-grid">\n              <span class="slds-truncate"\n                    ng-attr-title="{{$row.customLabelName}}"\n                    ng-bind="$row.customLabelName"></span>\n            </div>\n          </td>\n          <td data-label="Custom Label Name" ng-if="!$row.readonly && $row.isLeaf" class="slds-cell-edit"\n              ng-attr-has-default-value="{{vm.isDefaultValue($row)}}"\n              ng-attr-title="{{vm.getTableCellLabelTitle($row)}}"\n              slds-editable-cell="{{$row.readonly ? undefined : \'\'}}"\n              ng-model="$row.customLabelName"\n              is-valid="$row.isValid">\n            <div class="slds-form-element slds-grid">\n                <label class="slds-form-element__label slds-form-element__label_edit slds-no-flex"\n                       ng-attr-for="{{::$row.id}}-input">\n                    <span class="slds-assistive-text">{{::vm.label}}</span>\n                </label>\n                <div class="slds-form-element__control slds-grow">\n                    <input  type="text"\n                            class="slds-input"\n                            ng-readonly="$row.readonly"\n                            ng-model="$row.customLabelName"\n                            ng-disabled="$row.isChanging"\n                            ng-attr-id="{{::$row.id}}-input"\n                            ng-change="vm.rowChanged($row)"\n                            required="true"/>\n                </div>\n            </div>\n          </td>\n          <td data-label="Current Value" ng-if="$row.isLeaf"\n              slds-editable-cell\n              ng-model="$row.currentValue"\n              is-loading="$row.currentValueLoading">\n              <div class="slds-form-element slds-grid">\n                <label class="slds-form-element__label slds-form-element__label_edit slds-no-flex"\n                       ng-attr-for="{{::$row.id}}-input-value">\n                    <span class="slds-assistive-text">{{::vm.label}}</span>\n                </label>\n                <div class="slds-form-element__control slds-grow">\n                    <input  type="text"\n                            class="slds-input"\n                            ng-readonly="$row.readonly"\n                            ng-model="$row.currentValue"\n                            ng-disabled="$row.isChanging"\n                            ng-attr-id="{{::$row.id}}-input-value"\n                            ng-change="vm.rowChanged($row, true)"\n                            required="true"/>\n                </div>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div ng-if="vm.isFullyLoaded() == false || vm.saving"\n         ng-class="{\'slds-spinner_container\': vm.saving}">\n      <div class="slds-spinner_brand slds-spinner slds-spinner_large" aria-hidden="false" role="alert">\n        <div class="slds-spinner__dot-a"></div>\n        <div class="slds-spinner__dot-b"></div>\n      </div>\n    </div>\n  </div>\n\n  <div class="slds-modal__footer">\n    <button type="button"\n            class="slds-button slds-button_neutral"\n            ng-click="vm.cancel()"\n            ng-disabled="vm.saving"\n            id="omniscript-translation-modal-cancel-button">\n      {{ ::\'Cancel\' | localize: \'Cancel\' }}\n    </button>\n    <button type="button"\n            class="slds-button slds-button_brand"\n            ng-click="vm.save()"\n            ng-disabled="!vm.isFullyLoaded() || vm.saving"\n            id="omniscript-translation-modal-save-button">\n'+"      {{ 'OmniSaveAs' | localize: 'Save as {1}':vm.currentLanguageText }}\n    </button>\n  </div>\n</div>\n"),$templateCache.put("modal-doc-insert.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n    <div class="modal-dialog" style="width:400px;height:200px;margin-top:15%;">\n        <div class="modal-content">\n            <div class="modal-header">\n                <h4 class="modal-title vlc-debug-console-header">{{::title}}</h4>\n            </div>\n\n            <div class="modal-body">\n                <label style="display:block;">\n                    <input type = checkbox ng-model="obj.filePicker" ng-click ="clearError()">\n                    <span>Pick from existing Documents</span>\n                </label>\n                <label ng-if="!obj.filePicker" style="display:block;">\n                    <input id          = "docSelModalFile"\n                           class       = "form-control" \n                           type        = "text" \n                           placeholder = "click to browse for files" \n                           onclick     = "document.getElementById(\'filePicker\').click();" \n                           ng-model    = "obj.fileUpload">\n                    <input id        = "filePicker"\n                           type      = "file"\n                           style     = "visibility:hidden;position:absolute;"\n                           ng-click  = "clearError();obj.fileUpload=null;"\n                           onchange  = "if(this.files[0]){document.getElementById(\'docSelModalFile\').value = this.files[0].name;}else{document.getElementById(\'docSelModalFile\').value = null}"\n                           ng-model  = "obj.fileUpload"\n                           accept    = "image/*">\n                </label>\n                <label ng-if="obj.filePicker" style="display:block;">\n                    <select id="selDocuments" class="form-control" role="selectbox" ng-model="obj.selDocuments"\n                        ng-options="document as document.Name for document in obj.getDocs(true)" ng-change="clearError();">\n                    </select>\n                </label>\n                <div class="has-error"><p class="help-block" id="errorLabel"></p></div>\n            </div>\n\n            <div class="modal-footer">\n                <button ng-click="submit()" class="btn btn-default">Ok</button>\n                <button ng-click="cancel()" class="btn btn-default">Cancel</button>\n                <div class="expand" vlc-expand-collapse="" classes="vlc-debug-panel, modal-body" prop="min-height">\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>'),$templateCache.put("show-rule-property-template.tpl.html",'<div>\n    <div class="showRule input-group"\n         ng-if="!vm.rule.group">\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.isDisabled"\n               ng-model="vm.rule.field"\n               placeholder="{{ ::\'OmniDesShowEnterFldName\' | localize }}"\n               bs-options="name for name in vm.elementNames"\n               bs-typeahead\n               data-min-length="0" />\n        <div class="input-group-btn">\n            <button type="button"\n                    class="btn btn-default"\n                    ng-disabled="vm.isDisabled"\n                    ng-model="vm.rule.condition"\n                    data-html="1"\n                    bs-options="condition.value as condition.label for condition in ::vm.conditions"\n                    bs-select>\n                {{ ::\'OmniDesShowCond\' | localize }}\n                <span class="caret"></span>\n            </button>\n        </div>\n        <input type="text"\n               class="form-control"\n               ng-disabled="vm.isDisabled"\n               ng-model="vm.rule.data"\n               placeholder="{{ ::\'OmniDesShowEnterValue\' | localize }}"/>\n        <i  class="icon icon-v-information-line"\n               bs-tooltip="\'The Field Name indicates the element that wil be tested.  Test values that do not have UI elements can also be tested, for example, return values from an DataRaptor. For items that are not elements, use syntax like a:b:c to specify the full path in the data JSON. The test indicates how to compare against the value.  The &quot;Enter the value&quot; field can either be a simple text string without quotes (for an exact match), or use %element% to test against the value in another element.\'"\n               data-container=".container"\n               data-type="info"></i>\n        <div class="input-group-btn">\n            <button type="button"\n                    class="btn btn-link"\n                    ng-disabled="vm.isDisabled"\n                    ng-click="vm.deleteRule(vm.rule)">\n                <span class="icon icon-v-trash"></span>\n            </button>\n        </div>\n    </div>\n    <div class="showRuleGroup" ng-if="vm.rule.group">\n        <button type="button"\n                class="btn btn-default"\n                ng-disabled="vm.isDisabled"\n                ng-model="vm.rule.group.operator"\n                data-html="1"\n                bs-options="operator.value as operator.label for operator in ::vm.operators"\n                bs-select>\n            {{ ::\'OmniDesCanvasCondition\' | localize }}\n            <span class="caret"></span>\n        </button>\n        <i  class="icon icon-v-information-line"\n            bs-tooltip="\'Indicates whether all of the conditions must be true (AND), or just one (OR) for the condition to be true.\'"\n            data-container=".container"\n            data-type="info"></i>\n        <div ng-repeat="rule in vm.rule.group.rules track by $index"\n             show-hide-rule\n             rule="rule"\n             parent="vm.rule"\n             root-rule="vm.rootRule"\n             is-disabled="vm.isDisabled"\n             element-names="vm.elementNames"></div>\n        <button type="button"\n                class="btn btn-link"\n                ng-disabled="vm.isDisabled"\n                ng-click="vm.addCondition(vm.rule.group)">{{ ::\'OmniDesShowAddCond\' | localize }}</button>\n        <i  class="icon icon-v-information-line"\n                bs-tooltip="\'Adds another test to the condition.\'"\n                data-container=".container"\n                data-type="info"></i>\n        <button type="button"\n                class="btn btn-link"\n                ng-disabled="vm.isDisabled"\n                ng-click="vm.addGroup(vm.rule.group)">{{ ::\'OmniDesShowAddGroup\' | localize }}</button>\n        <i  class="icon icon-v-information-line"\n                bs-tooltip="\'Allows the ability to create more complicated expressions.  A group is similar to enclosing a series of tests in parenthesis in a programming language.  For example, there can be two groups that are ORed together, but inside of each group there can be an AND to ensure each of the groups tests are true).\'"\n                data-container=".container"\n                data-type="info"></i>\n        <button type="button"\n                class="btn btn-link"\n                ng-disabled="vm.isDisabled"\n                ng-if="vm.rule != vm.rootRule"\n                ng-click="vm.deleteGroup(vm.rule)">\n            <span class="icon icon-v-trash"></span>\n        </button>\n    </div>\n</div>\n'),$templateCache.put("previewIntProcedure.tpl.html",'<div class="slds-col slds-grid slds-grid_vertical-stretch slds-nowrap slds-is-relative"\n      style="max-width: calc(100vw - 29px);">\n\n  \x3c!-- Input column --\x3e\n  <div class="slds-panel dr-preview--input slds-border_right slds-size_1-of-4 slds-grid slds-grid_vertical slds-nowrap" style="max-width: 25%">\n    <div class="slds-filters__header slds-p-top_small slds-grid slds-has-divider_bottom"\n         style="flex-shrink: 0">\n      <h3 class="slds-align-middle slds-text-heading_small">{{::$root.vlocity.getCustomLabel(\'InputParameters\', \'Input Parameters\')}}</h3>\n      <button class="slds-button slds-col_bump-left" style="line-height: 1rem;" ng-click="vm.toggleJsonMode()" ng-if="!vm.jsonMode">{{::$root.vlocity.getCustomLabel(\'EditAsJSON\' , \'Edit as JSON\')}}</button>\n      <button class="slds-button slds-col_bump-left" style="line-height: 1rem;" ng-click="vm.toggleJsonMode()" ng-if="vm.jsonMode"\n        ng-disabled="vm.invalidJSON">{{::$root.vlocity.getCustomLabel(\'EditAsParams\', \'Edit as Params\')}}</button>\n    </div>\n    <div class="slds-grow slds-col slds-grid_vertical slds-grid_vertical-stretch slds-grid"\n         ng-class="{\'slds-scrollable_y\': !vm.jsonMode}"\n         ng-style="vm.jsonMode ? {\'min-height\': \'80%\'} : {}">\n      <div class="slds-panel__section slds-col slds-grid_vertical slds-grid_vertical-stretch slds-grid"\n           ng-if="!vm.jsonMode">   \n        <div class="slds-form--compound" >\n          <div class="slds-form-element__group">\n            <div class="slds-form-element__row">\n              <div class="slds-form-element slds-size_1-of-2">\n                <label class="slds-form-element__label">{{::$root.vlocity.getCustomLabel(\'Key\', \'Key\')}}</label>\n              </div>\n              <div class="slds-form-element slds-size_1-of-2">\n                <label class="slds-form-element__label">{{::$root.vlocity.getCustomLabel(\'Value\', \'Value\')}}</label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <fieldset class="slds-form--compound" ng-repeat="param in vm.params">\n          <div class="slds-form-element__group">\n            <div class="slds-form-element__row">\n              <div class="slds-form-element slds-size_3-of-7">\n                <input class="slds-input" type="text" ng-model="param.key" />\n              </div>\n              <div class="slds-form-element slds-size_3-of-7">\n                <input id="input-02" class="slds-input" type="text" ng-model="param.value" />\n              </div>\n              <div class="slds-size_1-of-7">\n                <button class="slds-button slds-button_icon slds-m-left_x-small" ng-click="vm.deleteParam(param)">\n                  <slds-button-svg-icon sprite="\'utility\'" icon="\'delete\'"></slds-button-svg-icon>\n                </button>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n        <div class="slds-text-align_center slds-m-bottom_small">\n          <button class="slds-button" ng-click="vm.addParam()">\n            <slds-button-svg-icon sprite="\'utility\'" icon="\'add\'"></slds-button-svg-icon>\n            {{::$root.vlocity.getCustomLabel(\'AddNewKeyValuePair\', \'Add New Key/Value Pair\')}}\n          </button>\n        </div>\n      </div>\n      <div class="slds-panel__section slds-col slds-grid_vertical slds-grid_vertical-stretch slds-grid"\n           style="overflow: hidden"\n           ng-if="vm.jsonMode">\n        <monaco-editor class="slds-col slds-grid slds-grid_vertical-stretch slds-p-bottom_small" \n                       ng-if="vm.jsonMode"\n                       ng-model="vm.jsonParams"\n                       style="border: 1px solid #ccc; border-radius: 4px; overflow: hidden; max-height: 100%;"\n                       monaco-options=\'{"wordWrap":true}\'></monaco-editor>\n      </div>\n    </div>\n    <div class="slds-panel__actions slds-has-divider--top">\n      <div class="slds-grid">\n        <div>\n          <a ng-click="vm.reset()" class="slds-button">{{::$root.vlocity.getCustomLabel(\'ClearData\', \'Clear Data\')}}</a>\n        </div>\n        <button class="slds-button slds-button--brand slds-col_bump-left" ng-click="vm.submitRequest()">{{::$root.vlocity.getCustomLabel(\'Execute\', \'Execute\')}}</button>\n      </div>\n    </div>\n  </div>\n\n  <div class="slds-grid slds-grid_vertical slds-grid_vertical-stretch"\n       ng-class="{\'slds-col\': !vm.sidebarOpen, \'slds-size_2-of-4\': vm.sidebarOpen}">\n    <div class="slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n      <div class="slds-grid slds-p-top_small slds-p-bottom_x-small slds-p-left_small slds-p-right_xx-large slds-has-divider_bottom">\n        <div class="slds-text-heading_small">{{::$root.vlocity.getCustomLabel(\'Response\', \'Response\')}}\n          <span class="slds-text-body--regular slds-m-left_small" ng-if="vm.requestTime">\n              <b>Browser:</b> {{vm.requestTime}}ms<i class="icon icon-v-information-line" bs-tooltip="\'Total time for full request (from clicking &quot;Execute&quot; until response displays on UI)\'"\n                            data-container=".container" data-type="info"></i> - \n              <b>Server:</b> {{vm.elapsedTimeActual}}ms<i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Total time for Salesforce Apex code to execute\'"\n                            data-container=".container" data-type="info"></i> - \n              <b>Apex CPU:</b> {{vm.elapsedTimeCPU}}ms<i class="icon icon-v-information-line" data-html="true" bs-tooltip="\'Total time for Integration Procedure specific code to execute. Cannot exceed 10000ms\'"\n                            data-container=".container" data-type="info"></i>\n              <span ng-if="vm.vlcCacheResult"><b>- Cached Response:</b> {{vm.vlcCacheResult}}</span>\n          </span>\n        </div>\n      </div>\n      <monaco-editor class="slds-col slds-grid slds-grid_vertical-stretch slds-m-around_small" readonly="readonly"\n      style="border: 1px solid #ccc; border-radius: 4px; overflow: hidden; max-height: 100%"       \n        language="{{vm.getDebugType(vm.response.returnResultsData)}}"\n        format-on-render="true"\n        monaco-options=\'{"wordWrap":true}\'\n        disabled="disabled" ng-model="vm.response.returnResultsData"></monaco-editor>\n    </div>\n  </div>\n\n  \x3c!-- DEBUG/ERROR Sidebar --\x3e\n  <div class="slds-panel slds-grid slds-grid_vertical slds-nowrap slds-panel_filters via-slds-sidebar" style="right: 0; top: 0; bottom: 0; margin-left: 0"\n  ng-class="{\'via-slds-sidebar--closed\': !vm.sidebarOpen, \'slds-size_1-of-4\': vm.sidebarOpen}">\n    <div class="slds-form_stacked slds-grow slds-col slds-grid slds-grid_vertical"\n         style="overflow:hidden">\n      <div class="slds-filters slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n        <div class="slds-filters__header slds-grid slds-has-divider_bottom">\n          <h3 class="slds-align-middle slds-text-heading_small" ng-show="vm.sidebarOpen">{{::$root.vlocity.getCustomLabel(\'ErrorsDebugOutput\', \'Errors/Debug Output\')}}</h3>\n          <button class="slds-button slds-col_bump-left slds-button_icon slds-button_icon-small" ng-attr-title="{{::$root.vlocity.getCustomLabel(\'CloseFilterPanel\', \'Close Filter Panel\')}}"\n            ng-click="vm.sidebarOpen = !vm.sidebarOpen">\n            <slds-button-svg-icon sprite="\'utility\'" icon="\'forward\'" ng-if="vm.sidebarOpen"></slds-button-svg-icon>\n            <slds-button-svg-icon sprite="\'utility\'" icon="\'back\'" ng-if="!vm.sidebarOpen"></slds-button-svg-icon>\n            <span class="slds-assistive-text">{{::$root.vlocity.getCustomLabel(\'CloseFilterPanel\', \'Close Filter Panel\')}}</span>\n          </button>\n        </div>\n        <div class="slds-filters__body slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch via-slds-filters__no-padding"\n          ng-show="vm.sidebarOpen" style="padding: 0">\n          <div class="slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n            \x3c!-- Debug Log --\x3e\n            <div class="slds-grid slds-grid_vertical slds-grid_vertical-stretch slds-section slds-border_bottom" ng-class="{\'slds-col slds-is-open\': vm.currentSection === \'debug\'}">\n              <div class="slds-section__title">\n                <button class="slds-button slds-section__title-action" ng-click="vm.toggleAccordian(\'errors\', \'debug\')">\n                  <slds-button-svg-icon sprite="\'utility\'" icon="\'switch\'" extra-classes="\'slds-section__title-action-icon slds-button__icon--left\'"></slds-button-svg-icon>\n                  {{::$root.vlocity.getCustomLabel(\'DebugLog\', \'Debug Log\')}}\n                </button>\n              </div>\n              <div class="slds-section__content slds-p-horizontal_small slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n                <div class="slds-grid slds-grid_align-end">\n                    <slds-picklist slds-options="option as option.name for option in vm.outputDropdown"\n                                    class="slds-m-bottom_small slds-size_small"\n                                    ng-model="vm.selectedOption"></slds-picklist>\n                </div>\n                <monaco-editor class="slds-col slds-grid slds-grid_vertical-stretch slds-m-bottom_small" \n                style="border: 1px solid #ccc; border-radius: 4px; overflow: hidden;" \n                  language="{{vm.selectedOption.language}}" \n                  readonly="readonly"\n                  disabled="disabled" \n                  format-on-render="true"\n                  monaco-options=\'{"wordWrap":true}\'\n                  ng-model="vm.selectedOption.response"></monaco-editor>\n              </div>\n            </div>\n\n            \x3c!-- Expected JSON/XML Output --\x3e\n            <div class="slds-grid slds-grid_vertical slds-grid_vertical-stretch slds-m-top_small slds-section slds-border_bottom" ng-class="{\'slds-col slds-is-open\': vm.currentSection === \'errors\'}">\n              <div class="slds-section__title">\n                <button class="slds-button slds-section__title-action" ng-click="vm.toggleAccordian(\'debug\', \'errors\')">\n                  <slds-button-svg-icon sprite="\'utility\'" icon="\'switch\'" extra-classes="\'slds-section__title-action-icon slds-button__icon--left\'"></slds-button-svg-icon>\n                  {{::$root.vlocity.getCustomLabel(\'Errors\', \'Errors\')}}\n                </button>\n              </div>\n              <div class="slds-section__content slds-p-horizontal_small slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n                <monaco-editor class="slds-col slds-grid slds-grid_vertical-stretch slds-m-bottom_small" \n                  style="border: 1px solid #ccc; border-radius: 4px; overflow: hidden;" \n                  language="javascript"     \n                  readonly="readonly"\n                  format-on-render="true"\n                  disabled="disabled" \n                  monaco-options=\'{"wordWrap":true}\'\n                  ng-model="vm.response.errors"></monaco-editor>\n              </div></div>\n\n            \x3c!-- Options --\x3e\n              <div class="slds-grid slds-grid_vertical slds-grid_vertical-stretch slds-m-top_small slds-section slds-border_bottom" ng-class="{\'slds-col slds-is-open\': vm.currentSection === \'options\'}">\n                  <div class="slds-section__title">\n                    <button class="slds-button slds-section__title-action" ng-click="vm.toggleAccordian(\'debug\', \'options\')">\n                    <slds-button-svg-icon sprite="\'utility\'" icon="\'switch\'" extra-classes="\'slds-section__title-action-icon slds-button__icon--left\'"></slds-button-svg-icon>\n                    {{::$root.vlocity.getCustomLabel(\'Options\', \'Options\')}}\n                    </button>\n                  </div>\n                  <div class="slds-section__content slds-p-horizontal_small slds-col slds-grid slds-grid_vertical slds-grid_vertical-stretch">\n                    <monaco-editor class="slds-col slds-grid slds-grid_vertical-stretch slds-p-bottom_small"\n                      style="border: 1px solid #ccc; border-radius: 4px; overflow: hidden; max-height: 100%;"\n                      ng-model="vm.optionsJson"\n                      language="json"\n                      format-on-render="true"\n                      monaco-options=\'{"wordWrap":true}\'></monaco-editor>\n                    <div ng-if="!vm.validJson" class="slds-text-color_error" role="alert">\n                        {{::$root.vlocity.getCustomLabel(\'DesInvalidJson\', \'Invalid JSON\')}}\n                    </div>\n                  </div>\n              </div>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div class="slds-spinner_container" ng-if="vm.requesting">\n    <div class="slds-spinner--brand slds-spinner slds-spinner--medium" role="alert">\n      <span class="slds-assistive-text">{{::$root.vlocity.getCustomLabel(\'LoadingUC\', \'Loading\')}}</span>\n      <div class="slds-spinner__dot-a"></div>\n      <div class="slds-spinner__dot-b"></div>\n    </div>\n  </div>\n</div>'),$templateCache.put("modal-edit-expression.tpl.html",'<div class="modal vlocity"\n     tabindex="-1"\n     role="dialog"\n     aria-hidden="true">\n  <div class="modal-dialog"\n       style="width:800px;height:300px;margin-top:15%;">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h4 class="modal-title vlc-debug-console-header">{{::title}}</h4>\n      </div>\n\n      <div class="modal-body">\n        <simple-expression-builder expression="obj.newVal"\n                                   aggregatemode="parentObject.$canvasElement.type() == \'Aggregate\'"\n                                   disabled="parentObject.$parentProperty.$canvasElement.scriptElement().isDisabled()"\n                                   element-names="obj.elementNames(true)"\n                                   ng-if="!$root.scriptElement.IsProcedure__c"></simple-expression-builder>\n        <monaco-editor ng-model="obj.newVal"\n                       ng-attr-readonly="{{scriptElement.isDisabled() ? \'readonly\' : undefined}}"\n                       ng-attr-disabled="{{scriptElement.isDisabled() ? \'disabled\' : undefined}}"\n                       language="vlocity-formula"\n                       style="max-width: 100%; min-height: 7rem; max-height: 7rem; padding: 0; overflow: visible; display: block; border: 1px solid #ccc; border-radius: 4px;"\n                       ng-if="$root.scriptElement.IsProcedure__c"></monaco-editor>\n      </div>\n\n      <div class="modal-footer">\n        <button ng-click="submit()"\n                class="btn btn-default">Ok</button>\n        <button ng-click="cancel()"\n                class="btn btn-default">Cancel</button>\n        <div class="expand"\n             vlc-expand-collapse=""\n             classes="vlc-debug-panel, modal-body"\n             prop="min-height">\n        </div>\n      </div>\n    </div>\n  </div>\n</div>'),$templateCache.put("confirmation.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" aria-label="Close" ng-click="$hide()"><span aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" ng-bind="title"></h4>\n      </div>\n      <div class="modal-body" ng-bind="content"></div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok();$hide()">{{ ::\'OmniDesOk\' | localize }}</button>\n        <button type="button" class="btn btn-default" ng-click="$hide()">{{ ::\'OmniDesCancel\' | localize }}</button>\n      </div>\n    </div>\n  </div>\n</div>'),$templateCache.put("alertModal.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" aria-label="Close" ng-click="$hide()"><span aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" ng-bind="title"></h4>\n      </div>\n      <div class="modal-body">\n        <div class="content" ng-bind="content" ng-if="content">\n        </div>\n        <ul ng-if="errors">\n          <li ng-repeat="error in errors">\n            {{ error }}\n          </li>\n        </ul>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok();$hide()">{{ ::\'OmniDesOk\' | localize }}</button>\n      </div>\n    </div>\n  </div>\n</div>'),$templateCache.put("alertBanner.tpl.html",'<div>\n\t<div class="vlc-notify vlc-notify_alert vlc-theme_alert-texture vlc-theme_warning" ng-show="vm.getMessage()" role="alert">\n\t\t<h2><i class="icon icon-v-claim" aria-label="Warning"></i>&nbsp;{{vm.getMessage()}}</h2>\n\t\t<button type="button" class="btn btn-close" aria-label="Close" ng-click="vm.close()">\n\t\t\t<i class="icon icon-v-close"></i>\n\t\t</button>\n\t</div>\n</div>'),$templateCache.put("convertOmniToMultiLangModal.tpl.html",'<div class="slds-modal__container"\n     ng-keydown="vm.preventEscapeClosingModal($event)">\n  <div class="slds-modal__header">\n    <div class="slds-notify_container"></div>\n    <h2 class="slds-text-heading_medium" id="omniscript-translation-modal-title">{{ ::\'OmniCustomTranslation\'| localize:\'Translate Your OmniScript\' }}\n      <div class="slds-dropdown-trigger slds-dropdown-trigger_click"\n           ng-class="{\'slds-is-open\': vm.showSettings}"\n           ng-if="vm.isFullyLoaded()">\n        <button class="slds-button slds-button_icon slds-button_icon slds-button_icon-container-more"\n                aria-haspopup="true"\n                title="More Options"\n                ng-disabled="vm.saving"\n                ng-click="vm.toggleSettings()">\n          <slds-button-svg-icon sprite="\'utility\'" icon="\'settings\'"></slds-button-svg-icon>\n          <slds-button-svg-icon sprite="\'utility\'" icon="\'down\'" size="\'small\'"></slds-button-svg-icon>\n          <span class="slds-assistive-text">More options</span>\n        </button>\n        <div class="slds-dropdown slds-dropdown_left slds-dropdown_length-with-icon-10 slds-dropdown_small">\n          <ul class="slds-dropdown__list" role="menu">\n            <li class="slds-dropdown__header slds-truncate" title="Menu Sub Heading" role="separator">\n              <span class="slds-text-title_caps">Filters</span>\n            </li>\n            <li class="slds-dropdown__item"\n                role="presentation"\n                ng-class="{\'slds-is-selected\': vm.currentFilter === \'all\'}">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{vm.currentFilter === \'all\'}}"\n                   tabindex="0"\n                   ng-click="vm.changeCurrentFilter(\'all\')">\n                  <span class="slds-truncate" title="Show all rows">\n                      <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                      All\n                  </span>\n                </a>\n            </li>\n            <li class="slds-dropdown__item"\n                role="presentation"\n                ng-class="{\'slds-is-selected\': vm.currentFilter === \'invalid-rows\'}">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{vm.currentFilter === \'invalid-rows\'}}"\n                   tabindex="0"\n                   ng-click="vm.changeCurrentFilter(\'invalid-rows\')">\n                  <span class="slds-truncate" title="Hide valid rows">\n                      <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                      Hide valid rows\n                  </span>\n                </a>\n            </li>\n            <li class="slds-has-divider_top-space" role="separator"></li>\n            <li class="slds-dropdown__header slds-truncate" title="Menu Sub Heading" role="separator">\n              <span class="slds-text-title_caps">Save Translations as:</span>\n            </li>\n            <li class="slds-dropdown__item"\n                ng-class="{\'slds-is-selected\': translation.value === vm.currentLanguage}"\n                role="presentation"\n                ng-repeat="translation in vm.translations">\n                <a role="menuitemcheckbox"\n                   ng-attr-aria-checked="{{translation.value === vm.currentLanguage}}"\n                   tabindex="0"\n                   ng-click="vm.changeLanguage(translation.value)">\n                  <span class="slds-truncate" ng-attr-title="{{::translation.label}}">\n                    <slds-svg-icon sprite="\'utility\'" icon="\'check\'" size="\'x-small\'" extra-classes="\'slds-icon_selected slds-icon-text-default slds-m-right_x-small\'"></slds-svg-icon>\n                    {{::translation.label}}</span>\n                </a>\n              </li>\n          </ul>\n        </div>\n      </div>\n    </h2>\n  </div>\n\n  <div class="slds-modal__content slds-grid slds-grid_vertical-stretch">\n    <table class="slds-table slds-table_fixed-layout slds-table_edit slds-no-cell-focus slds-table_bordered slds-tree slds-table_tree slds-no-row-hover"\n      role="treegrid"\n      aria-owns="tree0-node0"\n      aria-readonly="true"\n      ng-if="vm.isFullyLoaded()" >\n      <thead>\n        <tr class="slds-text-title_caps">\n          <th class="slds-cell-buffer_left" scope="col">\n            <div class="slds-grid slds-grid_vertical-align-center">\n              <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small slds-m-right_x-small slds-shrink-none slds-table_tree__toggle slds-is-hidden"\n                title="Toggle"\n                tabindex="-1"\n                ng-click="vm.toggleAll()">\n                <slds-button-svg-icon sprite="\'utility\'" icon="\'chevrondown\'" size="\'small\'"></slds-button-svg-icon>\n                <span class="slds-assistive-text">Toggle</span>\n              </button>\n              <div class="slds-truncate" title="Element">Element</div>\n            </div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Property Key">Property Key</div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Custom Label Name">Custom Label Name</div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Current Omni Value">Current Omniscript Value</div>\n          </th>\n          <th scope="col">\n            <div class="slds-truncate" title="Custom Label Value in {{vm.currentLanguageText}}">Custom Label Value in {{vm.currentLanguageText}}</div>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr ng-repeat="$row in vm.rows track by $row.id" class="slds-hint-parent" role="row" ng-show="vm.showRow($row)" ng-attr-aria-level="{{::$row.depth}}"\n          ng-attr-aria-expanded="{{$row.isLeaf ? undefined : $row.isOpen }}">\n          <th data-label="Element" scope="row" class="slds-tree__item">\n            <button class="slds-button slds-button_icon slds-button_icon slds-m-right_x-small" title="Toggle" ng-click="$row.isOpen = !$row.isOpen"\n              ng-class="::{\'slds-is-disabled\': $row.isLeaf}" ng-disabled="::$row.isLeaf">\n              <slds-button-svg-icon sprite="\'utility\'" icon="\'chevronright\'" size="\'small\'"></slds-button-svg-icon>\n              <span class="slds-assistive-text">Toggle</span>\n            </button>\n            <div class="slds-truncate" ng-attr-title="{{::$row.elementName}}">\n              <a ng-if="::$row.isLeaf"\n                 tabindex="-1"\n                 ng-click="">&nbsp;</a>\n              <a ng-if="::!$row.isLeaf"\n                 tabindex="-1"\n                 ng-click="">{{::$row.elementName}}</a>\n            </div>\n          </th>\n          <td ng-if="!$row.isLeaf" colspan="4">&nbsp;</td>\n          <td data-label="Property Key" ng-if="$row.isLeaf">\n            <div class="slds-truncate" ng-attr-title="{{::$row.label}}">{{::$row.label | readablePropertyName:$row.element}}</div>\n          </td>\n\n          <td data-label="Custom Label Name" ng-if="$row.isLeaf" class="slds-cell-edit"\n              ng-attr-has-default-value="{{vm.isDefaultValue($row)}}"\n              ng-attr-title="{{vm.getTableCellLabelTitle($row)}}"\n              slds-editable-cell\n              ng-model="$row.customLabelName"\n              is-valid="$row.isValid">\n            <div class="slds-form-element slds-grid">\n                <label class="slds-form-element__label slds-form-element__label_edit slds-no-flex"\n                       ng-attr-for="{{::$row.id}}-input">\n                    <span class="slds-assistive-text">{{::vm.label}}</span>\n                </label>\n                <div class="slds-form-element__control slds-grow">\n                    <input  type="text"\n                            class="slds-input"\n                            ng-model="$row.customLabelName"\n                            ng-disabled="row.isChanging"\n                            ng-attr-id="{{::$row.id}}-input"\n                            ng-change="vm.rowChanged($row)"\n                            ng-attr-placeholder="{{$row.fallbackLabelName}}"\n                            required="true"/>\n                </div>\n            </div>\n          </td>\n          <td data-label="Current Omni Value" ng-if="$row.isLeaf">\n            <div class="slds-truncate" ng-attr-title="{{::$row.currentValue}}">{{::$row.currentValue}}</div>\n          </td>\n          <td data-label="Current Value" ng-if="$row.isLeaf">\n            <div class="slds-truncate" ng-if="$row.currentLabelValue">{{$row.currentLabelValue}}</div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div ng-if="vm.isFullyLoaded() == false || vm.saving"\n         ng-class="{\'slds-spinner_container\': vm.saving}">\n      <div class="slds-spinner_brand slds-spinner slds-spinner_large" aria-hidden="false" role="alert">\n        <div class="slds-spinner__dot-a"></div>\n        <div class="slds-spinner__dot-b"></div>\n      </div>\n    </div>\n  </div>\n\n  <div class="slds-modal__footer">\n    <button type="button"\n            class="slds-button slds-button_neutral"\n            ng-click="vm.cancel()"\n            ng-disabled="vm.saving"\n            id="omniscript-translation-modal-cancel-button">\n      {{ ::\'Cancel\' | localize: \'Cancel\' }}\n    </button>\n    <button type="button"\n            class="slds-button slds-button_brand"\n            ng-click="vm.save()"\n            ng-disabled="!vm.isFullyLoaded() || vm.saving"\n            id="omniscript-translation-modal-save-button">\n'+"            {{ 'OmniSaveAs' | localize: 'Save as {1}':vm.currentLanguageText }}\n    </button>\n  </div>\n</div>\n"),$templateCache.put("confirmationModal.tpl.html",'<div class="modal vlocity" tabindex="-1" role="dialog" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header" ng-show="title">\n        <button type="button" class="close" aria-label="Close" ng-click="$hide()"><span aria-hidden="true">&times;</span></button>\n        <h4 class="modal-title" ng-bind="title"></h4>\n      </div>\n      <div class="modal-body">\n        <div class="content" ng-bind="content">\n        </div>\n      </div>\n      <div class="modal-footer">\n        <button type="button" class="btn btn-primary" ng-click="ok();$hide()">{{ ::\'OmniDesOk\' | localize }}</button>\n        <button type="button" class="btn btn-default" ng-click="$hide()">{{ ::\'OmniDesCancel\' | localize }}</button>\n      </div>\n    </div>\n  </div>\n</div>')}]);

},{}],89:[function(require,module,exports){
angular.module("oui", ["vlocity"]);

require('./factory/Save.js');

},{"./factory/Save.js":90}],90:[function(require,module,exports){
/* global History, ns */
var ScriptElement = require('../util/ScriptElement.js');
var unescapeHTML = require('../util/HtmlEncodeDecode.js').unescapeHTML;
var replaceAllFields = require('../util/fieldsMappingUtils.js').replaceAllFields;

angular.module('oui')
    .factory('save', function ($q, remoteActions, $rootScope, $timeout, $localizable, isIntegrationProcedure, $sldsToast, isOmniMetadataApiEnabled) {
        'use strict';
        var promisesInProgress = {};

        function saveVisitor(element) {
            var isScriptElement = (element === $rootScope.scriptElement);
            var isNewElement = !element.Id;
            var elementId = element.Id ? element.Id : (isNewElement && isScriptElement ? 'scriptElement' : element.Name);

            var promise = doSave(element);
            if (promise && elementId) {
                var chain = promisesInProgress[elementId];
                if (!chain) {
                    promisesInProgress[elementId] = [];
                }
                promisesInProgress[elementId].push(promise);
            }
            return promise;
        }

        function getNameOrNull(property) {
            return property ? unescapeHTML(property.Name) : null;
        }

        function compare(str1, str2) {
            return str1 && str2 &&
                String(str1).toUpperCase() === String(str2).toUpperCase();
        }

        function doSave(element) {
            var isScriptElement = (element === $rootScope.scriptElement);
            var isNewElement = !element.Id;
            var elementId = element.Id;
            var flag = false;

            if ($rootScope.scriptElement.isDisabled() || element.deleted || element.deleting) {
                return $q.when(element);
            }

            if ($rootScope.scriptElement.activating) {
                return;
            }

            if (element.saving) {
                if (isNewElement) {
                    if (isScriptElement) {
                        elementId = 'scriptElement';
                    } else {
                        elementId = element.Name;
                    }
                }
                // queue this save
                var currentChain = promisesInProgress[elementId];
                if (currentChain) {
                    return currentChain[currentChain.length - 1].then(function () {
                        var previousJson = element.originalJson,
                            json = element.asJson();
                        var isEqualToOldJson = angular.equals(json, previousJson);
                        if (!isEqualToOldJson) {
                            saveVisitor(element);
                        }
                    });
                } else {
                    promisesInProgress[elementId] = [];
                }
            } else if (elementId) {
                promisesInProgress[elementId] = [];
            }
            var previousJson = element.originalJson,
                json = element.asJson();
            var isEqualToOldJson = angular.equals(json, previousJson);

            //check name and type/subtype before checking if there is a difference
            //reason : enforcing character validation
            if (!element.Name || element.Name === '') {
                element.setErrors([{
                    message: $localizable('OmniDesMustSetName', 'You must set a name')
                }]);
                return $q.when(element);
            } else if (isOmniMetadataApiEnabled && (element.type() === 'OmniScript Configuration' || element.type() == 'Procedure Configuration') && validateOmniProcess(element) === false) {
                // Validate os type/subtype when metadata api enabled.
                return $q.when(element);
            } else if (isEqualToOldJson && !isNewElement && !element.errors) {
                return $q.when(element);
            } else if (element.type() === 'DocuSign Envelope Action') {
                var list = element.PropertySet__c.docuSignTemplatesGroup;
                if (list) {
                    for (var i = 0; i < list.length; i++) {
                        var signerList = list[i].signerList;
                        for (var j = 0; j < signerList.length; j++) {
                            flag = ((signerList[j].signerName === undefined || signerList[j].signerName === '') ||
                                (signerList[j].signerEmail === undefined || signerList[j].signerEmail === '') ||
                                (signerList[j].templateRole === undefined || signerList[j].templateRole === ''));
                            if (flag) {
                                break;
                            }
                        }
                        if (flag) {
                            break;
                        }
                    }
                    if (flag) {
                        element.setErrors([{
                            message: $localizable('OmniDesDocuRecipientErr', 'Please complete recipient information')
                        }]);
                        return $q.when(element);
                    }
                }
            } else if (element.type() === 'DocuSign Signature Action') {
                var listSig = element.PropertySet__c.docuSignTemplatesGroupSig;
                if (listSig) {
                    for (var k = 0; k < listSig.length; k++) {
                        flag = ((listSig[k].docuSignTemplate === undefined || listSig[k].docuSignTemplate === '') ||
                            (listSig[k].templateRole === undefined || listSig[k].templateRole === ''));
                        if (flag) {
                            break;
                        }
                    }
                    if (flag) {
                        element.setErrors([{
                            message: $localizable('OmniDesDocuTemplateErr', 'Please complete template information')
                        }]);
                        return $q.when(element);
                    }
                }
            } else if (element.type() === 'Edit Block') {
                var listsObMap = element.PropertySet__c.sobjectMapping;
                if (listsObMap) {
                    for (var l = 0; l < listsObMap.length; l++) {
                        flag = ((listsObMap[l].osElement === undefined || listsObMap[l].osElement === '') ||
                            (listsObMap[l].sObjectField === undefined || listsObMap[l].sObjectField === ''));
                        if (flag) {
                            break;
                        }
                    }
                    if (flag) {
                        element.setErrors([{
                            message: $localizable('OmniEditBlockMappingErr', 'Please complete sObject Maping')
                        }]);
                        return $q.when(element);
                    }
                }
            }
            // we haven't full initialized the propertyset from the server if we only have 3 keys (show, label and disOnTplt)
            if (Object.keys(element.PropertySet__c).length < 4 && !isScriptElement) {
                return $q.when(element);
            }
            if (element.originalJson && (element.originalJson[ns + 'Version__c'] === json[ns + 'Version__c'])) {
                delete json[ns + 'Version__c'];
            }
            element.originalJson = json;
            element.setSaving();
            var isScript = (element instanceof ScriptElement);
            var saveFn = isScript ? remoteActions.saveOmniScript : remoteActions.saveElement;
            json = replaceAllFields(JSON.stringify(json), isScript, true, window.IsFoundation);
            $rootScope.$broadcast('save', element);
            return saveFn.call(remoteActions, json)
                .then(function (result) {
                    var promises = [];
                    element.saving = false;
                    if (result.success) {
                        $rootScope.$broadcast('saved', element);
                        if (isNewElement) {
                            element.setId(result.id);
                            // if update the Id and have children then we need to save them all too
                            if (element.children.length > 0) {
                                for (var i = 0; i < element.children.length; i++) {
                                    promises.push(saveVisitor(element.children[i]));
                                }
                            }
                            if (isScriptElement && isNewElement) {
                                $timeout(function () {
                                    var location = window.location;
                                    var pageName = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);
                                    var newUrl = '/apex/' + ns + pageName +
                                        (location.search.length === 0 ? '?' : location.search + '&') +
                                        'id=' + result.id;
                                    if (window.top !== window) {
                                        if (window.sforce && window.sforce.console && window.sforce.console.isInConsole()) {
                                            sforce.console.getEnclosingPrimaryTabId(function (parentTabResponse) {
                                                sforce.console.getEnclosingTabId(function (response) {
                                                    if (response.id === parentTabResponse.id) {
                                                        sforce.console.openPrimaryTab(null, newUrl, true);
                                                    } else {
                                                        sforce.console.openSubtab(parentTabResponse.id, newUrl, true);
                                                    }
                                                    sforce.console.closeTab(response.id);
                                                });
                                            });
                                        } else if (window.sforce && window.sforce.one && window.sforce.one.navigateToURL) {
                                            window.sforce.one.navigateToURL(newUrl);
                                        } else {
                                            History.pushState('', '', newUrl);
                                        }
                                    } else {
                                        History.pushState('', '', newUrl);
                                    }
                                });
                            }
                        }
                        if (isScriptElement) {
                            var titleEl = document.querySelector('title');
                            if (titleEl) {
                                titleEl.innerText = (isIntegrationProcedure ? 'IP: ' : 'OmniScript: ') +
                                    $rootScope.scriptElement.Name;
                            }
                            // also need to update the language in case it was default to the users language
                            promises.push(remoteActions.getOmniScript($rootScope.scriptElement.Id)
                                .then(function (omniScriptResult) {
                                    var scriptElement = $rootScope.scriptElement;
                                    omniScriptResult = replaceAllFields(JSON.stringify(omniScriptResult), isScript, false, window.IsFoundation);
                                    if (omniScriptResult[ns + 'Language__c'] &&
                                        !/&/.test(omniScriptResult[ns + 'Language__c'])) {
                                        scriptElement.Language__c = omniScriptResult[ns + 'Language__c'];
                                    }
                                    if (omniScriptResult[ns + 'Type__c'] &&
                                        compare(omniScriptResult[ns + 'Type__c'], scriptElement.Type__c)) {
                                        scriptElement.Type__c = omniScriptResult[ns + 'Type__c'];           // Replace due OWC-337
                                    }
                                    if (omniScriptResult[ns + 'SubType__c'] &&
                                        compare(omniScriptResult[ns + 'SubType__c'], scriptElement.SubType__c)) {
                                        scriptElement.SubType__c = omniScriptResult[ns + 'SubType__c'];           // Replace due OWC-337
                                    }
                                    scriptElement.Version__c = omniScriptResult[ns + 'Version__c'];
                                    scriptElement.LastModifiedDate = omniScriptResult.LastModifiedDate;
                                    scriptElement.LastModifiedById = omniScriptResult.LastModifiedById;
                                    scriptElement.LastModifiedBy = getNameOrNull(omniScriptResult.LastModifiedBy);
                                    if (isNewElement) {
                                        // also update the Version, Owner & Created fields
                                        scriptElement.CreatedById = omniScriptResult.CreatedById;
                                        scriptElement.CreatedDate = omniScriptResult.CreatedDate;
                                        scriptElement.CreatedBy = getNameOrNull(omniScriptResult.CreatedBy);
                                        scriptElement.Owner = getNameOrNull(omniScriptResult.Owner);
                                    }
                                }));
                        }
                    } else {
                        element.setErrors(result.errors);
                    }
                    if (promises) {
                        return $q.all(promises).then(function () {
                            return element;
                        });
                    }
                    return element;
                }).catch(function (err) {
                    $sldsToast({
                        title: 'Failed to save',
                        content: err && err.message ? err.message : JSON.stringify(err),
                        severity: 'error',
                        autohide: false
                    });
                });
        }


        /**
         * Helper method to validate OmniScript and OmniIntegrationProcedure elements.
         * @param {*} element The OmniProcess configuration element.
         * @returns {boolean} True when Type and SubType meet validation requirements.
         */
        function validateOmniProcess(element) {
            return validateTypeSubType(element, 'Type') && validateTypeSubType(element, 'SubType');
        }

        /**
         * Helper method to validate Type or SubType fields on OmniProcess configuration elements.
         * @param {*} element The omniProcess configuration element. May be OmniScript or Integration Procedure.
         * @param {string} fieldName Name of the field to validate, Type or SubType.
         * @returns {boolean} True when field meets pattern and length requirements.
         */
        function validateTypeSubType(element, fieldName) {
            var maxLength = getTypeSubtypeMaxLength(element);
            var isValid = true;

            if (element[fieldName + '__c'] && /^[a-z0-9]+$/i.test(element[fieldName + '__c']) === false) {
                element.setErrors([{ message: $localizable('OmniDes' + fieldName + 'PatternMismatchApi', fieldName + ' must be an alphanumeric text and contain no spaces or underscores.') }]);
                isValid = false;
            } else if (element[fieldName + '__c'] && element[fieldName + '__c'].length > maxLength) {
                element.setErrors([{ message: $localizable('OmniMaxLengthWithLabel', '{0} has the maximum length of').replace('{0}', fieldName) + ' ' + maxLength + '.' }]);
                isValid = false;
            }

            return isValid
        }

        /**
         * Helper method to return the max lenght of the type/subType fields when the metadata api is enabled.
         * @param {*} element
         * @returns {Number}
         */
        function getTypeSubtypeMaxLength(element) {
            var UNIQUE_NAME_LENGTH = 255;
            var UNIQUE_NAME_PATTERN = 'Type_SubType_Language_Version';
            var OMNISCRIPT_LANGUAGE_MAX_LENGTH = 40;
            var PROCEDURE_LANGUAGE_MAX_LENGTH = 'Process'.length;
            var LANGUAGE_MAX_LENGTH = 0;
            var UNDERSCORE_LENGTH = UNIQUE_NAME_PATTERN.match(/_/g).length;
            var VERSION_MAX_LENGTH = '0001'.length;

            if (element.type() === 'OmniScript Configuration') {
                LANGUAGE_MAX_LENGTH = OMNISCRIPT_LANGUAGE_MAX_LENGTH;
            } else if (element.type() == 'Procedure Configuration') {
                LANGUAGE_MAX_LENGTH = PROCEDURE_LANGUAGE_MAX_LENGTH;
            }

            return Math.floor((UNIQUE_NAME_LENGTH - LANGUAGE_MAX_LENGTH - VERSION_MAX_LENGTH - UNDERSCORE_LENGTH) / 2);
        }

        return saveVisitor;
    });

},{"../util/HtmlEncodeDecode.js":92,"../util/ScriptElement.js":94,"../util/fieldsMappingUtils.js":95}],91:[function(require,module,exports){
/* globals ns */
'use strict';
var idFunction = require('../util/generateId.js');
var unescapeHTML = require('../util/HtmlEncodeDecode.js').unescapeHTML;
var PaletteElement = require('../util/PaletteElement.js');
var ScriptElement = require('../util/ScriptElement.js');
var requiredProperties = require('../util/requiredProperties.js');

var nameSpacePropsRegex = /^(Active__c|Level__c|OmniScriptId__c|OmniScriptVersion__c|Order__c|ParentElementId__c|ReusableOmniScript__c|SearchKey__c|Type__c|InternalNotes__c)$/i;

/*
 * Represents an element in the middle canvas
 * which may have one or more children
 */
function CanvasElement(paletteElement, isFoundation) {
    if (!paletteElement) {
        throw 'You must set a PaletteElement';
    }
    this.Type__c = paletteElement;
    this.ParentElementId__c = null;
    if (paletteElement.scriptElement) {
        this.PropertySet__c = {
            'Type': paletteElement.scriptElement.Type__c,
            'Sub Type': paletteElement.scriptElement.SubType__c,
            'Language': paletteElement.scriptElement.Language__c
        };
    } else {
        this.PropertySet__c = {};
    }
    this.PropertySet__c.show = {
        group: {
            operator: 'AND',
            rules: []
        }
    };
    this.OmniScriptId__c = null;
    this.SearchKey__c = null;
    this.Order__c = null;
    this.Active__c = true;
    this.Name = idFunction(this.Type__c.prettyName(true, isFoundation));
    this.Id = null;
    this.InternalNotes__c = null;
    this.children = [];
    var me = this;
    this.children.splice = function () {
        if (arguments.length === 3) {
            arguments[2].ParentElementId__c = me.Id;
            arguments[2].OmniScriptId__c = me.OmniScriptId__c;
        }
        var result = Array.prototype.splice.apply(this, arguments);
        // update Order__c
        for (var i = 0; i < this.length; i++) {
            this[i].Order__c = i + 1;
        }
        return result;
    };
}

CanvasElement.prototype.type = function () {
    return this.Type__c.label;
};

CanvasElement.fromJson = function (json, isFoundation) {
    var propSet = JSON.parse(json[ns + 'PropertySet__c']);
    if (propSet == null) {
        propSet = {};
    }
    var paletteElement = PaletteElement.getPaletteElement(json[ns + 'Type__c'], propSet);
    if (!paletteElement) {
        console.log('Warning: Couldn\'t find existing palatte element for ' + json[ns + 'Type__c']);
        paletteElement = PaletteElement.factory(angular.extend({
            Name: json[ns + 'Type__c']
        }, propSet));
    }
    var canvasElement = new CanvasElement(paletteElement, isFoundation);
    canvasElement.Id = json.Id;
    canvasElement.Name = unescapeHTML(json.Name);
    idFunction.registerExistingPrefix(json.Name);
    canvasElement.ParentElementId__c = json[ns + 'ParentElementId__c'];
    canvasElement.PropertySet__c = propSet;
    canvasElement.OmniScriptId__c = json[ns + 'OmniScriptId__c'];
    canvasElement.SearchKey__c = json[ns + 'SearchKey__c'];
    canvasElement.Order__c = json[ns + 'Order__c'];
    canvasElement.Level__c = json[ns + 'Level__c'];
    canvasElement.Active__c = json[ns + 'Active__c'];
    canvasElement.InternalNotes__c = json[ns + 'InternalNotes__c'] ? unescapeHTML(json[ns + 'InternalNotes__c']) : null;
    if (!canvasElement.PropertySet__c.show) {
        canvasElement.PropertySet__c.show = {
            group: {
                operator: 'AND',
                rules: []
            }
        };
    }
    if (propSet.hasOwnProperty('showPersistentComponent')) {
        propSet.showPersistentComponent = CanvasElement.convertShowPersistentComponentToMap(canvasElement, propSet);
    }
    allElementsById[json.Id] = canvasElement;
    canvasElement.originalJson = json;
    return canvasElement;
};

CanvasElement.convertShowPersistentComponentToMap = function (canvasElement, propSet) {
    // convert from array of true/false into map of persistentComponentId to bool
    var scriptElement = canvasElement.scriptElement();
    if (!scriptElement) {
        return [];
    }
    var newShowPersistentComponent = {};
    if (angular.isArray(scriptElement.PropertySet__c.persistentComponent)) {
        if (!angular.isArray(propSet.showPersistentComponent)) {
            propSet.showPersistentComponent = [propSet.showPersistentComponent];
        }
        scriptElement.PropertySet__c.persistentComponent.forEach(function (persistentComponent, index) {
            newShowPersistentComponent[persistentComponent.id] = propSet.showPersistentComponent.length > index ? propSet.showPersistentComponent[index] || false : false;
        });
    }
    return newShowPersistentComponent;
};

CanvasElement.prototype.allowsChild = function (childPaletteElement) {
    var childLabel = childPaletteElement.label,
        isAllowedAsChild = false;
    switch (this.type()) {
        case 'OmniScript':
            isAllowedAsChild = /^(OmniScript|Step)$/.test(childLabel);
            break;
        case 'Step':
            isAllowedAsChild = !childPaletteElement.isNavigation();
            break;
        case 'Block':
            isAllowedAsChild = !childPaletteElement.isNavigation() && !childPaletteElement.isGroupedControl();
            break;
        default:
            break;
    }
    return isAllowedAsChild;
};

CanvasElement.prototype.allowedTypes = function () {
    return this.Type__c.allowedTypes();
};

CanvasElement.prototype.allowsChildren = function () {
    return this.allowedTypes().length > 0;
};

CanvasElement.prototype.isBlock = function () {
    return /^Block$/.test(this.type());
};

CanvasElement.prototype.isStep = function () {
    return /Cache Block|Try Catch Block|Loop Block|Conditional Block/.test(this.type()) || /^Step/.test(this.type());
};

CanvasElement.prototype.isAction = function () {
    return /Action$/.test(this.type());
};

CanvasElement.prototype.isInput = function () {
    return this.Type__c.isInput();
};

CanvasElement.prototype.parent = function () {
    if (this.ParentElementId__c) {
        return CanvasElement.getById(this.ParentElementId__c);
    } else if (this.OmniScriptId__c) {
        return ScriptElement.getById(this.OmniScriptId__c);
    }
};

CanvasElement.prototype.scriptElement = function () {
    if (this.OmniScriptId__c) {
        return ScriptElement.getById(this.OmniScriptId__c);
    }
};

CanvasElement.prototype.delete = function () {
    this.deleted = true;
    var parent = this.parent();
    if (parent) {
        var existingIndex = parent.children.indexOf(this);
        parent.children.splice(existingIndex, 1);
        if (this.ParentElementId__c) {
            this.ParentElementId__c = null;
        } else if (this.OmniScriptId__c) {
            this.OmniScriptId__c = null;
        }
    }
};

CanvasElement.prototype.clone = function (isFoundation) {
    var newElement = new CanvasElement(this.Type__c, isFoundation);
    for (var i = 0; i < this.children.length; i++) {
        var childClone = this.children[i].clone(isFoundation);
        newElement.children.push(childClone);
    }
    for (var property in this) {
        if (this.hasOwnProperty(property) &&
            !angular.isObject(this[property]) &&
            !angular.isFunction(this[property]) &&
            !/^(\$\$hashKey|Id|Name)$/gi.test(property)) {
            newElement[property] = this[property];
        } else if (/^PropertySet__c$/.test(property)) {
            newElement[property] = angular.copy(this[property]);
        }
    }
    return newElement;
};

CanvasElement.prototype.setId = function (id) {
    this.Id = id;
    for (var i = 0; i < this.children.length; i++) {
        this.children[i].ParentElementId__c = id;
    }
    allElementsById[id] = this;
};

CanvasElement.prototype.asJson = function () {
    var json = {
        Name: this.Name,
        Id: this.Id
    };
    for (var property in this) {
        if (this.hasOwnProperty(property)) {
            if (nameSpacePropsRegex.test(property) && (this[property] != null ||
                    // if null and the property didn't exist in originalJson
                    (this.originalJson && this[property] == null && this.originalJson[ns + property] != null))) {
                json[ns + property] = this[property];
            }
        }
    }
    var propSet = angular.copy(this.PropertySet__c);
    if (propSet.show) {
        propSet.show = resetExpressionIfEmpty(propSet.show);
    }
    if (propSet.validateExpression) {
        propSet.validateExpression = resetExpressionIfEmpty(propSet.validateExpression);
    }
    // OMNI-271 - only set label to name if this is the first time the Element
    //            is being saved
    if (this.Type__c.type !== 'OmniScript' && this.scriptElement().Language__c !== 'Multi-Language') {
        if (!propSet.label && !this.Id) {
            propSet.label = this.PropertySet__c.label = this.Name;
        } else if (propSet.label === '') {
            propSet.label = null;
        }
    }
    if (propSet.hasOwnProperty('showPersistentComponent')) {
        // turn this into an array based on order of persistentComponents in ScriptElement
        var scriptElement = this.scriptElement();
        if (scriptElement) {
            var arrayOfShowPersistentComponent = [];
            if (scriptElement.PropertySet__c.persistentComponent) {
                scriptElement.PropertySet__c.persistentComponent.forEach(function (persistentComponent, index) {
                    arrayOfShowPersistentComponent[index] = propSet.showPersistentComponent[persistentComponent.id];
                });
            }
            propSet.showPersistentComponent = arrayOfShowPersistentComponent;
        }
    }

    if (this.originalJson && this.originalJson[ns + 'PropertySet__c']) {
        propSet = cleanUnnecessaryEmptyPropsOnPropertySet(propSet,
            JSON.parse(this.originalJson[ns + 'PropertySet__c']),
            requiredProperties[this.type()]);
    }
    json[ns + 'PropertySet__c'] = JSON.stringify(propSet);
    if (this.Type__c.type === 'OmniScript') {
        json[ns + 'Type__c'] = 'OmniScript';
    } else {
        json[ns + 'Type__c'] = json[ns + 'Type__c'].label;
    }
    return json;
};

function cleanUnnecessaryEmptyPropsOnPropertySet(propSet, originalPropSet, skipProperties) {
    Object.keys(propSet).forEach(function (key) {
        if (skipProperties && skipProperties.indexOf(key) !== -1) {
            return;
        }
        if (propSet[key] === '' || propSet[key] == null) {
            if (originalPropSet[key] === undefined) {
                delete propSet[key];
            }
        }
    });
    return propSet;
}

function resetExpressionIfEmpty(object) {
    if (object && object.group && object.group.rules && object.group.rules.length === 0) {
        return null;
    }
    return object;
}

CanvasElement.prototype.setSaving = function () {
    if (this.OmniScriptId__c) {
        this.errors = null;
        this.saving = true;
    }
};

CanvasElement.prototype.setOmniScriptId = function (omniScriptId) {
    this.OmniScriptId__c = omniScriptId;
    for (var i = 0; i < this.children.length; i++) {
        this.children[i].setOmniScriptId(omniScriptId);
    }
};

CanvasElement.prototype.toString = function () {
    return 'Element: ' + this.Name;
};

CanvasElement.prototype.setErrors = function (errors) {
    this.errors = errors;
};

CanvasElement.prototype.hasErrors = function (errors) {
    return this.errors && this.errors.length > 0;
};

CanvasElement.prototype.each = function (expFunction) {
    expFunction(this);
    for (var i = 0; i < this.children.length; i++) {
        this.children[i].each(expFunction);
    }
};

var allElementsById = {};

CanvasElement.getById = function (id) {
    return allElementsById[id];
};

module.exports = CanvasElement;

},{"../util/HtmlEncodeDecode.js":92,"../util/PaletteElement.js":93,"../util/ScriptElement.js":94,"../util/generateId.js":96,"../util/requiredProperties.js":97}],92:[function(require,module,exports){
var escape = document.createElement('textarea');
function escapeHTML(html) {
    escape.innerHTML = html;
    return escape.innerHTML;
}

function unescapeHTML(html) {
    escape.innerHTML = html;
    return escape.value;
}

exports.escapeHTML = escapeHTML;
exports.unescapeHTML = unescapeHTML;

},{}],93:[function(require,module,exports){
var ScriptElement = require('../util/ScriptElement.js');

/*
 * Represents an Element in the palatte
 * of drag/droppable canvas elements
 */
function PaletteElement(label, type, scriptElement) {
    'use strict';
    this.label = label;
    this.type = type;
    this.scriptElement = scriptElement;

    if (elementsSupportedInLwc.includes(label) === true || type === 'OmniScript') {
        this.lwcEnabled = true;
    }
}

const elementsSupportedInLwc = ["DataRaptor Extract Action", "DataRaptor Turbo Action", "DataRaptor Transform Action", "DataRaptor Post Action",
    "Integration Procedure Action", "Navigate Action", "Remote Action", "Rest Action", "Set Values", "Set Errors", "Text Block", "Formula",
    "Radio Group", "Step", "Checkbox", "Currency", "Custom Lightning Web Component", "Date", "Date/Time (Local)", "Email", "Lookup", "Multi-select",
    "Number", "OmniScript", "Radio", "Range", "Select", "Telephone", "Text", "Text Area", "Time", "URL", "DocuSign Envelope Action",
    "DocuSign Signature Action", "Email Action", "Validation", "Block", "Edit Block", "Type Ahead Block", "File", "Image", "Password",
    "Action Block", "Disclosure", "Calculation Action", "Aggregate", "Matrix Action", "Delete Action", "Line Break"
];

PaletteElement.prototype.prettyName = function (isDropped, isFoundation) {
    'use strict';
    if (/Rest/i.test(this.label)) {
        if (/^rest action$/i.test(this.label))
            return this.label.replace(/\brest\b/i, 'HTTP');
        else
            return this.label.replace(/\brest\b/i, 'REST');
    } else if (/^Validation$/.test(this.label)) {
        return 'Messaging';
    } else if (/^Custom Lightning Web Component$/.test(this.label)) {
        return 'Custom LWC';
    } else if (isDropped && /^Type Ahead Block$/.test(this.label)) {
        return this.label.substring(0, this.label.lastIndexOf('Block')-1);
    //OMNI-2769
    } else if (/^Date\/Time \(Local\)$/.test(this.label)) {
        return "Date\/Time";
    } else if (/List Merge Action/.test(this.label)) {
        return "List Action";
    } else if (isFoundation && /Matrix Action/i.test(this.label)) {
        return 'Decision Matrix Action';
    } else if (isFoundation && /Calculation Action/i.test(this.label)) {
        return 'Expression Set Action';
    } else {
        return this.label;
    }
};

PaletteElement.prototype.isNavigation = function() {
    'use strict';
    return this.type == 'navigation';
};

PaletteElement.prototype.isScript = function() {
    'use strict';
    return this.type == 'OmniScript';
};

PaletteElement.prototype.isGroupedControl = function() {
    'use strict';
    return this.type == 'groupedControl';
};

PaletteElement.prototype.isInput = function() {
    'use strict';
    return (this.type == 'input' || this.type == 'typeahead-excluded-input' || this.type == 'editblock-excluded-input');
};

PaletteElement.prototype.isAction = function() {
    'use strict';
    return (this.type == 'action' || this.type == 'typeahead-action' || this.type == 'common-action' || this.type == 'editblock-action');
};

PaletteElement.prototype.toString = function() {
    'use strict';
    return 'Palette: ' + this.label;
};

PaletteElement.prototype.allowedTypes = function() {
    'use strict';
    if (this.label === 'OmniScript' || /^Input Block$/i.test(this.label) || /^Radio Group$/i.test(this.label)) {
        return [];
    }

    if (this.label === 'Conditional Block' || this.label === 'Loop Block' || this.label === 'Cache Block' || this.label === 'Try Catch Block') {
        return ['navigation','action', 'typeahead-action', 'common-action', 'editblock-action', 'input', 'typeahead-excluded-input', 'editblock-excluded-input', 'groupedControl', 'selectable-items', 'inputblock', 'filterblock', 'docuSign-signature-action', 'typeahead-block','edit-block', 'radiogroup'];
    } else if (this.label === 'Step') {
        return ['action', 'typeahead-action', 'common-action', 'editblock-action', 'input', 'typeahead-excluded-input', 'editblock-excluded-input', 'groupedControl', 'selectable-items', 'inputblock', 'filterblock', 'docuSign-signature-action', 'typeahead-block','edit-block', 'radiogroup', 'action-block'];
    } else if (this.isNavigation()) {
        return ['action', 'typeahead-action', 'common-action', 'editblock-action', 'input', 'typeahead-excluded-input', 'editblock-excluded-input', 'groupedControl', 'filterblock','edit-block', 'radiogroup'];
    } else if (this.isGroupedControl()) {
        return ['action', 'typeahead-action', 'common-action', 'editblock-action', 'input', 'typeahead-excluded-input', 'editblock-excluded-input', 'selectable-items', 'groupedControl', 'docuSign-signature-action', 'typeahead-block', 'radiogroup'];
    } else if (this.type == 'filterblock') {
        return ['filter'];
    } else if (this.type == 'typeahead-block') {
        return ['typeahead-action', 'common-action', 'input'];
    } else if(this.type == 'edit-block') {
        return ['editblock-action', 'common-action', 'input', 'typeahead-excluded-input', 'groupedControl', 'typeahead-block', 'radiogroup'];
    } else if (this.type === 'action-block') {
        return ['action', 'common-action', 'typeahead-action', 'editblock-action'];
    } else {
        return [];
    }
};

PaletteElement.factory = function(label) {
    'use strict';
    var paletteElement = null;
    if (angular.isString(label)) {
        if (/^(Step|OmniScript|Conditional Block|Loop Block|Cache Block|Try Catch Block)$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'navigation');
        } else if (/^OmniForm$/i.test(label) && window.showLegacyOmniStudioUi) {
            paletteElement = new PaletteElement(label, 'action');
        } else if (/^Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'groupedControl');
        } else if (/^DocuSign Signature Action/i.test(label)) {
            paletteElement = new PaletteElement(label, 'docuSign-signature-action');
        } else if (/(Action$|^Set)/i.test(label)) {
            if (/^DataRaptor Extract Action$/i.test(label) || /^Calculation Action$/i.test(label) || /^DataRaptor Turbo Action$/i.test(label)) {
                paletteElement = new PaletteElement(label, 'typeahead-action');
            } else if(/^Matrix Action$/i.test(label) || /^Delete Action$/i.test(label)) {
                paletteElement = new PaletteElement(label, 'editblock-action');
            } else if(/^Remote Action$/i.test(label) || /^Rest Action$/i.test(label) || /^Integration Procedure Action$/i.test(label)) {
                paletteElement = new PaletteElement(label, 'common-action');
            } else {
                paletteElement = new PaletteElement(label, 'action');
            }
        } else if (/^Filter Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'filterblock');
        } else if (/^Filter$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'filter');
        } else if (/^Input Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'inputblock');
        } else if (/^Radio Group$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'radiogroup');
        } else if (/^Selectable Items/i.test(label)) {
            paletteElement = new PaletteElement(label, 'selectable-items');
        } else if (/^Type Ahead Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'typeahead-block');
        } else if (/^Edit Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'edit-block');
        } else if (/^Action Block$/i.test(label)) {
            paletteElement = new PaletteElement(label, 'action-block')
        } else {
            if(editBlockExcludedElements[label]) {
                paletteElement = new PaletteElement(label, 'editblock-excluded-input');
            } else if (!typeaheadExcludedElements[label]) {
                paletteElement = new PaletteElement(label, 'input');
            } else {
                paletteElement = new PaletteElement(label, 'typeahead-excluded-input');
            }
        }
        allElements[label] = paletteElement;
    } else if (label instanceof ScriptElement) {
        var scriptElement = label;
        paletteElement = new PaletteElement(scriptElement.Name, 'OmniScript', scriptElement);
    } else if (angular.isObject(label)) {
        var json = label;
        paletteElement = new PaletteElement(unescapeHTML(json.Name), 'OmniScript',{
            Type__c:     json[ns + 'Type__c'] ? unescapeHTML(json[ns + 'Type__c']) : null,
            SubType__c:  json[ns + 'SubType__c'] ? unescapeHTML(json[ns + 'SubType__c']) : null,
            Language__c: json[ns + 'Language__c'] ? unescapeHTML(json[ns + 'Language__c']) : null
        });
    }
    return paletteElement;
};

PaletteElement.getPaletteElement = function(label, configuration, scriptEle) {
    'use strict';
    if (label === 'OmniForm' || (
        !configuration.hasOwnProperty('Type') &&
        !configuration.hasOwnProperty('Sub Type') &&
        !configuration.hasOwnProperty('Language'))) {
        if (allElements[label]) {
            return allElements[label];
        } else {
            return new PaletteElement(label, configuration);
        }
    } else {
        // need to look up for a re-usable script with the matching
        // Type__c, SubType__c and Language__c
        try {
            return allElements.scripts[configuration.Type][configuration['Sub Type']][configuration.Language];
        } catch (e) {
            return new PaletteElement(label, "OmniScript", scriptEle);
        }
    }
};

var allElements = {
    'scripts': {}
};

var typeaheadExcludedElements = {
    'Disclosure':'Disclosure',
    'File':'File',
    'Filter':'Filter',
    'Image':'Image',
    'Lookup':'Lookup',
    'Password':'Password',
    'Signature':'Signature',
    'Headline':'Headline',
    'Text Block':'Text Block',
    'Geolocation':'Geolocation',
    'Validation':'Validation'
};

var editBlockExcludedElements = {
    'Submit':'Submit',
    'Geolocation':'Geolocation'
}

module.exports = PaletteElement;

},{"../util/ScriptElement.js":94}],94:[function(require,module,exports){
/* globals ns */
'use strict';
var unescapeHTML = require('../util/HtmlEncodeDecode.js').unescapeHTML;
var nameSpacePropsRegex = /(IsActive__c|AdditionalInformation__c|IsReusable__c|IsProcedure__c|JSON_Output__c|Language__c|SubType__c|Type__c|Version__c|TestHTMLTemplates__c|CustomJavaScript__c|LastPreviewPage__c|IsLwcEnabled__c|ProcedureResponseCacheType__c|DisableMetadataCache__c|RequiredPermission__c|IsTest__c)$/i;
var allScriptsById = {};

/*
 * ScriptElement represents the OmniScript root object all
 * forms are designed for
 */
function ScriptElement(json) {
    this.Id = json.Id;
    if (this.Id) {
        // OMNI-559 - do not clobber the existing instance
        //            instead return it
        if (allScriptsById[this.Id]) {
            return allScriptsById[this.Id];
        }
        allScriptsById[this.Id] = this;
    }
    this.Type__c = json[ns + 'Type__c'] ? unescapeHTML(json[ns + 'Type__c']) : null;
    this.SubType__c = json[ns + 'SubType__c'] ? unescapeHTML(json[ns + 'SubType__c']) : null;
    if (json[ns + 'PropertySet__c']) {
        this.PropertySet__c = JSON.parse(unescapeHTML(json[ns + 'PropertySet__c']));
    } else {
        this.PropertySet__c = {};
    }
    this.TestHTMLTemplates__c = json[ns + 'TestHTMLTemplates__c'] ?
        unescapeHTML(json[ns + 'TestHTMLTemplates__c']) : '';
    this.CustomJavaScript__c = json[ns + 'CustomJavaScript__c'] ?
        unescapeHTML(json[ns + 'CustomJavaScript__c']) : '';
    this.IsActive__c = json[ns + 'IsActive__c'];
    this.IsReusable__c = !!json[ns + 'IsReusable__c'];
    this.Version__c = json[ns + 'Version__c'];
    this.Language__c = json[ns + 'Language__c'] ? unescapeHTML(json[ns + 'Language__c']) : null;
    this.Version__c = json[ns + 'Version__c'];
    this.LastPreviewPage__c = json[ns + 'LastPreviewPage__c'] ? unescapeHTML(json[ns + 'LastPreviewPage__c']) : null;
    this.IsProcedure__c = !!json[ns + 'IsProcedure__c'];
    this.IsLwcEnabled__c = !!json[ns + 'IsLwcEnabled__c'];
    this.CanvasType = this.IsProcedure__c ? 'Procedure Configuration' : 'Script Configuration';
    this.Name = unescapeHTML(json.Name);
    this.OwnerId = json.OwnerId;
    this.Owner = json.Owner ? unescapeHTML(json.Owner.Name) : null;
    this.CreatedById = json.CreatedById;
    this.CreatedBy = json.CreatedBy ? unescapeHTML(json.CreatedBy.Name) : null;
    this.CreatedDate = json.CreatedDate;
    this.LastModifiedDate = json.LastModifiedDate;
    this.LastModifiedById = json.LastModifiedById;
    this.LastModifiedBy = json.LastModifiedBy ? unescapeHTML(json.LastModifiedBy.Name) : null;
    this.children = [];
    this.AdditionalInformation__c = json[ns + 'AdditionalInformation__c'] ?
        unescapeHTML(json[ns + 'AdditionalInformation__c']) : null;
    this.ProcedureResponseCacheType__c = json[ns + 'ProcedureResponseCacheType__c'] ? json[ns + 'ProcedureResponseCacheType__c'] : '';
    this.DisableMetadataCache__c = !!json[ns + 'DisableMetadataCache__c'];
    this.RequiredPermission__c = json[ns + 'RequiredPermission__c'] ? json[ns + 'RequiredPermission__c'] : '';
    this.IsTest__c = !!json[ns + 'IsTest__c'];
    // fix up persistentComponent to be an array
    if (this.PropertySet__c.persistentComponent && !angular.isArray(this.PropertySet__c.persistentComponent)) {
        this.PropertySet__c.persistentComponent = [this.PropertySet__c.persistentComponent];
    }
    this.isDisabled = function () {
        return this.IsActive__c;
    }
    var me = this;
    this.children.splice = function () {
        if (arguments.length === 3) {
            arguments[2].OmniScriptId__c = me.Id;
        }
        var result = Array.prototype.splice.apply(this, arguments);
        // update Order__c
        for (var i = 0; i < this.length; i++) {
            this[i].Order__c = i + 1;
        }
        return result;
    };
    this.originalJson = this.asJson();
}

ScriptElement.prototype.isAction = function () {
    return false;
};

ScriptElement.prototype.allowedTypes = function () {
    return ['navigation', 'action', 'typeahead-action', 'editblock-action', 'common-action', 'OmniScript', 'action-block'];
};

ScriptElement.prototype.type = function () {
    return this.CanvasType;
};

ScriptElement.prototype.setId = function (id) {
    this.Id = id;
    if (this.children) {
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].setOmniScriptId(id);
        }
    }
    allScriptsById[this.Id] = this;
};

ScriptElement.prototype.asJson = function () {
    var json = {
        Name: this.Name,
        Id: this.Id
    };
    for (var property in this) {
        if (nameSpacePropsRegex.test(property)) {
            json[ns + property] = this[property];
        }
    }
    var propSet = angular.copy(this.PropertySet__c);
    json[ns + 'PropertySet__c'] = JSON.stringify(propSet);
    return json;
};

ScriptElement.prototype.setSaving = function () {
    this.errors = null;
    this.saving = true;
};

ScriptElement.prototype.setErrors = function (errors) {
    this.errors = errors;
};

ScriptElement.prototype.hasErrors = function (errors) {
    return this.errors && this.errors.length > 0;
};

ScriptElement.getById = function (id) {
    return allScriptsById[id];
};

ScriptElement.prototype.each = function (expFunction) {
    expFunction(this);
    if (this.children) {
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].each(expFunction);
        }
    }
};

ScriptElement.prototype.scriptElement = function () {
    return this;
};

ScriptElement.reset = function () {
    allScriptsById = {};
};

module.exports = ScriptElement;

},{"../util/HtmlEncodeDecode.js":92}],95:[function(require,module,exports){
// var omniObjectFoundationMap = {
//     "AdditionalInformation__c": "Description",
//     "CustomJavaScript__c": 'CustomJavaScript',
//     "DisableMetadataCache__c": "IsMetadataCacheDisabled",
//     "ElementTypeToHTMLTemplateList__c": "ElementTypeComponentMapping",
//     "IsActive__c": "IsActive",
//     "IsLwcEnabled__c": "IsWebCompEnabled",
//     "IsProcedure__c": "IsIntegrationProcedure",
//     "IsReusable__c": "IsOmniScriptEmbeddable",
//     "IsTest__c": "IsTestProcedure",
//     "Language__c": "Language",
//     "LastPreviewPage__c": "LastPreviewPage",
//     "LwcId__c": "LwcId__c",
//     "OmniProcessType__c": "OmniProcessType",
//     "ProcedureResponseCacheType__c": "ResponseCacheType",
//     "PropertySet__c": "PropertySetConfig",
//     "ProcedureKey__c": "OmniProcessKey",
//     "Version__c": "VersionNumber",
//     "IsTest__c": "IsTestProcedure",
//     "TestHTMLTemplates__c": "CustomHtmlTemplates",
//     "SubType__c": 'SubType',
//     "RequiredPermission__c": "RequiredPermission",
// };
// var omniElementFoundationMap = {
//     "OmniScriptId__c": "OmniProcessId",
//     "Active__c": "IsActive",
//     "Order__c": "SequenceNumber",
//     "PropertySet__c": "PropertySetConfig"
// };
// we should just use window.OmniScriptFieldMappings, window.OmniElementFieldMappings
// window.OmniScriptFieldMappings is AdditionalInformation__c:Description
// or AdditionalInformation__c:Description__c

function replaceAllFields(json, isOmni, beforeSave, isFoundation) {
    function processEachArrayEle(beforeSave, tempSO, ns, jsonObj, mapping) {
        for (var fieldName in mapping) {
            if (beforeSave) {
                // This is from UI to Server
                // UI is either oui_dailylwc__AdditionalInformation__c
                // or AdditionalInformation__c
                if (jsonObj[ns + fieldName] !== undefined) {
                    // tempSO = true, replace oui_dailylwc__AdditionalInformation__c with oui_dailylwc__Description__c
                    // tempSO = false, replace oui_dailylwc__AdditionalInformation__c with Description
                    // temp needed to handle cases such as tempSO = true, replace oui_dailylwc__Type__c with oui_dailylwc__Type__c
                    const temp = jsonObj[ns + fieldName];
                    delete jsonObj[ns + fieldName];
                    jsonObj[tempSO ? ns + mapping[fieldName] : mapping[fieldName]] = temp;
                }
                if (jsonObj[fieldName] !== undefined) {
                    // tempSO = true, replace AdditionalInformation__c with oui_dailylwc__Description__c
                    // tempSO = false, replace AdditionalInformation__c with Description
                    jsonObj[tempSO ? ns + mapping[fieldName] : mapping[fieldName]] = jsonObj[fieldName];
                    delete jsonObj[fieldName];
                }
            } else {
                // This is from Server to UI
                if (tempSO) {
                    // replace oui_dailylwc__Description__c with oui_dailylwc__AdditionalInformation__c
                    if (jsonObj[ns + mapping[fieldName]] !== undefined) {
                        // temp needed to handle cases such as tempSO = true, replace oui_dailylwc__Type__c with oui_dailylwc__Type__c
                        const temp = jsonObj[ns + mapping[fieldName]];
                        delete jsonObj[ns + mapping[fieldName]];
                        jsonObj[ns + fieldName] = temp;
                    }
                } else {
                    // replace Description with oui_dailylwc__AdditionalInformation__c
                    // replace Description__c with oui_dailylwc__AdditionalInformation__c
                    if (jsonObj[mapping[fieldName]] !== undefined) {
                        jsonObj[ns + fieldName] = jsonObj[mapping[fieldName]];
                        delete jsonObj[mapping[fieldName]];
                    }
                }
            }
        }
    }

    let jsonObj,
        ns = fileNsPrefix();
    if (isFoundation) {
        let mapping = angular.copy(isOmni ? window.OmniScriptFieldMappings : window.OmniElementFieldMappings);
        delete mapping.Name;
        // need to double check all field name that is an exact sub string of another field
        delete mapping.OmniScriptId__r;

        // whether it's OmniProcess__c or OmniProcess
        let tempSO = window.OmniScriptObjectName.endsWith('__c')

        jsonObj = JSON.parse(json);
        // Need to take care of Array case (Element, Resuable Script)
        // or None Array case (OmniScript)
        if (angular.isArray(jsonObj)) {
            for (let i = 0; i < jsonObj.length; i++) {
                processEachArrayEle(beforeSave, tempSO, ns, jsonObj[i], mapping);
            }
        } else {
            processEachArrayEle(beforeSave, tempSO, ns, jsonObj, mapping);
        }
    } else {
        jsonObj = JSON.parse(json);
    }
    return jsonObj;
}
exports.replaceAllFields = replaceAllFields;
},{}],96:[function(require,module,exports){
var idFunction = (function idFunction() {
  var prefixCounts = {"OmniScript Component": 1};
  var fn = function(prefix) {
    prefix = prefix ? prefix : "OmniScript Component";
    prefix = prefix.replace(/\brest\b/i, "REST");
    if (!prefixCounts[prefix]) {
      prefixCounts[prefix] = 1;
    }
    // string is never null
    return (prefix + " " + (prefixCounts[prefix]++)).replace(/\s/g,'');
  };
  fn.registerExistingPrefix = function(name) {
    var nameParts = name.split(/(?=[A-Z0-9 ])/);
    if (!isNaN(nameParts[nameParts.length - 1])) {
      var count = parseInt(nameParts[nameParts.length - 1], 10),
          key = nameParts.splice(0, nameParts.length - 1).join(' ');
      if (!prefixCounts[key] || prefixCounts[key] <= count) {
        prefixCounts[key] = count + 1;
      }
    }
  };
  return fn;
})();
module.exports = idFunction;
},{}],97:[function(require,module,exports){
var requiredProperties = {
    'Selectable Items': [
        'modalHTMLTemplateId','modalController','modalSize',
        'maxCompareSize','modalConfigurationSetting', 'accessibleInFutureSteps'
    ],
    'Block':['conditionType', 'accessibleInFutureSteps', 'repeatClone'],
    'Checkbox':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly', 
      'optionSource', 'controllingField'],
    'Currency':['conditionType','debounceValue', 'repeatClone','readOnly'],
    'Date':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Date/Time (Local)':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Disclosure':['conditionType', 'accessibleInFutureSteps','readOnly'],
    'Email':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Lookup':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Multi-select':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly', 'horizontalMode',
       'optionSource', 'controllingField'],
    'Number':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Password':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Radio':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly', 
      'horizontalMode', 'optionSource', 'controllingField'],
    'Range':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Select':['conditionType', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Signature':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Step':['conditionType', 'knowledgeOptions', 'remoteOptions', 'remoteClass', 'remoteMethod', 'remoteTimeout'],
    'Telephone':['conditionType', 'accessibleInFutureSteps', 'debounceValue', 'repeatClone','readOnly'],
    'Text':['conditionType', 'accessibleInFutureSteps', 'debounceValue', 'repeatClone','readOnly'],
    'Text Area':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Time':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'URL':['conditionType', 'debounceValue', 'accessibleInFutureSteps', 'repeatClone','readOnly'],
    'Filter Block':['accessibleInFutureSteps'],
    'Filter':['accessibleInFutureSteps'],
    'Input Block':['accessibleInFutureSteps']
};

module.exports = requiredProperties;
},{}],98:[function(require,module,exports){
(function () {
    'use strict';
    /*jshint -W030*/

    var tempMgr  = {
        ootb : {
            ' ': null,
            'vlcSelectableItem.html': 'vlcSelectableItem.html',
            'vlcSmallItems.html': 'vlcSmallItems.html',
            'vlcCardList.html': 'vlcCardList.html',
            'vlcPaymentList.html': 'vlcPaymentList.html',
            'vlcAssetList.html': 'vlcAssetList.html',
            'vlcSelectableItemV2.html':'vlcSelectableItemV2.html',
            'vlcSmallItemsV2.html':'vlcSmallItemsV2.html',
            'vlcSelectableItemHyb.html':'vlcSelectableItemHyb.html',
            'vlcSmallItemsHyb.html':'vlcSmallItemsHyb.html'
        },

        getModalTemplates: function(uiTemplates) {
            var obj = {};
            uiTemplates.map(function(template) {
                if (/^OmniScript Modal$/.test(template['Type__c'])) {
                    obj[template.Name] = template.Name;
                }
            });

            return obj;

        },

        getRedirectTemplates: function(uiTemplates) {
            var obj = {};
            uiTemplates.map(function(template) {
                if (/^OmniScript Redirect$/.test(template['Type__c'])) {
                    obj[template.Name] = template.Name;
                }
            });
            return obj;
        },

        getSelectableTemplates: function(uiTemplates) {
            var obj = {};
            uiTemplates.map(function(template) {
                if (/^OmniScript Selectable Items$/.test(template['Type__c'])) {
                    obj[template.Name] = template.Name;
                }
            });

            for (var prop in this.ootb) {
                if (this.ootb.hasOwnProperty(prop)) {
                    obj[prop] = this.ootb[prop];
                }
            }
            return obj;
        },

        getGenTemplates: function(uiTemplates) {
            var obj = {};
            uiTemplates.map(function(template) {
                if (/^OmniScript$/.test(template['Type__c'])) {
                    obj[template.Name] = template.Name;
                }
            });

            return obj;
        },

        getInputBlockTemplates: function(uiTemplates) {
            var obj = {};
            uiTemplates.map(function(template) {
                obj[template.Name] = template.Name;
            });

            return obj;

        },

        getDefaultValues: function(label, obj) {
            var map = {
                'modalHTMLTemplateId': 'vlcModalContent.html',
                'modalConfigurationSetting.modalHTMLTemplateId': 'vlcProductConfig.html',
                'inputBlock': 'vlcTableSample.html',
                'Submit.redirectTemplateUrl': 'vlcApplicationAcknowledge.html',
                'Submit.confirmRedirectTemplateUrl': 'vlcApplicationConfirmation.html',
                'DataRaptor Extract Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Remote Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Rest Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Done Action.redirectTemplateUrl': 'vlcMobileConfirmation.html',
                'Calculation Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'DocuSign Envelope Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'PDF Action.redirectTemplateUrl': 'vlcPDF.html',
                'DataRaptor Post Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'DataRaptor Transform Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Matrix Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Delete Action.redirectTemplateUrl': 'vlcAcknowledge.html',
                'Post to Object Action.redirectTemplateUrl': 'vlcApplicationAcknowledgeV2.html',
                'Review Action.redirectTemplateUrl': 'vlcApplicationConfirmationV2.html',
                'vlcProductConfig.html': 'vlcProductConfig.html'
            };

            if (map[label]) {
                obj[map[label]] = map[label];
            }
            return obj;
        },

        getTemplates: function(uiTemplates, property) {
            if (!(angular.isArray(uiTemplates))) {
                return {};
            }

            if (/modal/i.test(property.label)) {
                if (/persistentComponent\.\d+\.modalConfigurationSetting\.modalHTMLTemplateId/.test(property.label)) {
                    if (property.$canvasElement && property.$canvasElement.PropertySet__c &&
                            property.$canvasElement.PropertySet__c.persistentComponent) {
                        var persistentComponentConf = property.$canvasElement.PropertySet__c.persistentComponent;
                        var index = +property.label.split('.')[1];
                        if (persistentComponentConf.length > index) {
                            if (persistentComponentConf[index].id === 'vlcCart') {
                                return this.getDefaultValues('vlcProductConfig.html',this.getModalTemplates(uiTemplates));
                            }
                            else {
                                return this.getModalTemplates(uiTemplates);
                            }
                        }
                    }
                    return {};
                } else {
                    return this.getDefaultValues(property.label,this.getModalTemplates(uiTemplates));
                }
            }

            if (/redirect/i.test(property.label) && property.$canvasElement.CanvasType === 'Script Configuration') {
                return {
                    'vlcSaveForLaterAcknowledge.html':'vlcSaveForLaterAcknowledge.html'
                };
            } else if (/redirect/i.test(property.label) && property.$canvasElement['Type__c']) {
                return this.getDefaultValues(property.$canvasElement['Type__c'].label + '.' + property.label,
                                                this.getRedirectTemplates(uiTemplates));
            }

            if (property.$canvasElement['Type__c'] && /input block/i.test(property.$canvasElement['Type__c'].label)) {
                return this.getDefaultValues('inputBlock',this.getGenTemplates(uiTemplates));
            }

            if (property.$canvasElement['Type__c'] && /selectable/i.test(property.$canvasElement['Type__c'].label)) {
                return this.getDefaultValues(property.label,this.getSelectableTemplates(uiTemplates));
            }

            //this is the default case
            return this.getGenTemplates(uiTemplates);
        }
    };

    module.exports = tempMgr ;
}());

},{}],99:[function(require,module,exports){
angular.module('ouihome')
       .factory('backcompatExport', function(remoteActions, $localizable, OmniScriptFieldMappingsNamespace) {
           var $scope = {};

           return function backcompatExport(script, dontRetryCompile, useJSONV2)  {
                var exportResult,
                    initialPromise;
                if (useJSONV2) {
                    initialPromise = remoteActions.BuildJSONV2(script.Id)
                } else {
                    initialPromise = remoteActions.exportOmniScript(script.Id);
                }
                initialPromise
                    .then(function(result) {
                        var pom = document.createElement('a');
                        if (!angular.isString(result)) {
                            // OMNI-421 - always make into array for backcompat
                            if (!angular.isArray(result) && useJSONV2 !== true) {
                                result = [result];
                            }
                            result = JSON.stringify(result);
                            result = result.replace('&quot;', '&amp;quot;');
                        }
                        try {
                            pom.setAttribute('href', 'data:application/zip;charset=utf-8,' + encodeURIComponent(result));
                            var name = (script[OmniScriptFieldMappingsNamespace.Type__c] || '') + '_' + (script[OmniScriptFieldMappingsNamespace.SubType__c] || '') + '_' + (script[OmniScriptFieldMappingsNamespace.Language__c] || '');
                            name = name.replace(/ /g, '');
                            pom.setAttribute('download', name + '.json');
                            pom.style.display = 'none';
                            document.body.appendChild(pom);
                            pom.click();
                        } catch (e) {
                            window.alert($localizable('OmniHomeFailExport', 'Unable to export {1}', script.Name));
                        }
                        document.body.removeChild(pom);
                    }, function(error) {
                        if (dontRetryCompile) {
                            window.alert($localizable('OmniHomeFailExport', 'Unable to export {1}', script.Name));
                        } else {
                            // if false then try compile it
                            var iframe = document.createElement('iframe');
                            iframe.src = window.previewUrl + '?id=' + script.Id;
                            iframe.style.display = 'none';
                            $(iframe).load(function() {
                                setTimeout(function() {
                                    document.body.removeChild(iframe);
                                    backcompatExport(script, true, useJSONV2);
                                }, 5000);
                            });
                            document.body.appendChild(iframe);
                        }
                    });
           };
       });

},{}],100:[function(require,module,exports){
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    /* jshint eqnull:true */
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}
},{}],101:[function(require,module,exports){
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function(predicate) {
    /* jshint eqnull:true */
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}
},{}],102:[function(require,module,exports){
// Production steps of ECMA-262, Edition 6, 22.1.2.1
// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from?v=example
if (!Array.from) {
  Array.from = (function () {
    var toStr = Object.prototype.toString;
    var isCallable = function (fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function (value) {
      var number = Number(value);
      if (isNaN(number)) { return 0; }
      if (number === 0 || !isFinite(number)) { return number; }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function (value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike/*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method 
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }());
}
},{}],103:[function(require,module,exports){
/**
 * Module: sharedObjectService[For using common data/Object for using in different controller]
 */
angular.module('sharedObjectService', [])

    /**
     * Factory NotSupportedElmService[For getting non supported element for base template]
     * @param  {[function]} 
     * @return {[Service]}
     */
    .factory('NotSupportedElmService', function() {
        var NotSupportedElmService;

        NotSupportedElmService = (function() {
            function NotSupportedElmService() {}

            /**
             * [getList return list of not supported element in Base template]
             * @return {[type]} [object]
             */
            NotSupportedElmService.prototype.getList = function() {
                return {
                    "Image": "Image",
                    "Block": "Block",
                    "File": "File",
                    "Disclosure": "Disclosure",
                    "Headline": "Headline",
                    "Validation": "Validation",
                    "Line Break": "Line Break",
                    "Text Block": "Text Block",
                    "Radio Group": "Radio Group",
                    "Type Ahead Block":"Type Ahead Block"
                }
            };
            return NotSupportedElmService;
    })();

    if (typeof(window.angularSharedService) === 'undefined' || window.angularSharedService === null) {
        window.angularSharedService = new NotSupportedElmService();
    }

    return window.angularSharedService;
});
},{}]},{},[1]);
})();

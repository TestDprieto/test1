/***************************
****************************
DO NOT EDIT THIS FILE DIRECTLY - IT IS AUTO-GENERATED!
Instead edit the JS files in the javascript directory:

****************************
****************************/

(function(){
  var fileNsPrefix = (function() {
    'use strict';
    var scripts = document.getElementsByTagName('script');
    var lastScript = scripts[scripts.length - 1];
    var scriptName = lastScript.src;
    var parts = scriptName.split('/');
    var thisScript = parts[parts.length - 1];
    if (thisScript === "") {
      thisScript = parts[parts.length - 2];
    }
    var lowerCasePrefix = thisScript.indexOf('__') == -1 ? '' : thisScript.substring(0, thisScript.indexOf('__') + 2);
    //check for the cached namespace first
    lowerCasePrefix = lowerCasePrefix === '' && localStorage.getItem('nsPrefix') ? localStorage.getItem('nsPrefix'): lowerCasePrefix;
    
    if(lowerCasePrefix !== ''){
        lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
    }
    if (lowerCasePrefix.length === 0) {
      return function() {
        //then check if the app has put a namespace and take that one as it is newer
        lowerCasePrefix = window.nsPrefix ? window.nsPrefix: lowerCasePrefix;
        //add the underscore if it doesn't have them    
        if(lowerCasePrefix !== ""){
            lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
        }  
        return lowerCasePrefix;
      };
    } else {
      var resolvedNs = null;
      return function() {
        if (resolvedNs) {
          return resolvedNs;
        }
        // hack to make scan SF objects for the correct case
        try {
          var tofind = lowerCasePrefix.replace('__', '');
          var name;
          var scanObjectForNs = function(object, alreadySeen) {
            if (object && object !== window && alreadySeen.indexOf(object) == -1) {
                alreadySeen.push(object);
                Object.keys(object).forEach(function(key) {
                  if (key === 'ns') {
                    // do ns test
                    if (typeof object[key] === 'string' && object[key].toLowerCase() === tofind) {
                      name = object[key] + '__';
                      return false;
                    }
                  }
                  if (Object.prototype.toString.call(object[key]) === '[object Array]') {
                    object[key].forEach(function(value) {
                      var result = scanObjectForNs(value, alreadySeen);
                      if (result) {
                          name = result;
                          return false;
                      }
                    });
                  } else if (typeof object[key] == 'object') {
                    var result = scanObjectForNs(object[key], alreadySeen);
                    if (result) {
                        name = result;
                        return false;
                    }
                  }
                  if (name) {
                    return false;
                  }
                });
                if (name) {
                  return name;
                }
            };
          }
          if(typeof Visualforce !== 'undefined') { //inside VF
            scanObjectForNs(Visualforce.remoting.Manager.providers, []);  
          } else {
            return lowerCasePrefix;
          }
          if (name) {
            return resolvedNs = name;
          } else {
            return resolvedNs = lowerCasePrefix;
          }
        } catch (e) {
          return lowerCasePrefix;
        }
      };
    }
  })();

  var fileNsPrefixDot = function() {
    var prefix = fileNsPrefix();
    if (prefix.length > 1) {
      return prefix.replace('__', '.');
    } else {
      return prefix;
    }
};
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module('cpqdirectives', ['vlocity', 'mgcrea.ngStrap.datepicker', 'mgcrea.ngStrap.timepicker'])
.config(['remoteActionsProvider', function(remoteActionsProvider) {
    remoteActionsProvider.setRemoteActions(window.remoteActions || {});
}])
.config(['$locationProvider', function($locationProvider) {
    $locationProvider.html5Mode(true);
}]);

require('./modules/cpqdirectives/controller/NewObjectRecordController.js');
require('./modules/cpqdirectives/directive/VlocAssignAttrsFields.js');
require('./modules/cpqdirectives/directive/VlocAttachment.js');
require('./modules/cpqdirectives/directive/VlocAttachments.js');
require('./modules/cpqdirectives/directive/VlocAttribute.js');
require('./modules/cpqdirectives/directive/VlocAttributeMetadata.js');
require('./modules/cpqdirectives/directive/VlocContextRule.js');
require('./modules/cpqdirectives/directive/VlocContextRules.js');
require('./modules/cpqdirectives/directive/VlocCustomView.js');
require('./modules/cpqdirectives/directive/VlocDataTable.js');
require('./modules/cpqdirectives/directive/VlocFieldMetadata.js');
require('./modules/cpqdirectives/directive/VlocImgCarousel.js');
require('./modules/cpqdirectives/directive/VlocLayoutManagement.js');
require('./modules/cpqdirectives/directive/VlocLayoutElement.js');
require('./modules/cpqdirectives/directive/VlocObjAttrsFields.js');
require('./modules/cpqdirectives/directive/VlocObjField.js');
require('./modules/cpqdirectives/directive/VlocOfferPricingComponent.js');
require('./modules/cpqdirectives/directive/VlocObjectPricing.js');
require('./modules/cpqdirectives/directive/VlocObjectTypes.js');
require('./modules/cpqdirectives/directive/VlocObjectType.js');
require('./modules/cpqdirectives/factory/CpqService.js');
require('./modules/cpqdirectives/templates/templates.js');

},{"./modules/cpqdirectives/controller/NewObjectRecordController.js":3,"./modules/cpqdirectives/directive/VlocAssignAttrsFields.js":4,"./modules/cpqdirectives/directive/VlocAttachment.js":5,"./modules/cpqdirectives/directive/VlocAttachments.js":6,"./modules/cpqdirectives/directive/VlocAttribute.js":7,"./modules/cpqdirectives/directive/VlocAttributeMetadata.js":8,"./modules/cpqdirectives/directive/VlocContextRule.js":9,"./modules/cpqdirectives/directive/VlocContextRules.js":10,"./modules/cpqdirectives/directive/VlocCustomView.js":11,"./modules/cpqdirectives/directive/VlocDataTable.js":12,"./modules/cpqdirectives/directive/VlocFieldMetadata.js":13,"./modules/cpqdirectives/directive/VlocImgCarousel.js":14,"./modules/cpqdirectives/directive/VlocLayoutElement.js":15,"./modules/cpqdirectives/directive/VlocLayoutManagement.js":16,"./modules/cpqdirectives/directive/VlocObjAttrsFields.js":17,"./modules/cpqdirectives/directive/VlocObjField.js":18,"./modules/cpqdirectives/directive/VlocObjectPricing.js":19,"./modules/cpqdirectives/directive/VlocObjectType.js":20,"./modules/cpqdirectives/directive/VlocObjectTypes.js":21,"./modules/cpqdirectives/directive/VlocOfferPricingComponent.js":22,"./modules/cpqdirectives/factory/CpqService.js":23,"./modules/cpqdirectives/templates/templates.js":24}],2:[function(require,module,exports){
angular.module('productclassadmin', ['vlocity', 'ngSanitize', 'cpqdirectives', 'sldsangular'])
.config(['remoteActionsProvider', function(remoteActionsProvider) {
    remoteActionsProvider.setRemoteActions(window.remoteActions || {});
}])
.config(['$locationProvider', function($locationProvider) {
    $locationProvider.html5Mode(true);
}]);

require('./CpqDirectives.js');
require('./modules/productclassadmin/controller/ProductClassAdminController.js');

},{"./CpqDirectives.js":1,"./modules/productclassadmin/controller/ProductClassAdminController.js":25}],3:[function(require,module,exports){
angular.module('cpqdirectives')
.controller('NewObjectRecordController', ['$scope', '$location', 'remoteActions', '$timeout',
    function ($scope, $location, remoteActions, $timeout) {
        $scope.nsp = fileNsPrefix();
        $scope.SLDSICON = SLDSICON;
        $scope.objectLabel = $location.search().label;
        $scope.objectName = $location.search().objName;
        $scope.objectId = $location.search().objId;
        $scope.recordType = $location.search().recordType;
        $scope.editItem = {};

        $scope.hasObjectTypes = false;
        $scope.objectTypes = [];
        $scope.objTypeSelect = {
            isCreateable: 'true',
            isRequired: 'false',
            label: 'object type',
            type: 'OTPICKLIST',
        };

        console.log('NEW RECORD init: ', $scope.objectLabel, $scope.objectName, $scope.objectId, $scope.recordType);
        $scope.getFieldSetsByName = function() {
            remoteActions.getFieldSetsByName($scope.objectName).then(function(results) {
                console.log('getFieldSets ' + $scope.objectName + $scope.recordType + ': ', results);
                var fsKey = $scope.nsp + 'new' + $scope.objectId;
                if (results[fsKey] === undefined) {
                    $scope.fieldSet = null;
                } else {
                    $scope.fieldSet = results[fsKey];
                }
            });
        };

        $scope.describeObject = function() {
            remoteActions.describeObject($scope.objectName).then(function(results) {
                console.log('describeObject ' + $scope.objectName + ': ', results);
                $scope.objectFields = results;
            });
        };

        $scope.getObjectPicklistsByName = function() {
            remoteActions.getObjectPicklistsByName($scope.objectName).then(function(results) {
                $scope.objectPicklists = {};
                for (var key in results) {
                    if (key.endsWith('__c')) {
                        $scope.objectPicklists[$scope.nsp + key] = results[key];
                    } else {
                        $scope.objectPicklists[key] = results[key];
                    }
                }
                console.log('getObjectPicklistsByName ' + $scope.objectName + ': ', $scope.objectPicklists);
            });
        };

        $scope.saveItem = function(event) {
            console.log('saveItem:editItem: ', $scope.editItem);

            var itemToSave = {};
            for (var key in $scope.editItem) {
                if (key !== '$$hashKey') {
                    itemToSave[key] = $scope.editItem[key];
                }
            }

            $scope.createItem(event, itemToSave);

            if ($scope.editItem.objectType !== null) {
                console.log('set object type');
            }

        };

        $scope.createItem = function(event, itemToSave) {
            var originalText;
            if (event) {
                originalText = event.currentTarget.innerText;
                event.currentTarget.disabled = true;
                event.currentTarget.innerText = 'Saving...';
            }

            remoteActions.createObject($scope.objectName, itemToSave).then(function(results) {
                console.log('create object ' + $scope.objectName + ': ', results);
                if (event) {
                    event.currentTarget.innerText = originalText;
                    event.currentTarget.disabled = false;
                }

                $scope.launchTab(results);
                //TODO: show save success message
            }, function(error) {
                //TODO: show save failure message
                if (event) {
                    event.currentTarget.innerText = 'Error!';
                    $timeout(function() {
                        event.currentTarget.innerText = originalText;
                        event.currentTarget.disabled = false;
                    }, 5000);
                }
            });
        };

        $scope.launchTab = function(item) {
            var data = {
                'objectId': $scope.objectId,
                'obj': item,
                'closeCurrentTab': true
            };
            var broadcastAction = {
                'eventName': 'launchConsoleTab',
                'eventData': data
            };
            if (window.frameElement !== null) {
                // create a iframe resize event binding with the parent
                window.parent.bindIframeEvents('broadcast', broadcastAction);
            }
        };

        $scope.getObjectTypes = function(item) {
            console.log('getObjectTypes:item: ', item);
            remoteActions.getObjectTypes(item).then(function(results) {
                console.log('getObjectTypes result: ', results);
                for (var key in results) {
                    var res = {
                        label: results[key].Name,
                        value: results[key].Id
                    };
                    $scope.objectTypes.push(res);
                }

                // $scope.objectTypes = results;
                if (results.length > 0) {
                    $scope.hasObjectTypes = true;
                }
            });
        };

        $scope.init = function() {
            console.log('$scope.editItem: ', $scope.editItem);
            $scope.getFieldSetsByName();
            $scope.describeObject();
            $scope.getObjectPicklistsByName();

            $scope.getObjectTypes($scope.objectName);
            console.log('$scope.objTypeSelect: ', $scope.objTypeSelect);
        };
        $scope.init();
    }
]);

},{}],4:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocAssignAttrsFields', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                objectId: '=',
                assignedItems: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'AssignAttrsFields.tpl.html',
            controller: function($scope) {
                $scope.nsp = fileNsPrefix();

                $scope.getAttributeFieldBindingData = function() {
                    $scope.AttrObjMap = {};
                    $scope.AttrAssgnObjMap = {};
                    $scope.attributeMap = {};
                    $scope.fieldMap = {};
                    $scope.items = [];
                    $scope.attrList = [];
                    $scope.fieldList = [];
                    $scope.allSelected = false;
                    $scope.selectedCount = 0;

                    remoteActions.getAttributeFieldBindingData($scope.objectId).then(function(results) {
                        console.log('getAttributeFieldBindingData results: ', results);
                        $scope.bindings = results.AttributeBinding__c;
                        $scope.fields = results.Field;
                        $scope.parseAAWrapper(results.AAWrapper);

                        var boundAttrMap = {};
                        var boundFieldMap = {};
                        angular.forEach($scope.bindings, function(binding) {
                            var attrId = binding[$scope.nsp + 'AttributeId__c'];
                            var attrObj = $scope.attributeMap[attrId];
                            var attrName = attrObj.Name;
                            var attrCode = attrObj.Code;
                            var fieldName = binding[$scope.nsp + 'FieldApiName__c'];
                            boundAttrMap[attrId] = {'Name': fieldName, 'Label': $scope.fields[fieldName].label};
                            boundFieldMap[fieldName] = {'Id': attrId, 'Name': attrName, 'Code': attrCode};
                        });
                        angular.forEach($scope.attributes, function(attr) {
                            var item = {};
                            item.isSelected = false;
                            item.attrId = attr.Id;
                            item.attrName = attr.Name;
                            item.attrCode = attr.Code;

                            if (boundAttrMap[attr.Id] === undefined) {
                                item.bound = false;
                                item.fieldName = '';
                                item.fieldLabel = '';
                            } else {
                                item.bound = true;
                                item.fieldName = boundAttrMap[attr.Id].Name;
                                item.fieldLabel = boundAttrMap[attr.Id].Label;
                            }

                            if ($scope.assignedItems[attr.Id] === undefined) {
                                $scope.attrList.push(item);
                                $scope.items.push(item);
                            }
                        });
                        for (var fieldName in $scope.fields) {
                            var field = {'name': fieldName, 'label': $scope.fields[fieldName].label};
                            var item = {};
                            item.isSelected = false;
                            item.fieldName = fieldName;
                            item.fieldLabel = field.label;

                            if (boundFieldMap[fieldName] === undefined) {
                                item.bound = false;
                                item.attrId = '';
                                item.attrName = '';
                                item.attrCode = '';
                                if ($scope.assignedItems[fieldName] === undefined) {
                                    $scope.items.push(item);
                                }
                            } else {
                                item.bound = true;
                                item.attrId = boundFieldMap[fieldName].Id;
                                item.attrName = boundFieldMap[fieldName].Name;
                                item.attrCode = boundFieldMap[fieldName].Code;
                            }

                            if ($scope.assignedItems[fieldName] === undefined) {
                                $scope.fieldList.push(item);
                            }
                        }
                    });
                };

                $scope.parseAAWrapper = function(aList) {
                    $scope.attributes = [];
                    angular.forEach(aList, function(aItem) {
                        var attr = {};
                        if (aItem.attributeAssignment) {
                            // use attribute assignment
                            attr.aaId = aItem.attributeAssignment.Id;
                            attr.Id = aItem.attributeAssignment[$scope.nsp + 'AttributeId__c'];
                            attr.Name = aItem.attributeAssignment[$scope.nsp + 'AttributeDisplayName__c'];
                            attr.Code = aItem.attributeAssignment[$scope.nsp + 'AttributeUniqueCode__c'];
                            $scope.AttrAssgnObjMap[attr.Id] = aItem.attributeAssignment;
                        } else {
                            // use attribute
                            attr.Id = aItem.attribute.Id;
                            attr.Name = aItem.attribute.Name;
                            attr.Code = aItem.attribute[$scope.nsp + 'Code__c'];
                            $scope.AttrAssgnObjMap[attr.Id] = null;
                        }
                        $scope.AttrObjMap[attr.Id] = aItem.attribute;
                        $scope.attributeMap[attr.Id] = attr;
                        $scope.attributes.push(attr);
                    });
                };

                $scope.selectAll = function() {
                    angular.forEach($scope.items, function(item) {
                        item.isSelected = $scope.allSelected;
                        $scope.selectItem(item);
                    });
                    $scope.selectedCount = ($scope.allSelected ? $scope.items.length : 0);
                };

                $scope.selectItem = function(item) {
                    if (item.isSelected) {
                        $scope.selectedCount++;
                    } else {
                        $scope.selectedCount--;
                        $scope.allSelected = false;
                    }
                };

                $scope.assignItems = function() {
                    var selectedAttrList = [];
                    var selectedFieldList = [];
                    angular.forEach($scope.items, function(item) {
                        if (item.isSelected) {
                            if (item.bound) {
                                selectedAttrList.push(item.attrId);
                            } else if (item.fieldName === '') {
                                selectedAttrList.push(item.attrId);
                            } else {
                                selectedFieldList.push(item.fieldName);
                            }
                        }
                    });
                    remoteActions.applyFieldAttribute($scope.objectId, selectedFieldList, selectedAttrList).then(function(results) {
                        console.log('applyFieldAttribute results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        $rootScope.$broadcast('hideItemDetails');
                    });
                };

                $scope.init = function() {
                    $scope.getAttributeFieldBindingData();
                };
                $scope.init();
            }
        };
    }
]);

},{}],5:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocAttachment', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                item: '=',
                parentItem: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'Attachment.tpl.html',
            controller: function($scope, $rootScope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.OBJECT_NAME = 'VlocityAttachment__c';
                $scope.editItem = {};
                $scope.facets = [];

                $scope.getObjectLayoutByName = function(objectName, recordType) {
                    remoteActions.getObjectLayoutByName(objectName, recordType).then(function(results) {
                        console.log('getObjectLayoutByName attachment item results: ', results);
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.getObjectLayoutById = function(objectId, forSelf) {
                    remoteActions.getObjectLayoutById(objectId, forSelf).then(function(results) {
                        console.log('getObjectLayoutById attachment item results: ', results);
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.buildObjectLayout = function(results) {
                    $scope.objFacets = results.facets;
                    $scope.objectLayoutId = results.objLayout.Id;
                    $scope.facets = [];
                    if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                        angular.forEach($scope.objFacets, function(facet, idx) {
                            facet.hasSectionCustomView = false;
                            facet.active = (idx === 0);
                            angular.forEach(facet.sections, function(section) {
                                if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                                    section.hasCustomView = true;
                                    facet.hasSectionCustomView = true;
                                }
                            });
                            $scope.facets.push(facet);
                        });
                    }
                    console.log('FACETS for attachments: ', $scope.facets);
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('describeObject attachment item results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.closeDetails = function() {
                    $rootScope.$broadcast('hideItemDetails');
                };

                $scope.createItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('editItem:: ', $scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = $scope.editItem[key];
                        }
                    }

                    remoteActions.createObject($scope.nsp + $scope.OBJECT_NAME, itemToSave).then(function(results) {
                        console.log('create attachment item results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('save attachment editItem',$scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                        }
                    }

                    remoteActions.updateObject(itemToSave).then(function(results) {
                        console.log('save attachment item results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        $scope.item = {};
                        for (var key in results) {
                            if ($scope.objectFields[key] && $scope.objectFields[key].type === 'DATE') {
                                var tzOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                                $scope.item[key] = results[key] + tzOffset;
                            } else {
                                $scope.item[key] = results[key];
                            }
                        }
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.init = function() {
                    if ($scope.item.Id === undefined) {
                        $scope.getObjectLayoutByName($scope.OBJECT_NAME, '');
                        $scope.editItem[$scope.nsp + 'ObjectId__c'] = $scope.parentItem.Id;
                    } else {
                        $scope.getObjectLayoutById($scope.item.Id, true);

                        for (var key in $scope.item) {
                            if (key !== '$$hashKey') {
                                $scope.editItem[key] = $scope.item[key];
                            }
                        }
                    }
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                };
                $scope.init();
            }
        };
    }
]);

},{}],6:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocAttachments', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'Attachments.tpl.html',
            controller: function($scope, $rootScope, $sldsModal) {
                console.log('INIT: ', $scope.customViewAttrs);
                $scope.objectId = $scope.customViewAttrs.objectId;
                $scope.objName = $scope.customViewAttrs.objName;
                $scope.items = $scope.customViewAttrs.items;

                $scope.nsp = fileNsPrefix();
                $scope.SLDSICON = SLDSICON;
                $scope.OBJECT_NAME = 'VlocityAttachment__c';

                $scope.$on('setItems', function(event, items) {
                    $scope.items = items;
                });

                $scope.$on('setSelectedItem', function(event, item) {
                    $scope.selectedItem = item;
                });

                $scope.selectItem = function(item) {
                    var broadcastData = {
                        facetType: 'ATTACHMENT_ITEM',
                        facetData: {
                            attachmentItem: item
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.editItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }
                    $scope.selectItem(item);
                };

                $scope.deleteItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Attachment';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the attachment <i>' + item.Name + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Attachment';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteObject(itemToDelete).then(function(results) {
                            console.log('delete attachment results: ', results);
                            $rootScope.$broadcast('refreshItems');
                            $rootScope.$broadcast('hideItemDetails');
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.previewItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.title = item.Name;
                    modalScope.itemName = item.Name;
                    modalScope.itemUrl = item[$scope.nsp + 'UrlLong__c'];
                    modalScope.preview = function() {
                        var itemToPreview = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToPreview[key] = item[key];
                            }
                        }
                    };

                    var previewModal = $sldsModal({
                        templateUrl: 'PreviewItemModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.newItem = function() {
                    $scope.selectItem({});
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('Attachments - describeObject results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getFieldSetsByName = function(objectName) {
                    remoteActions.getFieldSetsByName(objectName).then(function(results) {
                        if (results[$scope.nsp + 'attachments'] === undefined) {
                            $scope.fieldSet = null;
                        } else {
                            $scope.fieldSet = results[$scope.nsp + 'attachments'];
                        }
                        console.log('Attachments - getFieldSets results: ', $scope.fieldSet);
                    });
                };

                $scope.init = function() {
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getFieldSetsByName($scope.nsp + $scope.OBJECT_NAME);
                };
                $scope.init();
            }
        };
    }
]);

},{}],7:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocAttribute', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                attributeId: '=',
                objectId: '=',
                attrMap: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'VlocAttribute.tpl.html',
            controller: function($scope) {
                $scope.nsp = fileNsPrefix();
                $scope.SLDSICON = SLDSICON;

                $scope.getAttributeAssignmentById = function() {
                    remoteActions.getAttributeAssignmentById($scope.attributeId, $scope.objectId).then(function(results) {
                        console.log('getAttributeAssignmentById results: ', results);
                        $scope.attrObj = results.attribute;
                        $scope.attrAssgnObj = results.attributeAssignment;
                        $scope.picklistItems = results.picklistItems;
                        $scope.hasPicklist = ($scope.attrAssgnObj[$scope.nsp + 'ValueDataType__c'] === 'Picklist');
                        $scope.attrMap[$scope.attributeId] = {
                            'attrObj': results.attribute,
                            'attrAssgnObj': results.attributeAssignment
                        };
                    });
                };

                $scope.saveAttributeAssignment = function() {
                    remoteActions.saveAttributeAssignment($scope.attrAssgnObj).then(function(results) {
                        console.log('saveAttributeAssignment results: ', results);
                    });
                };

                $scope.$on('saveVlocAttribute', function() {
                    $scope.saveAttributeAssignment();
                });

                $scope.init = function() {
                    $scope.getAttributeAssignmentById();
                };
                $scope.init();
            }
        };
    }
]);

},{}],8:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocAttributeMetadata', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                objectId: '=',
                attrObj: '=',
                attrAssgnObj: '=',
                mode: '=',
                rootProductId: '=',
                prodChildItemObj: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'AttributeMetadata.tpl.html',
            controller: function($scope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.OBJECT_NAME = 'AttributeAssignment__c';
                $scope.fieldSet = null;
                $scope.objectFields = null;
                $scope.objectPicklists = {};
                $scope.allSelected = false;
                $scope.selectedCount = 0;
                $scope.sections = [
                    {
                        'id': 1,
                        'name': 'Primary Info',
                        'elements': [
                            {
                                'id': 1,
                                'label': 'Display Name',
                                'fieldName': 'AttributeDisplayNameOverride__c'
                            }
                        ]
                    },
                    {
                        'id': 2,
                        'name': 'Effectivity',
                        'elements': [
                            {
                                'id': 1,
                                'label': 'Active',
                                'fieldName': 'IsActiveAssignment__c'
                            }
                        ]
                    },
                    {
                        'id': 3,
                        'name': 'Data Info',
                        'elements': [
                            {
                                'id': 1,
                                'label': 'Value',
                                'fieldName': 'Value__c'
                            },
                            {
                                'id': 2,
                                'label': 'Value Type',
                                'fieldName': 'ValueDataType__c'
                            },
                            {
                                'id': 3,
                                'label': 'Value Description',
                                'fieldName': 'ValueDescription__c'
                            },
                            {
                                'id': 4,
                                'label': 'Picklist',
                                'fieldName': 'PicklistId__c'
                            },
                            {
                                'id': 5,
                                'label': 'Lookup Object',
                                'fieldName': 'LookupObjectId__c'
                            },
                            {
                                'id': 6,
                                'label': 'Lookup Object Type',
                                'fieldName': 'LookupObjectTypeId__c'
                            },
                            {
                                'id': 7,
                                'label': 'Lookup Filter',
                                'fieldName': 'LookupFilter__c'
                            }
                        ]
                    },
                    {
                        'id': 4,
                        'name': 'Behaviors',
                        'elements': [
                            {
                                'id': 1,
                                'label': 'Hidden',
                                'fieldName': 'IsHidden__c'
                            },
                            {
                                'id': 2,
                                'label': 'Read Only',
                                'fieldName': 'IsReadOnly__c'
                            },
                            {
                                'id': 3,
                                'label': 'Required',
                                'fieldName': 'IsRequired__c'
                            },
                            {
                                'id': 4,
                                'label': 'Display Type',
                                'fieldName': 'UIDisplayType__c'
                            },
                            {
                                'id': 5,
                                'label': 'Run-time Configurable',
                                'fieldName': 'IsConfigurable__c'
                            }
                        ]
                    }
                ];

                $scope.createAttributeAssignment = function() {
                    remoteActions.createAttributeAssignment($scope.attrObj.Id, $scope.objectId).then(function(results) {
                        console.log('createAttributeAssignment results: ', results);
                        $scope.attrAssgnObj = results;
                        $scope.editItem = {};
                        for (var key in $scope.attrAssgnObj) {
                            $scope.editItem[key] = $scope.attrAssgnObj[key];
                        }
                    });
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('describeObject assignment attribute results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getObjectPicklistsByName = function(objectName) {
                    remoteActions.getObjectPicklistsByName(objectName).then(function(results) {
                        $scope.objectPicklists = {};
                        for (var key in results) {
                            if (key.endsWith('__c')) {
                                $scope.objectPicklists[$scope.nsp + key] = results[key];
                            } else {
                                $scope.objectPicklists[key] = results[key];
                            }
                        }
                        console.log('getObjectPicklistsByName results:', $scope.objectPicklists);
                    });
                };

                $scope.getFieldSetsByName = function(objectName) {
                    remoteActions.getFieldSetsByName(objectName).then(function(results) {
                        console.log('getFieldSets ' + objectName + ': ', results);
                        if (results[$scope.nsp + 'attributemetadata'] === undefined) {
                            $scope.fieldSet = null;
                        } else {
                            $scope.fieldSet = results[$scope.nsp + 'attributemetadata'];
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = $scope.editItem[key];
                        }
                    }

                    remoteActions.saveAttributeAssignment(itemToSave).then(function(results) {
                        console.log('save assignment attribute results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        for (var key in results) {
                            $scope.attrAssgnObj[key] = results[key];
                        }
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $rootScope.$broadcast('hideItemDetails');
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.getOverride = function() {
                    var inputMap = {
                        'type': 'Attribute',
                        'contextId': $scope.rootProductId,
                        'overriddenObjectId': $scope.attrAssgnObj.Id,
                        'overriddenPCIId': $scope.prodChildItemObj.Id
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.getOverride(inputMapJSON).then(function(result) {
                        if (result !== null) {
                            var obj = JSON.parse(result);
                            console.log('get override: ', obj);
                            $scope.overrideObj = obj.SObject;
                            $scope.overrideDef = obj.OverrideDefinition__c;
                            $scope.hasOverride = true;
                        }
                    });
                };

                $scope.createOverride = function() {
                    var itemToCreate = {};
                    for (var key in $scope.editItem) {
                        itemToCreate[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                    }
                    itemToCreate[$scope.nsp + 'IsOverride__c'] = true;
                    delete itemToCreate.$$hashKey;
                    delete itemToCreate.Id;

                    var inputMap = {
                        'type': 'Attribute',
                        'contextId': $scope.rootProductId,
                        'overriddenObjectId': $scope.attrAssgnObj.Id,
                        'overriddenPCIId': $scope.prodChildItemObj.Id
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.createOverride(inputMapJSON).then(function(result) {
                        var obj = JSON.parse(result);
                        console.log('create override: ', obj);
                        $scope.overrideObj = obj.SObject;
                        $scope.overrideDef = obj.OverrideDefinition__c;
                        $scope.hasOverride = true;
                    });
                };

                $scope.saveOverride = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    // special cases for nulls
                    var key;
                    for (key in $scope.objectFields) {
                        var type = $scope.objectFields[key].type;
                        if (type === 'DATE' || type === 'DOUBLE' || type === 'INTEGER') {
                            if ($scope.overrideObj[key] === null || $scope.overrideObj[key] === '') {
                                $scope.overrideObj[key] = undefined;
                            }
                        }
                    }

                    var itemToSave = {};
                    for (key in $scope.overrideObj) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.overrideObj[key] === null ? undefined : $scope.overrideObj[key]);
                        }
                    }

                    var inputMap = {
                        'type': 'Attribute',
                        'contextId': $scope.rootProductId,
                        'sObject': JSON.stringify(itemToSave)
                    };
                    console.log('Save Override: ', itemToSave);
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);

                    remoteActions.saveOverride(inputMapJSON).then(function(results) {
                        console.log('save override results: ', results);
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $rootScope.$broadcast('refreshItems');
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.deleteOverride = function() {
                    var inputMap = {
                        'type': 'Attribute',
                        'overridingObjectId': $scope.overrideObj.Id,
                        'overrideDefinitionId': $scope.overrideDef.Id,
                        'contextId': $scope.rootProductId
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.deleteOverride(inputMapJSON).then(function(result) {
                        console.log('delete override: ', result);
                        $scope.overrideObj = null;
                        $scope.overrideDef = null;
                        $scope.hasOverride = false;
                        $rootScope.$broadcast('refreshItems');
                    });
                };

                $scope.init = function() {
                    if ($scope.attrAssgnObj === null || $scope.attrAssgnObj[$scope.nsp + 'ObjectId__c'] != $scope.objectId) {
                        $scope.createAttributeAssignment();
                    } else {
                        $scope.editItem = {};
                        for (var key in $scope.attrAssgnObj) {
                            $scope.editItem[key] = $scope.attrAssgnObj[key];
                        }
                    }
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getObjectPicklistsByName($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getFieldSetsByName($scope.nsp + $scope.OBJECT_NAME);

                    $scope.overrideObj = null;
                    $scope.overrideDef = null;
                    $scope.hasOverride = false;

                    if ($scope.mode === 'override') {
                        $scope.overrideMode = true;
                        $scope.getOverride();
                        $scope.objDisplayMode = 'view';
                    } else {
                        $scope.overrideMode = false;
                        $scope.objDisplayMode = 'edit';
                    }
                };
                $scope.init();
            }
        };
    }
]);

},{}],9:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocContextRule', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                item: '=',
                parentItem: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'ContextRule.tpl.html',
            controller: function($scope, $rootScope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.OBJECT_NAME = 'ContextCriteria__c';
                $scope.editItem = {};
                $scope.facets = [];

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        $scope.objectFields = results;
                    });
                };

                $scope.getObjectLayoutByName = function(objectName, recordType) {
                    remoteActions.getObjectLayoutByName(objectName, recordType).then(function(results) {
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.getObjectLayoutById = function(objectId, forSelf) {
                    remoteActions.getObjectLayoutById(objectId, forSelf).then(function(results) {
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.buildObjectLayout = function(results) {
                    $scope.objFacets = results.facets;
                    $scope.objectLayoutId = results.objLayout.Id;
                    $scope.facets = [];
                    if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                        angular.forEach($scope.objFacets, function(facet, idx) {
                            facet.hasSectionCustomView = false;
                            facet.active = (idx === 0);
                            angular.forEach(facet.sections, function(section) {
                                if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                                    section.hasCustomView = true;
                                    facet.hasSectionCustomView = true;
                                }
                            });
                            $scope.facets.push(facet);
                        });
                    }
                };

                $scope.closeDetails = function() {
                    $rootScope.$broadcast('hideItemDetails');
                };

                $scope.createItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('editItem:: ', $scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = $scope.editItem[key];
                        }
                    }

                    remoteActions.createObject($scope.nsp + $scope.OBJECT_NAME, itemToSave).then(function(results) {
                        console.log('create context rule item results: ', results);
                        $rootScope.$broadcast('refreshContextCriteriaItems');
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('save context rule editItem',$scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                        }
                    }

                    remoteActions.updateObject(itemToSave).then(function(results) {
                        console.log('save context rule item results: ', results);
                        $rootScope.$broadcast('refreshContextCriteriaItems');
                        $scope.item = {};
                        for (var key in results) {
                            if ($scope.objectFields[key] && $scope.objectFields[key].type === 'DATE') {
                                var tzOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                                $scope.item[key] = results[key] + tzOffset;
                            } else {
                                $scope.item[key] = results[key];
                            }
                        }
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.init = function() {
                    if ($scope.item.Id === undefined) {
                        $scope.getObjectLayoutByName($scope.OBJECT_NAME, '');
                        $scope.editItem[$scope.nsp + 'ObjectId__c'] = $scope.parentItem.Id;
                    } else {
                        $scope.getObjectLayoutById($scope.item.Id, true);

                        for (var key in $scope.item) {
                            if (key !== '$$hashKey') {
                                $scope.editItem[key] = $scope.item[key];
                            }
                        }
                    }
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                };
                $scope.init();
            }
        };
    }
]);

},{}],10:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocContextRules', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'ContextRules.tpl.html',
            controller: function($scope, $rootScope, $sldsModal, $compile) {
                console.log('INIT: ', $scope.customViewAttrs);
                $scope.nsp = fileNsPrefix();
                $scope.SLDSICON = SLDSICON;
                $scope.OBJECT_NAME = 'ContextCriteria__c';
                $scope.fieldSetName = 'contextcriteria';
                $scope.contextCriteria = $scope.customViewAttrs.contextCriteria;

                $scope.$on('setContextCriteria', function(event, items) {
                    $scope.contextCriteria = items;
                    console.log('!!! setContextCriteria: ', items);
                });

                $scope.selectItem = function(item) {
                    var broadcastData = {
                        facetType: 'CONTEXT_CRITERIA_ITEM',
                        facetData: {
                            contextCriteriaItem: item
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.editItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }
                    $scope.selectItem(item);
                };

                $scope.deleteItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Context Criteria';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the Context Criteria <i>' + item.Name + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Context Criteria';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteObject(itemToDelete).then(function(results) {
                            console.log('delete Context Criteria results: ', results);
                            $rootScope.$broadcast('refreshContextCriteriaItems');
                            $rootScope.$broadcast('hideItemDetails');
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.newItem = function() {
                    $scope.selectItem({});
                };


                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('ContextRules - describeObject results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getFieldSetsByName = function(objectName) {
                    remoteActions.getFieldSetsByName(objectName).then(function(results) {
                        if (results[$scope.nsp + $scope.fieldSetName] === undefined) {
                            $scope.fieldSet = null;
                        } else {
                            $scope.fieldSet = results[$scope.nsp + $scope.fieldSetName];
                        }
                        console.log('ContextRules - getFieldSets results: ', $scope.fieldSet);
                    });
                };

                $scope.init = function() {
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getFieldSetsByName($scope.nsp + $scope.OBJECT_NAME);
                };
                $scope.init();
            }
        };
    }
]);

},{}],11:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocCustomView', ['$compile',
    function($compile) {
        var VIEW_TEMPLATE_MAP = {
            'ApplicableObjects': '<vloc-applicable-objects custom-view-attrs="customViewData.attrs"></vloc-applicable-objects>',
            'ObjectClassAttrsFields': '<vloc-object-class-attrs-fields custom-view-attrs="customViewData.attrs"></vloc-object-class-attrs-fields>',
            'AttributeFieldBindings': '<vloc-attr-field-bindings custom-view-attrs="customViewData.attrs"></vloc-attr-field-bindings>',
            'VlocObjAttrsFields': '<vloc-obj-attrs-fields custom-view-attrs="customViewData.attrs"></vloc-obj-attrs-fields>',
            'LayoutManagement': '<vloc-layout-management custom-view-attrs="customViewData.attrs"></vloc-layout-management>',
            'PicklistItems': '<vloc-picklist-items custom-view-attrs="customViewData.attrs"></vloc-picklist-items>',
            'ProductDetails': '<vloc-product-details custom-view-attrs="customViewData.attrs"></vloc-product-details>',
            'ProductStructure': '<vloc-product-structure custom-view-attrs="customViewData.attrs"></vloc-product-structure>',
            'AttributeRules': '<vloc-attribute-rules custom-view-attrs="customViewData.attrs"></vloc-attribute-rules>',
            'ContextRules': '<vloc-context-rules custom-view-attrs="customViewData.attrs"></vloc-context-rules>',
            'ObjectPricing': '<vloc-object-pricing custom-view-attrs="customViewData.attrs"></vloc-object-pricing>',
            'Attachments': '<vloc-attachments custom-view-attrs="customViewData.attrs"></vloc-attachments>',
            'ObjectTypes': '<vloc-object-types custom-view-attrs="customViewData.attrs"></vloc-object-types>',
            'ObjectTypeStructure': '<vloc-object-type-structure custom-view-attrs="customViewData.attrs"></vloc-object-type-structure>',
            'PriceListHierarchy': '<vloc-price-list-hierarchy custom-view-attrs="customViewData.attrs"></vloc-price-list-hierarchy>',
            'PromotionProducts': '<vloc-promotion-products custom-view-attrs="customViewData.attrs"></vloc-promotion-products>',
            'PromoProductDiscounts': '<vloc-promo-prod-discounts custom-view-attrs="customViewData.attrs"></vloc-promo-prod-discounts>'
        };

        var getTemplate = function(view) {
            return VIEW_TEMPLATE_MAP[view];
        };

        return {
            restrict: 'E',
            scope: false,
            link: function(scope, element, attrs) {
                var viewName = scope.customViewData.name;
                element.append($compile(getTemplate(viewName))(scope));
            }
        };
    }
]);

},{}],12:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocDataTable', [function() {
    return {
        scope: {
            parentObj: '=',
            objName: '=',
            items: '=',
            selectedItem: '=',
            showItemDetails: '&'
        },
        replace: true,
        restrict: 'E',
        templateUrl: 'DataTable.tpl.html',
        controller: function($scope) {
            $scope.nsp = fileNsPrefix();
            $scope.selectedItem = null;

            $scope.selectItem = function(item) {
                $scope.selectedItem = item;
                $scope.showItemDetails()(item);
            };
        }
    };
}]);

},{}],13:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocFieldMetadata', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                objectName: '=',
                fieldName: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'FieldMetadata.tpl.html',
            controller: function($scope) {
                $scope.nsp = fileNsPrefix();

                $scope.describeField = function() {
                    remoteActions.describeField($scope.objectName, $scope.fieldName).then(function(results) {
                        console.log('describeField results: ', results);
                        $scope.fieldMetadata = results;
                    });
                };

                $scope.init = function() {
                    $scope.describeField();
                };
                $scope.init();
            }
        };
    }
]);

},{}],14:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocImgCarousel', [function() {
    return {
        scope: {
            attachments: '='
        },
        replace: true,
        restrict: 'E',
        templateUrl: 'ImageCarousel.tpl.html',
        controller: function($scope) {
            $scope.nsp = fileNsPrefix();
            $scope.SLDSICON = SLDSICON;
            $scope.currentImg = null;
            $scope.currentIdx = -1;

            $scope.$watch('attachments', function(attachmentList) {
                angular.forEach(attachmentList, function(att, idx) {
                    if (att[$scope.nsp + 'IsDefaultImage__c']) {
                        $scope.currentImg = att;
                        $scope.currentIdx = idx;
                    }
                });
            }, true);

            $scope.switchImage = function(idx) {
                if (idx === -1) {
                    idx = $scope.attachments.length - 1;
                } else if (idx === $scope.attachments.length) {
                    idx = 0;
                }

                $scope.currentImg = $scope.attachments[idx];
                $scope.currentIdx = idx;
            };
        }
    };
}]);

},{}],15:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocLayoutElement', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                layoutId: '=',
                item: '=',
                facetId: '=',
                sectionId: '=',
                objectName: '=',
                objectLayoutFields: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'LayoutElement.tpl.html',
            controller: function($scope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.fieldSet = null;
                $scope.objectFields = null;
                $scope.objectPicklists = {};
                $scope.elementObj = {};
                $scope.sectionElement = {
                    field: '',
                    sequence: 0
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('describeObject ' + objectName + ' results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getObjectPicklistsByName = function(objectName) {
                    remoteActions.getObjectPicklistsByName(objectName).then(function(results) {
                        $scope.objectPicklists = {};
                        for (var key in results) {
                            if (key.endsWith('__c')) {
                                $scope.objectPicklists[$scope.nsp + key] = results[key];
                            } else {
                                $scope.objectPicklists[key] = results[key];
                            }
                        }
                        console.log('getObjectPicklistsByName results:', $scope.objectPicklists);
                    });
                };

                $scope.getFieldSetsByName = function(objectName) {
                    remoteActions.getFieldSetsByName(objectName).then(function(results) {
                        console.log('getFieldSets ' + objectName + ': ', results);
                        if (results[$scope.nsp + 'objectfacet'] !== undefined) {
                            $scope.fieldSet = results[$scope.nsp + 'objectfacet'];
                        } else if (results[$scope.nsp + 'objectsection'] !== undefined) {
                            $scope.fieldSet = results[$scope.nsp + 'objectsection'];
                        } else if (results[$scope.nsp + 'objectelement'] !== undefined) {
                            $scope.fieldSet = results[$scope.nsp + 'objectelement'];
                        } else {
                            $scope.fieldSet = null;
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    for (var key in $scope.elementObj) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = $scope.elementObj[key];
                        }
                    }

                    if ($scope.objectName === 'ObjectFacet__c') {
                        itemToSave[$scope.nsp + 'ObjectLayoutId__c'] = $scope.layoutId;
                    }
                    if ($scope.objectName === 'ObjectSection__c') {
                        itemToSave[$scope.nsp + 'ObjectFacetId__c'] = $scope.facetId;
                    }
                    if ($scope.objectName === 'ObjectElement__c') {
                        itemToSave[$scope.nsp + 'ObjectSectionId__c'] = $scope.sectionId;
                        itemToSave[$scope.nsp + 'Sequence__c'] = $scope.sectionElement.sequence;
                        var fieldApiName = $scope.sectionElement.field;
                        if (fieldApiName.endsWith('__c')) {
                            fieldApiName = fieldApiName.substring($scope.nsp.length);
                        }
                        itemToSave[$scope.nsp + 'FieldApiName__c'] = fieldApiName;
                    }

                    if (itemToSave.Id === undefined) {
                        remoteActions.createObject($scope.nsp + $scope.objectName, itemToSave).then(function(results) {
                            console.log('create object ' + $scope.objectName + ' results: ', results);
                            $rootScope.$broadcast('refreshItems');
                            for (var key in results) {
                                $scope.elementObj[key] = results[key];
                            }
                            if (event) {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }
                            $scope.closeDetails();
                            //TODO: show save success message
                        }, function(error) {
                            //TODO: show save failure message
                            if (event) {
                                event.currentTarget.innerText = 'Error!';
                                $timeout(function() {
                                    event.currentTarget.innerText = originalText;
                                    event.currentTarget.disabled = false;
                                }, 5000);
                            }
                        });
                    } else {
                        remoteActions.updateObject(itemToSave).then(function(results) {
                            console.log('save object ' + $scope.objectName + ' results: ', results);
                            $rootScope.$broadcast('refreshItems');
                            $scope.elementObj = {};
                            for (var key in results) {
                                $scope.elementObj[key] = results[key];
                            }
                            if (event) {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }
                            $scope.closeDetails();
                            //TODO: show save success message
                        }, function(error) {
                            //TODO: show save failure message
                            if (event) {
                                event.currentTarget.innerText = 'Error!';
                                $timeout(function() {
                                    event.currentTarget.innerText = originalText;
                                    event.currentTarget.disabled = false;
                                }, 5000);
                            }
                        });
                    }
                };

                $scope.closeDetails = function() {
                    $rootScope.$broadcast('hideItemDetails');
                };

                $scope.init = function() {
                    var key;
                    if ($scope.item !== undefined) {
                        for (key in $scope.item) {
                            if (key !== '$$hashKey') {
                                $scope.elementObj[key] = $scope.item[key];
                            }
                        }
                    }
                    $scope.getObjectPicklistsByName($scope.nsp + $scope.objectName);
                    $scope.getFieldSetsByName($scope.nsp + $scope.objectName);
                    $scope.describeObject($scope.nsp + $scope.objectName);
                    if ($scope.objectName === 'ObjectElement__c') {
                        $scope.sectionElement.field = ($scope.elementObj[$scope.nsp + 'FieldApiName__c'] || '');
                        if ($scope.sectionElement.field && $scope.sectionElement.field.endsWith('__c')) {
                            $scope.sectionElement.field = $scope.nsp + $scope.sectionElement.field;
                        }
                        $scope.sectionElement.sequence = $scope.elementObj[$scope.nsp + 'Sequence__c'];
                        $scope.objectFieldList = [];
                        for (key in $scope.objectLayoutFields) {
                            var field = $scope.objectLayoutFields[key];
                            field.value = key;
                            $scope.objectFieldList.push(field);
                        }
                    }
                };

                $scope.init();
            }
        };
    }
]);

},{}],16:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocLayoutManagement', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'LayoutManagement.tpl.html',
            controller: function($scope, $sldsModal) {
                console.log('INIT: ', $scope.customViewAttrs);
                $scope.nsp = fileNsPrefix();
                $scope.SLDSICON = SLDSICON;
                $scope.objectId = $scope.customViewAttrs.objectId;
                $scope.objectApiName = $scope.customViewAttrs.objectApiName;
                $scope.layout = [];

                $scope.$on('refreshItems', function() {
                    $scope.getObjectLayoutById($scope.objectId, false);
                });

                $scope.getObjectLayoutById = function(objectId, fromParent) {
                    remoteActions.getObjectLayoutById(objectId, fromParent).then(function(results) {
                        console.log('getObjectLayoutById layout manager results: ', results);
                        $scope.objFacets = results.facets;
                        $scope.objectLayoutId = results.objLayout.Id;
                        $scope.facets = [];
                        if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                            angular.forEach($scope.objFacets, function(facet, idx) {
                                facet.hasSectionCustomView = false;
                                facet.active = (idx === 0);
                                angular.forEach(facet.sections, function(section) {
                                    if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                                        section.hasCustomView = true;
                                        facet.hasSectionCustomView = true;
                                    }
                                });
                                $scope.facets.push(facet);
                            });
                        }
                    });
                };

                $scope.selectItem = function(item, objectName) {
                    var broadcastData = {
                        facetType: 'LAYOUT_ELEMENT',
                        facetData: {
                            objectLayoutId: $scope.objectLayoutId,
                            elementObj: item,
                            objectName: objectName,
                            objectLayoutFields: $scope.objectLayoutFields
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.editItem = function(item, objectName, event) {
                    if (event) {
                        event.stopPropagation();
                    }
                    $scope.selectItem(item, objectName);
                };

                $scope.deleteItem = function(item, itemName, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Section Element';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the section element <i>' + itemName + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Section Element';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteObject(itemToDelete).then(function(results) {
                            console.log('delete section element results: ', results);
                            $scope.getObjectLayoutById($scope.objectId, false);
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.deleteFacet = function(item, itemName, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Facet';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the facet <i>' + itemName + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Facet';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteFacet(itemToDelete).then(function(results) {
                            console.log('delete facet results: ', results);
                            $scope.getObjectLayoutById($scope.objectId, false);
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.deleteSection = function(item, itemName, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Section';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the section <i>' + itemName + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Section';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteSection(itemToDelete).then(function(results) {
                            console.log('delete section results: ', results);
                            $scope.getObjectLayoutById($scope.objectId, false);
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.addFacet = function() {
                    var broadcastData = {
                        facetType: 'LAYOUT_ELEMENT',
                        facetData: {
                            objectLayoutId: $scope.objectLayoutId,
                            objectName: 'ObjectFacet__c'
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.addSection = function(fId) {
                    console.log('addSection(' + fId + ')');
                    var broadcastData = {
                        facetType: 'LAYOUT_ELEMENT',
                        facetData: {
                            objectFacetId: fId,
                            objectName: 'ObjectSection__c'
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.addSectionElement = function(sId) {
                    var broadcastData = {
                        facetType: 'LAYOUT_ELEMENT',
                        facetData: {
                            objectSectionId: sId,
                            objectName: 'ObjectElement__c',
                            objectLayoutFields: $scope.objectLayoutFields
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.getObjectLayoutFields = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        $scope.objectLayoutFields = results;
                        console.log('getObjectLayoutFields ' + objectName + ' results: ', $scope.objectLayoutFields);
                    });
                };

                $scope.init = function() {
                    console.log('initting layout mgr');
                    $scope.getObjectLayoutById($scope.objectId, false);
                    $scope.getObjectLayoutFields($scope.objectApiName);
                };
                $scope.init();
            }
        };
    }
]);

},{}],17:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocObjAttrsFields', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'VlocObjAttrsFields.tpl.html',
            controller: function($scope) {
                console.log('INIT: ', $scope.customViewAttrs);
                $scope.nsp = fileNsPrefix();
                $scope.objectId = $scope.customViewAttrs.objectId;
                $scope.objectName = $scope.customViewAttrs.objectApiName;
                $scope.items = [];

                $scope.$on('refreshItems', function() {
                    $scope.getAppliedAttributesFields();
                });

                $scope.getAppliedAttributesFields = function() {
                    $scope.AttrObjMap = {};
                    $scope.AttrAssgnObjMap = {};
                    $scope.attributeMap = {};
                    var items = [];
                    $scope.assignedItems = {};
                    $scope.allSelected = false;
                    $scope.selectedCount = 0;

                    remoteActions.getAppliedAttributesFields($scope.objectId).then(function(results) {
                        console.log('getAppliedAttributesFields results:', results);
                        angular.forEach(results, function(r) {
                            var item = {};
                            item.isSelected = false;

                            if (r.field) {
                                item.fieldName = r.objectFieldAttribute[$scope.nsp + 'FieldApiName__c'];
                                item.fieldLabel = r.field.label;
                                item.attrId = '';
                                item.attrName = '';
                                item.attrCode = '';
                                $scope.assignedItems[item.fieldName] = '';
                            } else if (r.aaWrapper) {
                                var aItem = r.aaWrapper;
                                if (aItem.attributeAssignment) {
                                    // use attribute assignment
                                    item.aaId = aItem.attributeAssignment.Id;
                                    item.attrId = aItem.attributeAssignment[$scope.nsp + 'AttributeId__c'];
                                    item.attrName = aItem.attributeAssignment[$scope.nsp + 'AttributeDisplayName__c'];
                                    item.attrCode = aItem.attributeAssignment[$scope.nsp + 'AttributeUniqueCode__c'];
                                    $scope.AttrAssgnObjMap[item.attrId] = aItem.attributeAssignment;
                                } else {
                                    // use attribute
                                    item.attrId = aItem.attribute.Id;
                                    item.attrName = aItem.attribute.Name;
                                    item.attrCode = aItem.attribute[$scope.nsp + 'Code__c'];
                                    $scope.AttrAssgnObjMap[item.attrId] = null;
                                }
                                item.fieldName = '';
                                item.fieldLabel = '';
                                $scope.AttrObjMap[item.attrId] = aItem.attribute;
                                $scope.assignedItems[item.attrId] = '';
                                $scope.attributeMap[item.attrId] = aItem.attribute;
                            }
                            items.push(item);
                        });
                        $scope.items = items;
                    });
                };

                $scope.selectAll = function() {
                    angular.forEach($scope.items, function(item) {
                        item.isSelected = $scope.allSelected;
                        $scope.selectItem(item);
                    });
                    $scope.selectedCount = ($scope.allSelected ? $scope.items.length : 0);
                };

                $scope.selectItem = function(item) {
                    if (item.isSelected) {
                        $scope.selectedCount++;
                    } else {
                        $scope.selectedCount--;
                        $scope.allSelected = false;
                    }
                };

                $scope.unassignAttrsFields = function() {
                    var selectedAttrList = [];
                    angular.forEach($scope.items, function(item) {
                        if (item.isSelected) {
                            console.log('unapplyFieldAttribute', item);
                            remoteActions.unapplyFieldAttribute($scope.objectId, item.fieldName, item.attrId).then(function(results) {
                                console.log('unapplyFieldAttribute results: ', results);
                                $scope.getAppliedAttributesFields();
                            });
                        }
                    });
                };

                $scope.showAllAttrsFields = function() {
                    var broadcastData = {
                        facetType: 'ASSIGN_ATTRS_FIELDS',
                        facetData: {
                            objectId: $scope.objectId,
                            assignedItems: $scope.assignedItems
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.showAttributeMetadata = function(attrId) {
                    var broadcastData = {
                        facetType: 'ATTR_METADATA',
                        facetData: {
                            objectId: $scope.objectId,
                            attrObj: $scope.AttrObjMap[attrId],
                            attrAssgnObj: $scope.AttrAssgnObjMap[attrId],
                            mode: 'edit'
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.showFieldMetadata = function(objectName, fieldName) {
                    var objApiName = $scope.objectName;
                    var broadcastData = {
                        facetType: 'FIELD_METADATA',
                        facetData: {
                            objectName: objApiName,
                            fieldName: fieldName
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.init = function() {
                    $scope.getAppliedAttributesFields();
                };
                $scope.init();
            }
        };
    }
]);

},{}],18:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocObjField', [function() {
    return {
        scope: {
            displayMode: '=',
            parentObj: '=',
            fieldName: '=',
            fieldInfo: '=',
            objPicklists: '='
        },
        replace: true,
        restrict: 'E',
        templateUrl: 'ObjectField.tpl.html',
        controller: function($scope) {
            $scope.SLDSICON = SLDSICON;

            $scope.initLookupItem = function() {
                $scope.lookupMap = {};
                $scope.lookupObj = {
                    selectedItem: '',
                    showItems: false
                };
                angular.forEach($scope.fieldInfo.lookupObjects, function(luItem) {
                    $scope.lookupMap[luItem.Name] = luItem.Id;
                    if (luItem.Id === $scope.parentObj[$scope.fieldName]) {
                        $scope.lookupObj.selectedItem = luItem.Name;
                    }
                });
            };

            $scope.selectLookupItem = function(luItem) {
                if (luItem === null) {
                    var itemId = $scope.lookupMap[$scope.lookupObj.selectedItem];
                    $scope.parentObj[$scope.fieldName] = (itemId || '');
                } else {
                    $scope.lookupObj.selectedItem = luItem.Name;
                    $scope.parentObj[$scope.fieldName] = luItem.Id;
                }
                $scope.lookupObj.showItems = false;
            };

            $scope.setMultiPicklistValues = function(selectedMPItems) {
                $scope.parentObj[$scope.fieldName] = selectedMPItems.join(';');
            };

            $scope.init = function() {
                if ($scope.fieldInfo && $scope.fieldInfo.type === 'DATE') {
                    if ($scope.parentObj[$scope.fieldName] !== undefined) {
                        var timezoneOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                        $scope.parentObj[$scope.fieldName] += timezoneOffset;
                    }
                }
                if ($scope.fieldInfo && $scope.fieldInfo.type === 'REFERENCE') {
                    $scope.initLookupItem();
                }
                if ($scope.fieldInfo && $scope.fieldInfo.type === 'PICKLIST') {
                    if ($scope.parentObj[$scope.fieldName] === undefined) {
                        angular.forEach($scope.objPicklists, function(o) {
                            if (o.isDefault) {
                                $scope.selectedPicklistItem = o.value;
                            }
                        });
                    } else {
                        $scope.selectedPicklistItem = $scope.parentObj[$scope.fieldName];
                    }
                }
                if ($scope.fieldInfo && $scope.fieldInfo.type === 'MULTIPICKLIST') {
                    if ($scope.parentObj[$scope.fieldName] !== undefined) {
                        var values = $scope.parentObj[$scope.fieldName].split(';');
                        angular.forEach($scope.objPicklists, function(o) {
                            o.selected = (values.indexOf(o.value) !== -1);
                        });
                    }
                }
                if ($scope.fieldInfo && $scope.fieldInfo.type === 'BOOLEAN') {
                    if ($scope.parentObj[$scope.fieldName] === undefined) {
                        $scope.parentObj[$scope.fieldName] = ($scope.fieldInfo.isDefaultedOnCreate === 'true');
                    }
                }
            };
            $scope.init();

            $scope.$watch('fieldInfo', function() {
                $scope.init();
            }, true);

            $scope.$watch('lookupObj.selectedItem', function(newValue) {
                if (newValue === '') {
                    $scope.parentObj[$scope.fieldName] = '';
                }
            }, true);
        }
    };
}]);

},{}],19:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocObjectPricing', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'ObjectPricing.tpl.html',
            controller: function($scope, $rootScope, $sldsModal, $compile) {
                console.log('INIT: ', $scope.customViewAttrs);
                $scope.mode = $scope.customViewAttrs.pricingMode;
                $scope.nsp = fileNsPrefix();
                $scope.SLDSICON = SLDSICON;

                $scope.init = function() {

                };
                $scope.init();
            }
        };
    }
]);

},{}],20:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocObjectType', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                item: '=',
                parentItem: '=',
                objectName: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'ObjectType.tpl.html',
            controller: function($scope, $rootScope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.OBJECT_NAME = 'ObjectClass__c';
                $scope.editItem = {};
                $scope.facets = [];

                $scope.getObjectLayoutByName = function(objectName, recordType) {
                    remoteActions.getObjectLayoutByName(objectName, recordType).then(function(results) {
                        console.log('getObjectLayoutByName vlocObjectType item results: ', results);
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.getObjectLayoutById = function(objectId, forSelf) {
                    remoteActions.getObjectLayoutById(objectId, forSelf).then(function(results) {
                        console.log('getObjectLayoutById vlocObjectType item results: ', results);
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.buildObjectLayout = function(results) {
                    $scope.objFacets = results.facets;
                    $scope.objectLayoutId = results.objLayout.Id;
                    $scope.facets = [];
                    if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                        angular.forEach($scope.objFacets, function(facet, idx) {
                            facet.hasSectionCustomView = false;
                            facet.active = (idx === 0);
                            angular.forEach(facet.sections, function(section) {
                                if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                                    section.hasCustomView = true;
                                    facet.hasSectionCustomView = true;
                                }
                            });
                            $scope.facets.push(facet);
                        });
                    }
                    console.log('FACETS for vlocObjectType: ', $scope.facets);
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('describeObject vlocObjectType item results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.describeObjectWithQuery = function(objectName) {
                    var queryMap = {};

                    //Build query string: WHERE myu16__ObjectApiName__c = parentItem AND RecordType.Name = 'Object Type'
                    $scope.objectName = $scope.objectName.replace($scope.nsp, '');
                    var parentOTQueryFilter = 'WHERE ' + $scope.nsp + 'ObjectApiName__c = \'' + $scope.objectName + '\' AND RecordType.Name = \'Object Type\'';
                    var lookupFieldName = $scope.nsp + 'ParentObjectClassId__c';
                    queryMap[lookupFieldName] = parentOTQueryFilter;

                    remoteActions.describeObjectWithQuery(objectName, JSON.stringify(queryMap)).then(function(results) {
                        $scope.objectFields = results;
                    });
                };

                $scope.closeDetails = function() {
                    $rootScope.$broadcast('hideItemDetails');
                };

                $scope.createItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('editItem vlocObjectType:: ', $scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey' && $scope.editItem[key] !== '') {
                            itemToSave[key] = $scope.editItem[key];
                        }
                    }
                    // itemToSave[$scope.nsp + 'ParentObjectClassId__c'] = $scope.parentItem;
                    itemToSave[$scope.nsp + 'RootObjectClassId__c'] = $scope.parentItem;

                    // remoteActions.createObjectType($scope.nsp + $scope.OBJECT_NAME, itemToSave).then(function(results) {
                    remoteActions.createObjectType(itemToSave).then(function(results) {
                        console.log('create vlocObjectType item results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    console.log('save vlocObjectType editItem',$scope.editItem);
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                        }
                    }

                    remoteActions.updateObject(itemToSave).then(function(results) {
                        console.log('save vlocObjectType item results: ', results);
                        $rootScope.$broadcast('refreshItems');
                        $scope.item = {};
                        for (var key in results) {
                            if ($scope.objectFields[key] && $scope.objectFields[key].type === 'DATE') {
                                var tzOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                                $scope.item[key] = results[key] + tzOffset;
                            } else {
                                $scope.item[key] = results[key];
                            }
                        }
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.closeDetails();
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.init = function() {
                    console.log('object type init; ', $scope.parentItem);
                    if ($scope.item.Id === undefined) {
                        $scope.getObjectLayoutByName($scope.OBJECT_NAME, '');
                        //TODO: Remove if parentItem is not relevant
                        if ($scope.parentItem !== null && $scope.parentItem !== undefined) {
                            $scope.editItem[$scope.nsp + 'ObjectId__c'] = $scope.parentItem.Id;
                        }
                    } else {
                        $scope.getObjectLayoutById($scope.item.Id, true);

                        for (var key in $scope.item) {
                            if (key !== '$$hashKey') {
                                $scope.editItem[key] = $scope.item[key];
                            }
                        }
                    }

                    $scope.describeObjectWithQuery($scope.nsp + $scope.OBJECT_NAME);
                };
                $scope.init();
            }
        };
    }
]);

},{}],21:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocObjectTypes', ['$rootScope', 'remoteActions',
    function($rootScope, remoteActions) {
        return {
            scope: {
                customViewAttrs: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'ObjectTypes.tpl.html',
            controller: function($scope, $sldsModal) {
                console.log('OBJ--TYPES--: ', $scope.customViewAttrs);
                $scope.objectId = $scope.customViewAttrs.objectId;
                $scope.objName = $scope.customViewAttrs.objName;
                // $scope.items = $scope.customViewAttrs.items;
                $scope.OBJECT_NAME = 'ObjectClass__c';
                $scope.SLDSICON = SLDSICON;

                $scope.nsp = fileNsPrefix();

                $scope.newItem = function() {
                    console.log('OBJ--TYPES--newItem: ');
                    $scope.selectItem({});
                    // var broadcastData = {
                    //     facetType: 'OBJECT_TYPE',
                    //     facetData: {
                    //         attachmentItem: {}
                    //     }
                    // };
                    // $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.$on('refreshItems', function() {
                    $scope.getObjectTypes($scope.objectId);
                });

                $scope.selectItem = function(item) {
                    console.log('OBJ--TYPES--selectItem: ');
                    var broadcastData = {
                        facetType: 'OBJECT_TYPE',
                        facetData: {
                            objectTypeItem: item,
                            objectClassItem: $scope.objectId
                        }
                    };
                    $rootScope.$broadcast('showItemDetails', broadcastData);
                };

                $scope.editItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }
                    $scope.selectItem(item);
                };

                $scope.deleteItem = function(item, event) {
                    if (event) {
                        event.stopPropagation();
                    }

                    var modalScope = $scope.$new();
                    modalScope.confirmationTitle = 'Delete Object Type';
                    modalScope.confirmationMsg = 'Are you sure you want to delete the Object Type <i>' + item.Name + '</i>?';
                    modalScope.cancelActionLbl = 'Cancel';
                    modalScope.confirmActionLbl = 'Delete Object Type';
                    modalScope.confirmAction = function() {
                        var itemToDelete = {};
                        for (var key in item) {
                            if (key !== '$$hashKey') {
                                itemToDelete[key] = item[key];
                            }
                        }
                        remoteActions.deleteObjectType(itemToDelete.Id).then(function(results) {
                            console.log('delete Object Type results: ', results);
                            $rootScope.$broadcast('refreshItems');
                            $rootScope.$broadcast('hideItemDetails');
                            deleteModal.hide();
                            //TODO: show delete success message
                        }, function(error) {
                            //TODO: show delete failure message
                        });
                    };

                    var deleteModal = $sldsModal({
                        templateUrl: 'ConfirmationModal.tpl.html',
                        backdrop: 'static',
                        scope: modalScope,
                        show: true
                    });
                };

                $scope.getObjectTypes = function(objectId) {
                    console.log('getObjectTypes(' + objectId + ')');
                    remoteActions.getObjectTypes(objectId).then(function(results) {
                        console.log('ObjectTyeps - getObjectTypes results:', results);
                        $scope.items = results;
                    });
                };

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('ObjectTypes - describeObject results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getFieldSetsByName = function(objectName) {
                    remoteActions.getFieldSetsByName(objectName).then(function(results) {
                        if (results[$scope.nsp + 'objecttype'] === undefined) {
                            $scope.fieldSet = null;
                        } else {
                            $scope.fieldSet = results[$scope.nsp + 'objecttype'];
                        }
                        console.log('ObjectTypes - getFieldSets results: ', $scope.fieldSet);
                    });
                };

                $scope.launchTab = function(item) {
                    console.log('launchTab:item: ', item);
                    console.log('launchTab:objectId: ', $scope.objectId);
                    var data = {
                        'objectId': 'objecttype',
                        'obj': item,
                        'closeCurrentTab': false
                    };
                    var broadcastAction = {
                        'eventName': 'launchConsoleTab',
                        'eventData': data
                    };
                    if (window.frameElement !== null) {
                        // create a iframe resize event binding with the parent
                        window.parent.bindIframeEvents('broadcast', broadcastAction);
                    }
                };

                $scope.init = function() {
                    console.log('object types init -- ');
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getFieldSetsByName($scope.nsp + $scope.OBJECT_NAME);

                    $scope.getObjectTypes($scope.objectId);
                };
                $scope.init();

            }
        };
    }
]);

},{}],22:[function(require,module,exports){
angular.module('cpqdirectives')
.directive('vlocOfferPricingComponent', ['remoteActions',
    function(remoteActions) {
        return {
            scope: {
                offerId: '=',
                offerComponentId: '=',
                contractId: '=',
                offerPricingItem: '=',
                mode: '=',
                rootProductId: '='
            },
            replace: true,
            restrict: 'E',
            templateUrl: 'OfferPricingComponent.tpl.html',
            controller: function($scope, $rootScope, $timeout) {
                $scope.nsp = fileNsPrefix();
                $scope.OBJECT_NAME = 'OfferPricingComponent__c';
                console.log('RECEIVING PRODUCT ID: ', $scope.offerId);

                $scope.describeObject = function(objectName) {
                    remoteActions.describeObject(objectName).then(function(results) {
                        console.log('describeObject results: ', results);
                        $scope.objectFields = results;
                    });
                };

                $scope.getObjectPicklistsByName = function(objectName) {
                    remoteActions.getObjectPicklistsByName(objectName).then(function(results) {
                        $scope.objectPicklists = {};
                        for (var key in results) {
                            if (key.endsWith('__c')) {
                                $scope.objectPicklists[$scope.nsp + key] = results[key];
                            } else {
                                $scope.objectPicklists[key] = results[key];
                            }
                        }
                        console.log('getObjectPicklistsByName results:', $scope.objectPicklists);
                    });
                };

                $scope.getObjectLayoutByName = function(objectName, recordType) {
                    remoteActions.getObjectLayoutByName(objectName, recordType).then(function(results) {
                        console.log('getObjectLayoutByName offer price component results: ', results);
                        $scope.buildObjectLayout(results);
                    });
                };

                $scope.buildObjectLayout = function(results) {
                    $scope.objFacets = results.facets;
                    $scope.objectLayoutId = results.objLayout.Id;
                    $scope.facets = [];
                    if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                        angular.forEach($scope.objFacets, function(facet, idx) {
                            facet.hasSectionCustomView = false;
                            facet.active = (idx === 0);
                            angular.forEach(facet.sections, function(section) {
                                if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                                    section.hasCustomView = true;
                                    facet.hasSectionCustomView = true;
                                }
                            });
                            $scope.facets.push(facet);
                        });
                    }
                    console.log('FACETS for offer price component: ', $scope.facets);
                };

                $scope.createItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    var itemToSave = {};
                    for (var key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = $scope.editItem[key];
                        }
                    }
                    itemToSave[$scope.nsp + 'OfferId__c'] = $scope.offerId;

                    remoteActions.createObject($scope.nsp + $scope.OBJECT_NAME, itemToSave).then(function(results) {
                        console.log('create offer pricing component results: ', results);
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $rootScope.$broadcast('refreshItems');
                        $rootScope.$broadcast('hideItemDetails');
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.saveItem = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    // special cases for nulls
                    var key;
                    for (key in $scope.objectFields) {
                        var type = $scope.objectFields[key].type;
                        if (type === 'DATE' || type === 'DOUBLE' || type === 'INTEGER') {
                            if ($scope.editItem[key] === null || $scope.editItem[key] === '') {
                                $scope.editItem[key] = undefined;
                            }
                        }
                    }

                    var itemToSave = {};
                    for (key in $scope.editItem) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                        }
                    }

                    remoteActions.updateObject(itemToSave).then(function(results) {
                        console.log('save offer pricing component results: ', results);
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        $scope.editItem = {};
                        for (var key in results) {
                            if ($scope.objectFields[key] && $scope.objectFields[key].type === 'DATE') {
                                var tzOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                                $scope.editItem[key] = results[key] + tzOffset;
                            } else {
                                $scope.editItem[key] = results[key];
                            }
                        }
                        $rootScope.$broadcast('refreshItems');
                        $rootScope.$broadcast('hideItemDetails');
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.getOverride = function() {
                    var inputMap = {
                        'type': 'Pricing Component',
                        'overriddenObjectId': $scope.offerPricingItem.Id,
                        'contextId': $scope.rootProductId
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.getOverride(inputMapJSON).then(function(result) {
                        if (result !== null) {
                            var obj = JSON.parse(result);
                            console.log('get override: ', obj);
                            $scope.overrideObj = obj.SObject;
                            $scope.overrideDef = obj.OverrideDefinition__c;
                            $scope.hasOverride = true;
                        }
                    });
                };

                $scope.createOverride = function() {
                    var itemToCreate = {};
                    for (var key in $scope.editItem) {
                        itemToCreate[key] = ($scope.editItem[key] === null ? undefined : $scope.editItem[key]);
                    }
                    itemToCreate[$scope.nsp + 'IsOverride__c'] = true;
                    itemToCreate.Name += ' Override';
                    delete itemToCreate.$$hashKey;
                    delete itemToCreate.Id;

                    var inputMap = {
                        'type': 'Pricing Component',
                        'overriddenObjectId': $scope.offerPricingItem.Id,
                        'contextId': $scope.rootProductId,
                        'sObject': JSON.stringify(itemToCreate)
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.createOverride(inputMapJSON).then(function(result) {
                        var obj = JSON.parse(result);
                        console.log('create override: ', obj);
                        $scope.overrideObj = obj.SObject;
                        $scope.overrideDef = obj.OverrideDefinition__c;
                        $scope.hasOverride = true;
                    });
                };

                $scope.saveOverride = function(event) {
                    var originalText;
                    if (event) {
                        originalText = event.currentTarget.innerText;
                        event.currentTarget.disabled = true;
                        event.currentTarget.innerText = 'Saving...';
                    }

                    // special cases for nulls
                    var key;
                    for (key in $scope.objectFields) {
                        var type = $scope.objectFields[key].type;
                        if (type === 'DATE' || type === 'DOUBLE' || type === 'INTEGER') {
                            if ($scope.overrideObj[key] === null || $scope.overrideObj[key] === '') {
                                $scope.overrideObj[key] = undefined;
                            }
                        }
                    }

                    var itemToSave = {};
                    for (key in $scope.overrideObj) {
                        if (key !== '$$hashKey') {
                            itemToSave[key] = ($scope.overrideObj[key] === null ? undefined : $scope.overrideObj[key]);
                        }
                    }

                    var inputMap = {
                        'type': 'Pricing Component',
                        'sObject': JSON.stringify(itemToSave)
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);

                    remoteActions.saveOverride(inputMapJSON).then(function(results) {
                        console.log('save override results: ', results);
                        if (event) {
                            event.currentTarget.innerText = originalText;
                            event.currentTarget.disabled = false;
                        }
                        //TODO: show save success message
                    }, function(error) {
                        //TODO: show save failure message
                        if (event) {
                            event.currentTarget.innerText = 'Error!';
                            $timeout(function() {
                                event.currentTarget.innerText = originalText;
                                event.currentTarget.disabled = false;
                            }, 5000);
                        }
                    });
                };

                $scope.deleteOverride = function() {
                    var inputMap = {
                        'type': 'Pricing Component',
                        'overridingObjectId': $scope.overrideObj.Id,
                        'overrideDefinitionId': $scope.overrideDef.Id,
                        'contextId': $scope.rootProductId
                    };
                    console.log('Input Map: ', inputMap);
                    var inputMapJSON = JSON.stringify(inputMap);
                    remoteActions.deleteOverride(inputMapJSON).then(function(result) {
                        console.log('delete override: ', result);
                        $scope.overrideObj = null;
                        $scope.overrideDef = null;
                        $scope.hasOverride = false;
                    });
                };

                $scope.init = function() {
                    $scope.getObjectLayoutByName($scope.OBJECT_NAME, '');
                    $scope.describeObject($scope.nsp + $scope.OBJECT_NAME);
                    $scope.getObjectPicklistsByName($scope.nsp + $scope.OBJECT_NAME);

                    $scope.objDisplayMode = ($scope.mode === 'edit' ? 'edit' : 'view');

                    $scope.editItem = {};
                    for (var key in $scope.offerPricingItem) {
                        $scope.editItem[key] = $scope.offerPricingItem[key];
                    }
                    delete $scope.editItem.$$hashKey;
                    delete $scope.editItem[$scope.nsp + 'PricingComponentId__r'];

                    if ($scope.mode === 'override') {
                        $scope.overrideMode = true;
                        $scope.overrideObj = null;
                        $scope.overrideDef = null;
                        $scope.hasOverride = false;
                        $scope.getOverride();
                    } else {
                        $scope.overrideMode = false;
                    }
                };
                $scope.init();
            }
        };
    }
]);

},{}],23:[function(require,module,exports){
angular.module('cpqdirectives')
.factory('cpqService', ['$rootScope',
    function($rootScope) {
        var fieldSetMap = {};

        return {

        };
    }
]);

},{}],24:[function(require,module,exports){
angular.module("cpqdirectives").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("AssignAttrsFields.tpl.html",'<div class="vloc-assgn-attrs-fields">\n    <h2 class="slds-text-heading--small">Assign Attributes/Fields</h2>\n    <div class="slds-m-bottom--small slds-text-align--right">\n        <button type="button" class="slds-button slds-button--neutral" ng-click="assignItems()" ng-disabled="selectedCount < 1">Assign</button>\n    </div>\n    <div class="slds-scrollable--x">\n        <table class="slds-table slds-table--bordered items">\n            <thead>\n                <tr class="slds-text-heading--label">\n                    <th>\n                        <label class="slds-checkbox">\n                            <input type="checkbox" ng-model="allSelected" ng-change="selectAll()" />\n                            <span class="slds-checkbox--faux"></span>\n                            <span class="slds-assistive-text">Select All</span>\n                        </label>\n                    </th>\n                    <th>Attribute</th>\n                    <th>Is Bound?</th>\n                    <th>Field</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-repeat="item in items | orderBy:[\'-bound\',\'fieldLabel\',\'attrName\']">\n                    <td class="slds-cell-shrink" data-label="Select Row">\n                        <label class="slds-checkbox">\n                            <input type="checkbox" ng-model="item.isSelected" ng-change="selectItem(item)" />\n                            <span class="slds-checkbox--faux"></span>\n                            <span class="slds-assistive-text">Select Row</span>\n                        </label>\n                    </td>\n                    <td class="slds-truncate">{{item.attrName}}</td>\n                    <td class="slds-truncate">{{(item.bound ? \'Yes\' : \'No\')}}</td>\n                    <td class="slds-truncate">{{item.fieldLabel}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>'),$templateCache.put("Attachment.tpl.html",'<div class="vloc-attachment">\n    <div ng-repeat="facet in facets">\n        <h2 class="slds-text-heading--small" ng-if="facets.length > 1">{{facet.facetObj.Name}}</h2>\n        <section class="vloc-section" ng-repeat="section in facet.sections">\n            <h3 class="slds-text-heading--label">{{section.sectionObj.Name}}</h3>\n            <div class="vloc-section-body">\n                <div ng-if="!section.hasCustomView" class="slds-form--horizontal">\n                    <div class="slds-form-element" ng-repeat="sectionEl in section.sectionElements" ng-init="fieldName = sectionEl[nsp+\'FieldApiName__c\']; fieldName = (fieldName.endsWith(\'__c\') ? nsp+fieldName : fieldName);">\n                        <label class="slds-form-element__label" for="{{objectFields[fieldName].label}}">{{objectFields[fieldName].label}}</label>\n                        <div class="slds-form-element__control">\n                            <div ng-switch="sectionEl[nsp+\'Type__c\']">\n                                <div ng-switch-when="Field">\n                                    <vloc-obj-field display-mode="\'edit\'" parent-obj="editItem" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                                </div>\n                                <div ng-switch-when="Attribute">\n                                    Attribute!\n                                </div>\n                                <div ng-switch-when="Custom View">\n                                    Something is wrong!\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="slds-form-element__row form-buttons slds-text-align--right">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="closeDetails()">Cancel</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id === undefined" ng-click="createItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id !== undefined" ng-click="saveItem($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("Attachments.tpl.html",'<div class="vloc-attachments">\n    <div class="new-attachment slds-text-align--center">\n        <button type="button" class="slds-button slds-button--neutral" ng-click="newItem()">New Attachment</button>\n    </div>\n    <div class="slds-scrollable--x">\n        <table class="slds-table slds-table--bordered items">\n            <thead>\n                <tr class="slds-text-heading--label">\n                    <th class="actions"><div class="slds-truncate">&nbsp;</div></th>\n                    <th ng-repeat="field in fieldSet">\n                        <div class="slds-truncate">{{objectFields[field.fieldPath].label}}</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-class="{\'slds-is-selected\': (item.Id === selectedItem.Id)}" ng-repeat="item in items" ng-click="selectItem(item)">\n                    <td class="actions">\n                        <button class="slds-button slds-button--icon" ng-click="previewItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.PREVIEW}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Preview</span>\n                        </button>\n                        <button class="slds-button slds-button--icon" ng-click="editItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.EDIT}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Edit</span>\n                        </button>\n                        <button class="slds-button slds-button--icon" ng-click="deleteItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Delete</span>\n                        </button>\n                    </td>\n                    <td ng-repeat="field in fieldSet">\n                        <vloc-obj-field display-mode="\'view\'" parent-obj="item" field-name="field.fieldPath" field-info="objectFields[field.fieldPath]" obj-picklists=""></vloc-obj-field>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>'),$templateCache.put("AttributeMetadata.tpl.html",'<div class="vloc-attribute-metadata vloc-override">\n    <div class="vloc-facet">\n        <div ng-if="overrideMode" class="slds-m-top--small slds-m-bottom--medium">\n            <div class="slds-text-align--right">\n                <button type="button" ng-if="!hasOverride" class="slds-button slds-button--neutral" ng-click="createOverride()">Create Override</button>\n                <button type="button" ng-if="hasOverride" class="slds-button slds-button--neutral" ng-click="deleteOverride()">Delete Override</button>\n            </div>\n            <div class="override-form override-form-hd" ng-if="hasOverride">\n                <div class="override-form-lbl-override"></div>\n                <div class="override-form-element-override">Original Values</div>\n                <div class="override-form-element-override">Override Values</div>\n            </div>\n        </div>\n        <section class="vloc-section" ng-repeat="section in sections">\n            <h3 class="slds-text-heading--label">{{section.name}}</h3>\n            <div class="vloc-section-body">\n                <div class="override-form" ng-repeat="element in section.elements" ng-init="fieldName = nsp + element.fieldName">\n                    <label ng-class="{\'override-form-lbl-override\': overrideMode, \'override-form-lbl\': !overrideMode}" for="{{objectFields[fieldName].label}}">{{element.label}}</label>\n                    <div ng-class="{\'override-form-element-override\': overrideMode, \'override-form-element\': !overrideMode}">\n                        <vloc-obj-field display-mode="objDisplayMode" parent-obj="editItem" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                    </div>\n                    <div ng-if="hasOverride" ng-class="{\'override-form-element-override\': overrideMode, \'override-form-element\': !overrideMode}">\n                        <vloc-obj-field display-mode="\'edit\'" parent-obj="overrideObj" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="slds-form-element__row slds-text-align--right vloc-section-form">\n            <button type="button" class="slds-button slds-button--brand" ng-if="(mode === \'edit\')" ng-click="saveItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="(mode === \'override\' && hasOverride)" ng-click="saveOverride($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("ConfirmationModal.tpl.html",'<div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">\n    <div class="slds-modal__container">\n        <div class="slds-modal__header">\n            <h3 class="slds-text-heading--medium">{{confirmationTitle}}</h3>\n        </div>\n        <div class="slds-modal__content slds-p-around--medium">\n            <div>\n                <p ng-bind-html="confirmationMsg"></p>\n            </div>\n        </div>\n        <div class="slds-modal__footer">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="$hide()">{{cancelActionLbl}}</button>\n            <button type="button" class="slds-button slds-button--brand" ng-click="confirmAction()">{{confirmActionLbl}}</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("ContextRule.tpl.html",'<div class="vloc-context-rule">\n    <div ng-repeat="facet in facets">\n        <h2 class="slds-text-heading--small" ng-if="facets.length > 1">{{facet.facetObj.Name}}</h2>\n        <section class="vloc-section" ng-repeat="section in facet.sections">\n            <h3 class="slds-text-heading--label">{{section.sectionObj.Name}}</h3>\n            <div class="vloc-section-body">\n                <div ng-if="!section.hasCustomView" class="slds-form--horizontal">\n                    <div class="slds-form-element" ng-repeat="sectionEl in section.sectionElements" ng-init="fieldName = sectionEl[nsp+\'FieldApiName__c\']; fieldName = (fieldName.endsWith(\'__c\') ? nsp+fieldName : fieldName);">\n                        <label class="slds-form-element__label" for="{{objectFields[fieldName].label}}">{{objectFields[fieldName].label}}</label>\n                        <div class="slds-form-element__control">\n                            <div ng-switch="sectionEl[nsp+\'Type__c\']">\n                                <div ng-switch-when="Field">\n                                    <vloc-obj-field display-mode="\'edit\'" parent-obj="editItem" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                                </div>\n                                <div ng-switch-when="Attribute">\n                                    Attribute!\n                                </div>\n                                <div ng-switch-when="Custom View">\n                                    Something is wrong!\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="slds-form-element__row form-buttons slds-text-align--right">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="closeDetails()">Cancel</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id === undefined" ng-click="createItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id !== undefined" ng-click="saveItem($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("ContextRules.tpl.html",'<div class="vloc-context-rules">\n    <div class="new-context-rule slds-text-align--center">\n        <button type="button" class="slds-button slds-button--neutral" ng-click="newItem()">New Context Rule</button>\n    </div>\n\n    <div class="slds-scrollable--x">\n        <table class="slds-table slds-table--bordered contextCriteria">\n            <thead>\n                <tr class="slds-text-heading--label">\n                    <th class="actions"><div class="slds-truncate">&nbsp;</div></th>\n                    <th ng-repeat="field in fieldSet">\n                        <div class="slds-truncate">{{objectFields[field.fieldPath].label}}</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-class="{\'slds-is-selected\': (item.Id === selectedItem.Id)}" ng-repeat="item in contextCriteria" ng-click="selectItem(item)">\n                    <td class="actions">\n                        <button class="slds-button slds-button--icon" ng-click="editItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.EDIT}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Edit</span>\n                        </button>\n                        <button class="slds-button slds-button--icon" ng-click="deleteItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Delete</span>\n                        </button>\n                    </td>\n                    <td ng-repeat="field in fieldSet">\n                        <vloc-obj-field display-mode="\'view\'" parent-obj="item" field-name="field.fieldPath" field-info="objectFields[field.fieldPath]" obj-picklists=""></vloc-obj-field>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n</div>'),$templateCache.put("DataTable.tpl.html",'<div class="vloc-data-table">\n    <table class="slds-table slds-table--bordered">\n        <thead>\n            <tr class="slds-text-heading--label">\n                <th><div class="slds-truncate">Name</div></th>\n                <th><div class="slds-truncate">Display Text</div></th>\n                <th><div class="slds-truncate">Code</div></th>\n                <th><div class="slds-truncate">Value</div></th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-class="{\'slds-is-selected\': (item.Id === selectedItem.Id)}" ng-repeat="item in items" ng-click="selectItem(item)">\n                <td>{{item[\'Name\']}}</td>\n                <td>{{item[nsp+\'DisplayText__c\']}}</td>\n                <td>{{item[nsp+\'Code__c\']}}</td>\n                <td>{{item[nsp+\'Value__c\']}}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>'),$templateCache.put("FieldMetadata.tpl.html",'<div class="vloc-field-metadata">\n    <div class="slds-form--horizontal">\n        <div class="slds-form-element slds-m-bottom--medium">\n            <label class="slds-form-element__label" for="">Field Label</label>\n            <div class="slds-form-element__control">\n                {{fieldMetadata.label}}\n            </div>\n        </div>\n        <div class="slds-form-element slds-m-bottom--medium">\n            <label class="slds-form-element__label" for="">Field API Name</label>\n            <div class="slds-form-element__control">\n                {{fieldMetadata.name}}\n            </div>\n        </div>\n        <div class="slds-form-element slds-m-bottom--medium">\n            <label class="slds-form-element__label" for="">Field Type</label>\n            <div class="slds-form-element__control">\n                {{fieldMetadata.type}}\n            </div>\n        </div>\n        <div class="slds-form-element slds-m-bottom--medium" ng-if="fieldMetadata.picklistValues.length > 0">\n            <label class="slds-form-element__label" for="">Picklist Values</label>\n            <div class="slds-form-element__control">\n                <select class="slds-select">\n                    <option ng-repeat="o in fieldMetadata.picklistValues" value="{{o.value}}" ng-selected="o.defaultValue">{{o.label}}</option>\n                </select>\n            </div>\n        </div>\n    </div>\n</div>'),$templateCache.put("ImageCarousel.tpl.html",'<div class="vloc-img-carousel">\n    <div class="carousel">\n        <div class="carousel-inner">\n            <img ng-src="{{currentImg[nsp+\'UrlLong__c\']}}" class="carousel-img" alt="{{currentImg.Name}}" />\n        </div>\n        <div class="carousel-nav prev" ng-if="attachments.length > 1">\n            <button class="slds-button slds-button--icon" ng-click="switchImage(currentIdx-1)">\n                <svg aria-hidden="true" class="slds-button__icon">\n                    <use xlink:href="{{SLDSICON.CHEVRON_LEFT}}"></use>\n                </svg>\n                <span class="slds-assistive-text">Previous</span>\n            </button>\n        </div>\n        <div class="carousel-nav next" ng-if="attachments.length > 1">\n            <button class="slds-button slds-button--icon" ng-click="switchImage(currentIdx+1)">\n                <svg aria-hidden="true" class="slds-button__icon">\n                    <use xlink:href="{{SLDSICON.CHEVRON_RIGHT}}"></use>\n                </svg>\n                <span class="slds-assistive-text">Next</span>\n            </button>\n        </div>\n    </div>\n    <div class="img-nav">\n        <ul class="thumbnails" ng-if="attachments.length > 1">\n            <li ng-repeat="attachment in attachments" ng-class="{\'active\': ($index === currentIdx)}" ng-click="switchImage($index)">\n                <img ng-src="{{attachment[nsp+\'UrlLong__c\']}}" class="thumb" alt="{{attachment.Name}}" />\n            </li>\n        </ul>\n    </div>\n</div>'),$templateCache.put("LayoutElement.tpl.html",'<div class="vloc-layout-element">\n    <div class="slds-form--horizontal">\n        <div ng-if="(objectName !== \'ObjectElement__c\')" class="slds-form-element slds-m-bottom--medium" ng-repeat="field in fieldSet">\n            <label class="slds-form-element__label" for="{{objectFields[field.fieldPath].label}}">{{objectFields[field.fieldPath].label}}</label>\n            <div class="slds-form-element__control">\n                <vloc-obj-field display-mode="\'edit\'" parent-obj="elementObj" field-name="field.fieldPath" field-info="objectFields[field.fieldPath]" obj-picklists="objectPicklists[field.fieldPath.toLowerCase()]"></vloc-obj-field>\n            </div>\n        </div>\n        <div ng-if="(objectName === \'ObjectElement__c\')">\n            <div class="slds-form-element slds-m-bottom--medium">\n                <label class="slds-form-element__label" for="Field">Field</label>\n                <div class="slds-form-element__control">\n                    <select name="Field" id="Field" ng-model="sectionElement.field" class="slds-select">\n                        <option ng-repeat="o in objectFieldList | orderBy:\'label\'" value="{{o.value}}" ng-selected="o.value === sectionElement.field">{{o.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class="slds-form-element slds-m-bottom--medium">\n                <label class="slds-form-element__label" for="Sequence">Sequence</label>\n                <div class="slds-form-element__control">\n                    <input type="number" name="Sequence" id="Sequence" ng-model="sectionElement.sequence" class="slds-input" />\n                </div>\n            </div>\n        </div>\n        <div class="slds-form-element slds-text-align--right">\n            <button type="button" class="slds-button slds-button--brand" ng-click="saveItem($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("LayoutManagement.tpl.html",'<div class="vloc-layout-mgmt">\n    <div class="instance-layout">\n        <div class="facet" ng-repeat="facet in facets">\n            <div class="facet-name slds-clearfix" ng-click="editItem(facet.objectFacetObj, \'ObjectFacet__c\', $event)">\n                <div class="slds-float--left">\n                    {{facet.facetObj.Name}} <span class="slds-badge slds-theme--facet">FACET</span>\n                </div>\n                <div class="slds-float--right el-actions">\n                    <button class="slds-button slds-button--icon" ng-click="deleteFacet(facet.objectFacetObj, facet.facetObj.Name, $event)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Delete Facet</span>\n                    </button>\n                </div>\n            </div>\n            <div class="section" ng-repeat="section in facet.sections">\n                <div class="section-name slds-clearfix" ng-click="editItem(section.facetSectionObj, \'ObjectSection__c\', $event)">\n                    <div class="slds-float--left">\n                        {{section.sectionObj.Name}} <span class="slds-badge slds-theme--section">SECTION</span> <span ng-if="section.hasCustomView" class="slds-badge slds-theme--customview">CUSTOM VIEW</span>\n                    </div>\n                    <div class="slds-float--right el-actions">\n                        <button class="slds-button slds-button--icon" ng-click="deleteSection(section.facetSectionObj, section.sectionObj.Name, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Delete Section</span>\n                        </button>\n                    </div>\n                </div>\n                <ul class="slds-list--vertical slds-has-dividers--bottom section-elements" ng-if="!section.hasCustomView">\n                    <li class="slds-list__item section-element" ng-repeat="element in section.sectionElements" ng-click="editItem(element, \'ObjectElement__c\', $event)">\n                        <div class="slds-clearfix" ng-init="(key = (element[nsp+\'FieldApiName__c\'].endsWith(\'__c\') ? nsp+element[nsp+\'FieldApiName__c\'] : element[nsp+\'FieldApiName__c\']))">\n                            <div class="slds-float--left">{{objectLayoutFields[key].label}}</div>\n                            <div class="slds-float--right el-actions">\n                                <button class="slds-button slds-button--icon" ng-click="deleteItem(element, element.Name, $event)">\n                                    <svg aria-hidden="true" class="slds-button__icon">\n                                        <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                                    </svg>\n                                    <span class="slds-assistive-text">Delete Section Element</span>\n                                </button>\n                            </div>\n                        </div>\n                    </li>\n                    <li>\n                        <button class="slds-button slds-button--small slds-button--neutral" ng-click="addSectionElement(section.facetSectionObj.Id)">\n                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left slds-button__icon--small">\n                                <use xlink:href="{{SLDSICON.NEW}}"></use>\n                            </svg>Add Section Element\n                        </button>\n                    </li>\n                </ul>\n            </div>\n            <button class="slds-button slds-button--small slds-button--neutral" ng-click="addSection(facet.objectFacetObj.Id)">\n                <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left slds-button__icon--small">\n                    <use xlink:href="{{SLDSICON.NEW}}"></use>\n                </svg>Add Section\n            </button>\n        </div>\n        <button class="slds-button slds-button--small slds-button--neutral" ng-click="addFacet()">\n            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--left slds-button__icon--small">\n                <use xlink:href="{{SLDSICON.NEW}}"></use>\n            </svg>Add Facet\n        </button>\n    </div>\n</div>'),$templateCache.put("ObjectField.tpl.html",'<div class="vloc-obj-field">\n    <!-- VIEW FIELD -->\n    <span ng-if="displayMode === \'view\'" ng-switch="fieldInfo.type">\n        <span ng-switch-when="BOOLEAN">\n            <input type="checkbox" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" disabled="disabled" />\n        </span>\n        <span ng-switch-when="DATE">\n            {{parentObj[fieldName] | date:\'mediumDate\'}}\n        </span>\n        <span ng-switch-when="DATETIME">\n            {{parentObj[fieldName] | date:\'medium\'}}\n        </span>\n        <span ng-switch-when="REFERENCE">\n            {{lookupObj.selectedItem}}\n        </span>\n        <span ng-switch-default="default">\n            {{parentObj[fieldName]}}\n        </span>\n    </span>\n    <!-- EDIT FIELD -->\n    <span ng-if="displayMode === \'edit\'" ng-switch="fieldInfo.type">\n        <span ng-switch-when="BOOLEAN">\n            <label class="slds-checkbox">\n                <input type="checkbox" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" />\n                <span class="slds-checkbox--faux"></span>\n                <span class="slds-assistive-text">{{fieldInfo.label}}</span>\n            </label>\n        </span>\n        <span ng-switch-when="DATE">\n            <input type="text" class="slds-input"\n                name="{{fieldInfo.label}}"\n                id="{{fieldInfo.label}}"\n                ng-model="parentObj[fieldName]"\n                bs-datepicker="true"\n                data-autoclose="true"\n                data-date-format="MM/dd/yyyy"\n                data-date-type="number"\n                data-icon-left="glyphicon icon-v-left-caret"\n                data-icon-right="glyphicon icon-v-right-caret" />\n        </span>\n        <span ng-switch-when="DATETIME">\n            <input type="text" class="slds-input input-dt-d"\n                name="{{fieldInfo.label}}"\n                id="{{fieldInfo.label}}"\n                ng-model="parentObj[fieldName]"\n                bs-datepicker="true"\n                data-autoclose="true"\n                data-date-format="MM/dd/yyyy"\n                data-date-type="number"\n                data-icon-left="glyphicon icon-v-left-caret"\n                data-icon-right="glyphicon icon-v-right-caret" />\n            <input type="text" class="slds-input input-dt-t"\n                name="{{fieldInfo.label}}"\n                id="{{fieldInfo.label}}"\n                ng-model="parentObj[fieldName]"\n                bs-timepicker="true"\n                data-autoclose="true"\n                data-time-format="hh:mm a"\n                data-time-type="number"\n                data-icon-left="glyphicon icon-v-left-caret"\n                data-icon-right="glyphicon icon-v-right-caret" />\n        </span>\n        <span ng-switch-when="PICKLIST">\n            <select name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" class="slds-select">\n                <option ng-repeat="o in objPicklists" value="{{o.value}}" ng-selected="o.value === selectedPicklistItem">{{o.label}}</option>\n            </select>\n        </span>\n        <span ng-switch-when="OTPICKLIST">\n            <select name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[\'objectTypeId\']" class="slds-select">\n                <option ng-repeat="o in objPicklists" value="{{o.value}}" ng-selected="o.value === selectedPicklistItem">{{o.label}}</option>\n            </select>\n        </span>\n        <span ng-switch-when="MULTIPICKLIST">\n            <select name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" multiple="multiple" ng-model="selectedMPItems" ng-change="setMultiPicklistValues(selectedMPItems)" class="slds-select">\n                <option ng-repeat="o in objPicklists" value="{{o.value}}" ng-selected="o.selected">{{o.label}}</option>\n            </select>\n        </span>\n        <span ng-switch-when="TEXTAREA">\n            <textarea name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" class="slds-textarea"></textarea>\n        </span>\n        <span ng-switch-when="REFERENCE">\n            <div class="slds-input-has-icon slds-input-has-icon--right">\n                <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">\n                    <use xlink:href="{{SLDSICON.SEARCH}}"></use>\n                </svg>\n                <input type="text" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="lookupObj.selectedItem" ng-focus="lookupObj.showItems = true" ng-blur="lookupObj.showItems = false" ng-readonly="(fieldInfo.isCreateable === \'false\')" class="slds-input" />\n            </div>\n            <div class="slds-lookup" ng-show="lookupObj.showItems">\n                <div class="slds-lookup__menu" role="listbox">\n                    <ul class="slds-lookup__list" role="presentation">\n                        <li class="slds-lookup__item" ng-repeat="luItem in fieldInfo.lookupObjects | orderBy:\'Name\' | filter:lookupObj.selectedItem">\n                            <a id="{{luItem.Id}}" href="#" role="option" ng-mousedown="selectLookupItem(luItem)">{{luItem.Name}}</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </span>\n        <span ng-switch-when="CURRENCY">\n            <input type="number" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" ng-readonly="(fieldInfo.isCreateable === \'false\')" class="slds-input" />\n        </span>\n        <span ng-switch-when="DOUBLE">\n            <input type="number" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" ng-readonly="(fieldInfo.isCreateable === \'false\')" class="slds-input" />\n        </span>\n        <span ng-switch-default="default">\n            <input type="text" name="{{fieldInfo.label}}" id="{{fieldInfo.label}}" ng-model="parentObj[fieldName]" ng-readonly="(fieldInfo.isCreateable === \'false\')" class="slds-input" />\n        </span>\n    </span>\n</div>'),$templateCache.put("ObjectPricing.tpl.html",'<div class="vloc-object-pricing">\n    <p>Object Pricing ({{mode}}) &nbsp; <span class="slds-badge">PLACEHOLDER</span></p>\n</div>'),
$templateCache.put("ObjectType.tpl.html",'<div class="vloc-object-type">\n    <div ng-repeat="facet in facets">\n        <h2 class="slds-text-heading--small" ng-if="facets.length > 1">{{facet.facetObj.Name}}</h2>\n        <section class="vloc-section" ng-repeat="section in facet.sections">\n            <h3 class="slds-text-heading--label">{{section.sectionObj.Name}}</h3>\n            <div class="vloc-section-body">\n                <div ng-if="!section.hasCustomView" class="slds-form--horizontal">\n                    <div class="slds-form-element" ng-repeat="sectionEl in section.sectionElements">\n                        <label class="slds-form-element__label" for="{{objectFields[fieldName].label}}">{{sectionEl.Name}}</label>\n                        <div class="slds-form-element__control" ng-init="fieldName = sectionEl[nsp+\'FieldApiName__c\']; fieldName = (fieldName.endsWith(\'__c\') ? nsp+fieldName : fieldName);">\n                            <div ng-switch="sectionEl[nsp+\'Type__c\']">\n                                <div ng-switch-when="Field">\n                                    <vloc-obj-field display-mode="\'edit\'" parent-obj="editItem" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                                </div>\n                                <div ng-switch-when="Attribute">\n                                    Attribute!\n                                </div>\n                                <div ng-switch-when="Custom View">\n                                    Something is wrong!\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="slds-form-element__row form-buttons slds-text-align--right">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="closeDetails()">Cancel</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id === undefined" ng-click="createItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="item.Id !== undefined" ng-click="saveItem($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("ObjectTypes.tpl.html",'<div class="vloc-object-types">\n    <div class="new-objecttype slds-text-align--center">\n        <button type="button" class="slds-button slds-button--neutral" ng-click="newItem()">New Object Type</button>\n    </div>\n    <div class="slds-scrollable--x">\n        <table class="slds-table slds-table--bordered items">\n            <thead>\n                <tr class="slds-text-heading--label">\n                    <th class="actions"><div class="slds-truncate">&nbsp;</div></th>\n                    <th ng-repeat="field in fieldSet">\n                        <div class="slds-truncate">{{objectFields[field.fieldPath].label}}</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-class="{\'slds-is-selected\': (item.Id === selectedItem.Id)}" ng-repeat="item in items" ng-click="launchTab(item)">\n                    <td class="actions">\n                        <button class="slds-button slds-button--icon" ng-click="editItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.EDIT}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Edit</span>\n                        </button>\n                        <button class="slds-button slds-button--icon" ng-click="deleteItem(item, $event)">\n                            <svg aria-hidden="true" class="slds-button__icon">\n                                <use xlink:href="{{SLDSICON.DELETE}}"></use>\n                            </svg>\n                            <span class="slds-assistive-text">Delete</span>\n                        </button>\n                    </td>\n                    <td ng-repeat="field in fieldSet">\n                        <vloc-obj-field display-mode="\'view\'" parent-obj="item" field-name="field.fieldPath" field-info="objectFields[field.fieldPath]" obj-picklists=""></vloc-obj-field>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n\n</div>'),$templateCache.put("OfferPricingComponent.tpl.html",'<div class="vloc-offer-pricing-component vloc-override">\n    <div ng-repeat="facet in facets">\n        <div ng-if="overrideMode" class="slds-m-top--small slds-m-bottom--medium">\n            <div class="slds-text-align--right">\n                <button type="button" ng-if="!hasOverride" class="slds-button slds-button--neutral" ng-click="createOverride()">Create Override</button>\n                <button type="button" ng-if="hasOverride" class="slds-button slds-button--neutral" ng-click="deleteOverride()">Delete Override</button>\n            </div>\n            <div class="override-form override-form-hd" ng-if="hasOverride">\n                <div class="override-form-lbl-override"></div>\n                <div class="override-form-element-override">Original Values</div>\n                <div class="override-form-element-override">Overridden Values</div>\n            </div>\n        </div>\n        <section class="vloc-section" ng-repeat="section in facet.sections">\n            <h3 class="slds-text-heading--label">{{section.sectionObj.Name}}</h3>\n            <div class="vloc-section-body">\n                <div class="override-form" ng-repeat="sectionEl in section.sectionElements">\n                    <label ng-class="{\'override-form-lbl-override\': overrideMode, \'override-form-lbl\': !overrideMode}" for="{{objectFields[fieldName].label}}">{{sectionEl.Name}}</label>\n                    <div ng-class="{\'override-form-element-override\': overrideMode, \'override-form-element\': !overrideMode}" ng-init="fieldName = sectionEl[nsp+\'FieldApiName__c\']; fieldName = (fieldName.endsWith(\'__c\') ? nsp+fieldName : fieldName);">\n                        <vloc-obj-field display-mode="objDisplayMode" parent-obj="editItem" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                    </div>\n                    <div ng-if="hasOverride" ng-class="{\'override-form-element-override\': overrideMode, \'override-form-element\': !overrideMode}" ng-init="fieldName = sectionEl[nsp+\'FieldApiName__c\']; fieldName = (fieldName.endsWith(\'__c\') ? nsp+fieldName : fieldName);">\n                        <vloc-obj-field display-mode="\'edit\'" parent-obj="overrideObj" field-name="fieldName" field-info="objectFields[fieldName]" obj-picklists="objectPicklists[fieldName.toLowerCase()]"></vloc-obj-field>\n                    </div>\n                </div>\n            </div>\n        </section>\n        <div class="slds-form-element__row form-buttons slds-text-align--right" ng-if="mode !== \'view\'">\n            <button type="button" class="slds-button slds-button--brand" ng-if="(mode === \'edit\' && editItem.Id === undefined)" ng-click="createItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="(mode === \'edit\' && editItem.Id !== undefined)" ng-click="saveItem($event)">Save</button>\n            <button type="button" class="slds-button slds-button--brand" ng-if="(mode === \'override\')" ng-click="saveOverride($event)">Save</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("PreviewItemModal.tpl.html",'<div class="slds-modal slds-fade-in-open" aria-hidden="false" role="dialog">\n    <div class="slds-modal__container">\n        <div class="slds-modal__header">\n            <h3 class="slds-text-heading--medium">{{title}}</h3>\n        </div>\n        <div class="slds-modal__content slds-p-around--medium">\n            <div class="slds-text-align--center">\n                <img ng-src="{{itemUrl}}"/>\n            </div>\n        </div>\n        <div class="slds-modal__footer">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="$hide()">OK</button>\n        </div>\n    </div>\n</div>'),$templateCache.put("VlocAttribute.tpl.html",'<div class="vloc-attribute">\n    <div ng-if="hasPicklist">\n        <select id="attr_{{attributeId}}" ng-model="attrAssgnObj[nsp+\'Value__c\']" ng-disabled="attrAssgnObj[nsp+\'IsConfigurable__c\']" class="slds-select">\n            <option ng-repeat="o in picklistItems" value="{{o[nsp+\'Value__c\']}}" ng-selected="o[nsp+\'Value__c\'] === attrAssgnObj[nsp+\'Value__c\']">{{o.Name}}</option>\n        </select>\n    </div>\n    <div ng-if="!hasPicklist">\n        <input type="text" id="attr_{{attributeId}}" ng-model="attrAssgnObj[nsp+\'Value__c\']" ng-disabled="attrAssgnObj[nsp+\'IsConfigurable__c\']" class="slds-input" />\n    </div>\n</div>'),$templateCache.put("VlocObjAttrsFields.tpl.html",'<div class="vloc-obj-attrs-fields">\n    <div class="slds-m-bottom--small slds-clearfix">\n        <div class="slds-button-group slds-float--right" role="group">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="unassignAttrsFields()" ng-disabled="selectedCount < 1">Unassign</button>\n            <button type="button" class="slds-button slds-button--neutral" ng-click="showAllAttrsFields()">Assign Attributes/Fields</button>\n        </div>\n    </div>\n    <div class="slds-scrollable--x">\n        <table class="slds-table slds-table--bordered items">\n            <thead>\n                <tr class="slds-text-heading--label">\n                    <th>\n                        <label class="slds-checkbox">\n                            <input type="checkbox" ng-model="allSelected" ng-change="selectAll()" />\n                            <span class="slds-checkbox--faux"></span>\n                            <span class="slds-assistive-text">Select All</span>\n                        </label>\n                    </th>\n                    <th>Attribute</th>\n                    <th>Field</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr ng-if="items.length === 0">\n                    <td colspan="3" class="slds-text-align--center">There are no attributes/fields assigned just yet. <a href="#" ng-click="showAllAttrsFields()">Assign some attributes/fields.</a></td>\n                </tr>\n                <tr ng-repeat="item in items">\n                    <td class="slds-cell-shrink">\n                        <label class="slds-checkbox">\n                            <input type="checkbox" ng-model="item.isSelected" ng-click="$event.stopPropagation()" ng-change="selectItem(item, $event)" />\n                            <span class="slds-checkbox--faux"></span>\n                            <span class="slds-assistive-text">Select Row</span>\n                        </label>\n                    </td>\n                    <td class="slds-truncate"><a href="#" ng-click="showAttributeMetadata(item.attrId)">{{item.attrName}}</a></td>\n                    <td class="slds-truncate"><a href="#" ng-click="showFieldMetadata(objectName, item.fieldName)">{{item.fieldLabel}}</a></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>')}]);
},{}],25:[function(require,module,exports){
angular.module('productclassadmin')
.controller('ProductClassAdminController', ['$scope', '$rootScope', '$location', '$timeout', '$compile', 'remoteActions',
    function ($scope, $rootScope, $location, $timeout, $compile, remoteActions) {
        $scope.OBJECT_NAME = 'Product2';
        $scope.nsp = fileNsPrefix();
        $scope.productClassId = $location.search().id;
        $scope.productClassName = $location.search().name;
        $scope.showMenu = false;
        $scope.showGlobalContext = false;
        $scope.showFacetDetail = false;
        $scope.facets = [];
        $scope.objectFields = null;
        $scope.objectPicklists = {};
        $scope.productClass = {};
        $scope.editProductClass = {};

        $scope.toggleMenu = function() {
            $scope.showMenu = !$scope.showMenu;
        };

        $scope.toggleGlobalContext = function() {
            $scope.showGlobalContext = !$scope.showGlobalContext;
        };

        $scope.getObjectLayoutByName = function(objectName, recordType) {
            remoteActions.getObjectLayoutByName(objectName, recordType).then(function(results) {
                console.log('getObjectLayoutByName productClass results: ', results);
                $scope.buildObjectLayout(results);
            });
        };

        $scope.getObjectLayoutById = function(objectId, forSelf) {
            remoteActions.getObjectLayoutById(objectId, forSelf).then(function(results) {
                console.log('getObjectLayoutById productClass results: ', results);
                $scope.buildObjectLayout(results);
            });
        };

        $scope.buildObjectLayout = function(results) {
            $scope.objFacets = results.facets;
            $scope.objectLayoutId = results.objLayout.Id;
            $scope.facets = [];
            if (j$.isArray($scope.objFacets) && $scope.objFacets.length > 0) {
                angular.forEach($scope.objFacets, function(facet, idx) {
                    facet.hasSectionCustomView = false;
                    facet.active = (idx === 0);
                    angular.forEach(facet.sections, function(section) {
                        if (section.facetSectionObj[$scope.nsp + 'ViewType__c'] === 'Custom View') {
                            section.hasCustomView = true;
                            facet.hasSectionCustomView = true;
                        }
                    });
                    $scope.facets.push(facet);
                });
            }
            console.log('FACETS for productClass: ', $scope.facets);
        };

        $scope.describeObject = function(objectName) {
            remoteActions.describeObject(objectName).then(function(results) {
                console.log('describeObject productClass results: ', results);
                $scope.objectFields = results;
            });
        };

        $scope.getObjectPicklistsByName = function(objectName) {
            remoteActions.getObjectPicklistsByName(objectName).then(function(results) {
                $scope.objectPicklists = {};
                for (var key in results) {
                    if (key.endsWith('__c')) {
                        $scope.objectPicklists[$scope.nsp + key] = results[key];
                    } else {
                        $scope.objectPicklists[key] = results[key];
                    }
                }
                console.log('getObjectPicklistsByName results:', $scope.objectPicklists);
            });
        };

        $scope.getObject = function(picklistId) {
            remoteActions.getObject(picklistId).then(function(results) {
                console.log('getObject results: ', results);
                $scope.productClass = results;
                $scope.editProductClass = {};
                for (var key in $scope.productClass) {
                    $scope.editProductClass[key] = $scope.productClass[key];
                }
            });
        };

        $scope.gotoFacet = function(facet) {
            $scope.closeFacetDetails(); // close the facet details section, if open
            if (!facet.active) {
                angular.forEach($scope.facets, function(f) {
                    f.active = (f.facetObj.Id === facet.facetObj.Id);
                });
            }
        };

        $scope.saveObject = function(event) {
            var originalText;
            if (event) {
                originalText = event.currentTarget.innerText;
                event.currentTarget.disabled = true;
                event.currentTarget.innerText = 'Saving...';
            }

            $rootScope.$broadcast('saveVlocAttribute');

            var itemToSave = {};
            for (var key in $scope.editProductClass) {
                if (key !== '$$hashKey') {
                    itemToSave[key] = ($scope.editProductClass[key] === null ? undefined : $scope.editProductClass[key]);
                }
            }

            remoteActions.updateObject(itemToSave).then(function(results) {
                console.log('save productClass results: ', results);
                $scope.productClass = {};
                $scope.editProductClass = {};
                for (var key in results) {
                    if ($scope.objectFields[key] && $scope.objectFields[key].type === 'DATE') {
                        var tzOffset = (window.userTimezoneOffset || window.parent.userTimezoneOffset);
                        $scope.productClass[key] = results[key] + tzOffset;
                        $scope.editProductClass[key] = results[key] + tzOffset;
                    } else {
                        $scope.productClass[key] = results[key];
                        $scope.editProductClass[key] = results[key];
                    }
                }
                if (event) {
                    event.currentTarget.innerText = originalText;
                    event.currentTarget.disabled = false;
                }
                //TODO: show save success message
            }, function(error) {
                //TODO: show save failure message
                if (event) {
                    event.currentTarget.innerText = 'Error!';
                    $timeout(function() {
                        event.currentTarget.innerText = originalText;
                        event.currentTarget.disabled = false;
                    }, 5000);
                }
            });
        };

        $scope.$on('showItemDetails', function(event, data) {
            $scope.openFacetDetails(data.facetType, data.facetData);
        });

        $scope.$on('hideItemDetails', function() {
            $scope.closeFacetDetails();
        });

        $scope.openFacetDetails = function(facetType, facetData) {
            var compiledHTML;
            if (facetType === 'ASSIGN_ATTRS_FIELDS') {
                $scope.objectId = facetData.objectId;
                $scope.assignedItems = facetData.assignedItems;
                compiledHTML = $compile('<vloc-assign-attrs-fields object-id="objectId" assigned-items="assignedItems"></vloc-assign-attrs-fields>')($scope);
                j$('#facet-detail-content').html(compiledHTML);
            } else if (facetType === 'ATTR_METADATA') {
                $scope.objectId = facetData.objectId;
                $scope.attrObj = facetData.attrObj;
                $scope.attrAssgnObj = facetData.attrAssgnObj;
                $scope.mode = facetData.mode;
                compiledHTML = $compile('<vloc-attribute-metadata object-id="objectId" attr-obj="attrObj" attr-assgn-obj="attrAssgnObj" mode="mode"></vloc-attribute-metadata>')($scope);
                j$('#facet-detail-content').html(compiledHTML);
            } else if (facetType === 'FIELD_METADATA') {
                $scope.objectName = facetData.objectName;
                $scope.fieldName = facetData.fieldName;
                compiledHTML = $compile('<vloc-field-metadata object-name="objectName" field-name="fieldName"></vloc-field-metadata>')($scope);
                j$('#facet-detail-content').html(compiledHTML);
            } else if (facetType === 'LAYOUT_ELEMENT') {
                $scope.objectId = facetData.objectId;
                $scope.elementObj = facetData.elementObj;
                $scope.objectName = facetData.objectName;
                $scope.objectLayoutId = facetData.objectLayoutId;
                $scope.objectFacetId = facetData.objectFacetId;
                $scope.objectSectionId = facetData.objectSectionId;
                var directiveHTML = '<vloc-layout-element item="elementObj" layout-id="objectLayoutId" ' +
                    'facet-id="objectFacetId" section-id="objectSectionId" object-name="objectName"></vloc-layout-element>';
                compiledHTML = $compile(directiveHTML)($scope);
                j$('#facet-detail-content').html(compiledHTML);
            }
            $scope.showFacetDetail = true;
        };

        $scope.closeFacetDetails = function() {
            $scope.showFacetDetail = false;
            j$('#facet-detail-content').html('');
        };

        $scope.setupViewAttrs = function(section) {
            $scope.customViewData = {
                'name': section.facetSectionObj[$scope.nsp + 'ViewUri__c'],
                'attrs': {
                    'objectId': $scope.productClassId
                }
            };
        };

        $scope.init = function() {
            $scope.getObjectLayoutById($scope.productClassId, true);
            $scope.describeObject($scope.OBJECT_NAME);
            $scope.getObjectPicklistsByName($scope.OBJECT_NAME);
            $scope.getObject($scope.productClassId);
        };
        $scope.init();
    }
]);

},{}]},{},[2]);

})();